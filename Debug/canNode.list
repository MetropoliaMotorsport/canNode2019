
canNode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026f4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08002800  08002800  00012800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080028a4  080028a4  000128a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080028a8  080028a8  000128a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000006c  20000000  080028ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000001ac  20000070  08002918  00020070  2**3
                  ALLOC
  7 ._user_heap_stack 00000600  2000021c  08002918  0002021c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00017f66  00000000  00000000  00020095  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003378  00000000  00000000  00037ffb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00007562  00000000  00000000  0003b373  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000a60  00000000  00000000  000428d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000eb0  00000000  00000000  00043338  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00016ee6  00000000  00000000  000441e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000c171  00000000  00000000  0005b0ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00078c6a  00000000  00000000  0006723f  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  000dfea9  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001e50  00000000  00000000  000dff24  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080027e8 	.word	0x080027e8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080027e8 	.word	0x080027e8

0800014c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800014c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800014e:	4b0e      	ldr	r3, [pc, #56]	; (8000188 <HAL_InitTick+0x3c>)
{
 8000150:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000152:	7818      	ldrb	r0, [r3, #0]
 8000154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000158:	fbb3 f3f0 	udiv	r3, r3, r0
 800015c:	4a0b      	ldr	r2, [pc, #44]	; (800018c <HAL_InitTick+0x40>)
 800015e:	6810      	ldr	r0, [r2, #0]
 8000160:	fbb0 f0f3 	udiv	r0, r0, r3
 8000164:	f000 fe90 	bl	8000e88 <HAL_SYSTICK_Config>
 8000168:	4604      	mov	r4, r0
 800016a:	b958      	cbnz	r0, 8000184 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800016c:	2d0f      	cmp	r5, #15
 800016e:	d809      	bhi.n	8000184 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000170:	4602      	mov	r2, r0
 8000172:	4629      	mov	r1, r5
 8000174:	f04f 30ff 	mov.w	r0, #4294967295
 8000178:	f000 fe46 	bl	8000e08 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800017c:	4620      	mov	r0, r4
 800017e:	4b04      	ldr	r3, [pc, #16]	; (8000190 <HAL_InitTick+0x44>)
 8000180:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000182:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000184:	2001      	movs	r0, #1
 8000186:	e7fc      	b.n	8000182 <HAL_InitTick+0x36>
 8000188:	20000000 	.word	0x20000000
 800018c:	20000068 	.word	0x20000068
 8000190:	20000004 	.word	0x20000004

08000194 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000194:	4a07      	ldr	r2, [pc, #28]	; (80001b4 <HAL_Init+0x20>)
{
 8000196:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000198:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800019a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800019c:	f043 0310 	orr.w	r3, r3, #16
 80001a0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001a2:	f000 fe1f 	bl	8000de4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001a6:	2000      	movs	r0, #0
 80001a8:	f7ff ffd0 	bl	800014c <HAL_InitTick>
  HAL_MspInit();
 80001ac:	f002 f99a 	bl	80024e4 <HAL_MspInit>
}
 80001b0:	2000      	movs	r0, #0
 80001b2:	bd08      	pop	{r3, pc}
 80001b4:	40022000 	.word	0x40022000

080001b8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001b8:	4a03      	ldr	r2, [pc, #12]	; (80001c8 <HAL_IncTick+0x10>)
 80001ba:	4b04      	ldr	r3, [pc, #16]	; (80001cc <HAL_IncTick+0x14>)
 80001bc:	6811      	ldr	r1, [r2, #0]
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	440b      	add	r3, r1
 80001c2:	6013      	str	r3, [r2, #0]
}
 80001c4:	4770      	bx	lr
 80001c6:	bf00      	nop
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	20000000 	.word	0x20000000

080001d0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001d0:	4b01      	ldr	r3, [pc, #4]	; (80001d8 <HAL_GetTick+0x8>)
 80001d2:	6818      	ldr	r0, [r3, #0]
}
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	2000008c 	.word	0x2000008c

080001dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80001dc:	b538      	push	{r3, r4, r5, lr}
 80001de:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80001e0:	f7ff fff6 	bl	80001d0 <HAL_GetTick>
 80001e4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80001e6:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80001e8:	bf1e      	ittt	ne
 80001ea:	4b04      	ldrne	r3, [pc, #16]	; (80001fc <HAL_Delay+0x20>)
 80001ec:	781b      	ldrbne	r3, [r3, #0]
 80001ee:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80001f0:	f7ff ffee 	bl	80001d0 <HAL_GetTick>
 80001f4:	1b40      	subs	r0, r0, r5
 80001f6:	42a0      	cmp	r0, r4
 80001f8:	d3fa      	bcc.n	80001f0 <HAL_Delay+0x14>
  {
  }
}
 80001fa:	bd38      	pop	{r3, r4, r5, pc}
 80001fc:	20000000 	.word	0x20000000

08000200 <ADC_DMAConvCplt>:
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000200:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8000202:	b510      	push	{r4, lr}
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000204:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000206:	f012 0f50 	tst.w	r2, #80	; 0x50
 800020a:	d11b      	bne.n	8000244 <ADC_DMAConvCplt+0x44>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800020c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800020e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000212:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000214:	681a      	ldr	r2, [r3, #0]
 8000216:	6892      	ldr	r2, [r2, #8]
 8000218:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 800021c:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8000220:	d10c      	bne.n	800023c <ADC_DMAConvCplt+0x3c>
 8000222:	68da      	ldr	r2, [r3, #12]
 8000224:	b952      	cbnz	r2, 800023c <ADC_DMAConvCplt+0x3c>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000226:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000228:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800022c:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800022e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000230:	04d2      	lsls	r2, r2, #19
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000232:	bf5e      	ittt	pl
 8000234:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
 8000236:	f042 0201 	orrpl.w	r2, r2, #1
 800023a:	629a      	strpl	r2, [r3, #40]	; 0x28
      }
    }
    
    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc); 
 800023c:	4618      	mov	r0, r3
 800023e:	f001 feef 	bl	8002020 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8000242:	bd10      	pop	{r4, pc}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000244:	6a1b      	ldr	r3, [r3, #32]
}
 8000246:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800024a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800024c:	4718      	bx	r3

0800024e <HAL_ADC_ConvHalfCpltCallback>:
 800024e:	4770      	bx	lr

08000250 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8000250:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Half conversion callback */
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8000252:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8000254:	f7ff fffb 	bl	800024e <HAL_ADC_ConvHalfCpltCallback>
}
 8000258:	bd08      	pop	{r3, pc}

0800025a <HAL_ADC_LevelOutOfWindowCallback>:
 800025a:	4770      	bx	lr

0800025c <HAL_ADC_IRQHandler>:
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 800025c:	6803      	ldr	r3, [r0, #0]
{
 800025e:	b510      	push	{r4, lr}
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8000260:	685a      	ldr	r2, [r3, #4]
{
 8000262:	4604      	mov	r4, r0
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8000264:	0690      	lsls	r0, r2, #26
 8000266:	d527      	bpl.n	80002b8 <HAL_ADC_IRQHandler+0x5c>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8000268:	681a      	ldr	r2, [r3, #0]
 800026a:	0791      	lsls	r1, r2, #30
 800026c:	d524      	bpl.n	80002b8 <HAL_ADC_IRQHandler+0x5c>
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800026e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000270:	06d2      	lsls	r2, r2, #27
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000272:	bf5e      	ittt	pl
 8000274:	6aa2      	ldrpl	r2, [r4, #40]	; 0x28
 8000276:	f442 7200 	orrpl.w	r2, r2, #512	; 0x200
 800027a:	62a2      	strpl	r2, [r4, #40]	; 0x28
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800027c:	689a      	ldr	r2, [r3, #8]
 800027e:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8000282:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8000286:	d110      	bne.n	80002aa <HAL_ADC_IRQHandler+0x4e>
 8000288:	68e2      	ldr	r2, [r4, #12]
 800028a:	b972      	cbnz	r2, 80002aa <HAL_ADC_IRQHandler+0x4e>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800028c:	685a      	ldr	r2, [r3, #4]
 800028e:	f022 0220 	bic.w	r2, r2, #32
 8000292:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000294:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000296:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800029a:	62a3      	str	r3, [r4, #40]	; 0x28
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800029c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800029e:	04db      	lsls	r3, r3, #19
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80002a0:	bf5e      	ittt	pl
 80002a2:	6aa3      	ldrpl	r3, [r4, #40]	; 0x28
 80002a4:	f043 0301 	orrpl.w	r3, r3, #1
 80002a8:	62a3      	strpl	r3, [r4, #40]	; 0x28
      HAL_ADC_ConvCpltCallback(hadc);
 80002aa:	4620      	mov	r0, r4
 80002ac:	f001 feb8 	bl	8002020 <HAL_ADC_ConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80002b0:	f06f 0212 	mvn.w	r2, #18
 80002b4:	6823      	ldr	r3, [r4, #0]
 80002b6:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 80002b8:	6823      	ldr	r3, [r4, #0]
 80002ba:	685a      	ldr	r2, [r3, #4]
 80002bc:	0610      	lsls	r0, r2, #24
 80002be:	d530      	bpl.n	8000322 <HAL_ADC_IRQHandler+0xc6>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 80002c0:	681a      	ldr	r2, [r3, #0]
 80002c2:	0751      	lsls	r1, r2, #29
 80002c4:	d52d      	bpl.n	8000322 <HAL_ADC_IRQHandler+0xc6>
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80002c6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80002c8:	06d2      	lsls	r2, r2, #27
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80002ca:	bf5e      	ittt	pl
 80002cc:	6aa2      	ldrpl	r2, [r4, #40]	; 0x28
 80002ce:	f442 5200 	orrpl.w	r2, r2, #8192	; 0x2000
 80002d2:	62a2      	strpl	r2, [r4, #40]	; 0x28
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80002d4:	689a      	ldr	r2, [r3, #8]
 80002d6:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
 80002da:	f5b2 4fe0 	cmp.w	r2, #28672	; 0x7000
 80002de:	d00a      	beq.n	80002f6 <HAL_ADC_IRQHandler+0x9a>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80002e0:	685a      	ldr	r2, [r3, #4]
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80002e2:	0550      	lsls	r0, r2, #21
 80002e4:	d416      	bmi.n	8000314 <HAL_ADC_IRQHandler+0xb8>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80002e6:	689a      	ldr	r2, [r3, #8]
 80002e8:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80002ec:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 80002f0:	d110      	bne.n	8000314 <HAL_ADC_IRQHandler+0xb8>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80002f2:	68e2      	ldr	r2, [r4, #12]
 80002f4:	b972      	cbnz	r2, 8000314 <HAL_ADC_IRQHandler+0xb8>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80002f6:	685a      	ldr	r2, [r3, #4]
 80002f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80002fc:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80002fe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000300:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000304:	62a3      	str	r3, [r4, #40]	; 0x28
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000306:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000308:	05d9      	lsls	r1, r3, #23
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800030a:	bf5e      	ittt	pl
 800030c:	6aa3      	ldrpl	r3, [r4, #40]	; 0x28
 800030e:	f043 0301 	orrpl.w	r3, r3, #1
 8000312:	62a3      	strpl	r3, [r4, #40]	; 0x28
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000314:	4620      	mov	r0, r4
 8000316:	f000 fa73 	bl	8000800 <HAL_ADCEx_InjectedConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800031a:	f06f 020c 	mvn.w	r2, #12
 800031e:	6823      	ldr	r3, [r4, #0]
 8000320:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8000322:	6823      	ldr	r3, [r4, #0]
 8000324:	685a      	ldr	r2, [r3, #4]
 8000326:	0652      	lsls	r2, r2, #25
 8000328:	d50d      	bpl.n	8000346 <HAL_ADC_IRQHandler+0xea>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	07db      	lsls	r3, r3, #31
 800032e:	d50a      	bpl.n	8000346 <HAL_ADC_IRQHandler+0xea>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000330:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000332:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000334:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000338:	62a3      	str	r3, [r4, #40]	; 0x28
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800033a:	f7ff ff8e 	bl	800025a <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800033e:	f06f 0201 	mvn.w	r2, #1
 8000342:	6823      	ldr	r3, [r4, #0]
 8000344:	601a      	str	r2, [r3, #0]
}
 8000346:	bd10      	pop	{r4, pc}

08000348 <HAL_ADC_ErrorCallback>:
 8000348:	4770      	bx	lr

0800034a <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800034a:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 800034c:	b508      	push	{r3, lr}
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800034e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000350:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000354:	6283      	str	r3, [r0, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8000356:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000358:	f043 0304 	orr.w	r3, r3, #4
 800035c:	62c3      	str	r3, [r0, #44]	; 0x2c
  
  /* Error callback */
  HAL_ADC_ErrorCallback(hadc); 
 800035e:	f7ff fff3 	bl	8000348 <HAL_ADC_ErrorCallback>
}
 8000362:	bd08      	pop	{r3, pc}

08000364 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0U;
 8000364:	2300      	movs	r3, #0
{ 
 8000366:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8000368:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800036a:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800036e:	2b01      	cmp	r3, #1
 8000370:	d06d      	beq.n	800044e <HAL_ADC_ConfigChannel+0xea>
 8000372:	2301      	movs	r3, #1
  if (sConfig->Rank < 7U)
 8000374:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 8000376:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 800037a:	2d06      	cmp	r5, #6
 800037c:	6802      	ldr	r2, [r0, #0]
 800037e:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8000382:	680c      	ldr	r4, [r1, #0]
 8000384:	d823      	bhi.n	80003ce <HAL_ADC_ConfigChannel+0x6a>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000386:	261f      	movs	r6, #31
 8000388:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800038a:	3b05      	subs	r3, #5
 800038c:	409e      	lsls	r6, r3
 800038e:	ea25 0506 	bic.w	r5, r5, r6
 8000392:	fa04 f303 	lsl.w	r3, r4, r3
 8000396:	432b      	orrs	r3, r5
 8000398:	6353      	str	r3, [r2, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800039a:	2c09      	cmp	r4, #9
 800039c:	688b      	ldr	r3, [r1, #8]
 800039e:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 80003a2:	f04f 0107 	mov.w	r1, #7
 80003a6:	d92a      	bls.n	80003fe <HAL_ADC_ConfigChannel+0x9a>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80003a8:	68d6      	ldr	r6, [r2, #12]
 80003aa:	3d1e      	subs	r5, #30
 80003ac:	40a9      	lsls	r1, r5
 80003ae:	ea26 0101 	bic.w	r1, r6, r1
 80003b2:	40ab      	lsls	r3, r5
 80003b4:	430b      	orrs	r3, r1
 80003b6:	60d3      	str	r3, [r2, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80003b8:	f1a4 0310 	sub.w	r3, r4, #16
 80003bc:	2b01      	cmp	r3, #1
 80003be:	d926      	bls.n	800040e <HAL_ADC_ConfigChannel+0xaa>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80003c0:	2300      	movs	r3, #0
  __HAL_UNLOCK(hadc);
 80003c2:	2200      	movs	r2, #0
 80003c4:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
}
 80003c8:	4618      	mov	r0, r3
 80003ca:	b002      	add	sp, #8
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 80003ce:	2d0c      	cmp	r5, #12
 80003d0:	f04f 051f 	mov.w	r5, #31
 80003d4:	d809      	bhi.n	80003ea <HAL_ADC_ConfigChannel+0x86>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80003d6:	6b16      	ldr	r6, [r2, #48]	; 0x30
 80003d8:	3b23      	subs	r3, #35	; 0x23
 80003da:	409d      	lsls	r5, r3
 80003dc:	ea26 0505 	bic.w	r5, r6, r5
 80003e0:	fa04 f303 	lsl.w	r3, r4, r3
 80003e4:	432b      	orrs	r3, r5
 80003e6:	6313      	str	r3, [r2, #48]	; 0x30
 80003e8:	e7d7      	b.n	800039a <HAL_ADC_ConfigChannel+0x36>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80003ea:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 80003ec:	3b41      	subs	r3, #65	; 0x41
 80003ee:	409d      	lsls	r5, r3
 80003f0:	ea26 0505 	bic.w	r5, r6, r5
 80003f4:	fa04 f303 	lsl.w	r3, r4, r3
 80003f8:	432b      	orrs	r3, r5
 80003fa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80003fc:	e7cd      	b.n	800039a <HAL_ADC_ConfigChannel+0x36>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80003fe:	6916      	ldr	r6, [r2, #16]
 8000400:	40a9      	lsls	r1, r5
 8000402:	ea26 0101 	bic.w	r1, r6, r1
 8000406:	40ab      	lsls	r3, r5
 8000408:	430b      	orrs	r3, r1
 800040a:	6113      	str	r3, [r2, #16]
 800040c:	e7d4      	b.n	80003b8 <HAL_ADC_ConfigChannel+0x54>
    if (hadc->Instance == ADC1)
 800040e:	4b11      	ldr	r3, [pc, #68]	; (8000454 <HAL_ADC_ConfigChannel+0xf0>)
 8000410:	429a      	cmp	r2, r3
 8000412:	d116      	bne.n	8000442 <HAL_ADC_ConfigChannel+0xde>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000414:	6893      	ldr	r3, [r2, #8]
 8000416:	021b      	lsls	r3, r3, #8
 8000418:	d4d2      	bmi.n	80003c0 <HAL_ADC_ConfigChannel+0x5c>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800041a:	6893      	ldr	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800041c:	2c10      	cmp	r4, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800041e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000422:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000424:	d1cc      	bne.n	80003c0 <HAL_ADC_ConfigChannel+0x5c>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000426:	4b0c      	ldr	r3, [pc, #48]	; (8000458 <HAL_ADC_ConfigChannel+0xf4>)
 8000428:	4a0c      	ldr	r2, [pc, #48]	; (800045c <HAL_ADC_ConfigChannel+0xf8>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	fbb3 f2f2 	udiv	r2, r3, r2
 8000430:	230a      	movs	r3, #10
 8000432:	4353      	muls	r3, r2
            wait_loop_index--;
 8000434:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8000436:	9b01      	ldr	r3, [sp, #4]
 8000438:	2b00      	cmp	r3, #0
 800043a:	d0c1      	beq.n	80003c0 <HAL_ADC_ConfigChannel+0x5c>
            wait_loop_index--;
 800043c:	9b01      	ldr	r3, [sp, #4]
 800043e:	3b01      	subs	r3, #1
 8000440:	e7f8      	b.n	8000434 <HAL_ADC_ConfigChannel+0xd0>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000442:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000444:	f043 0320 	orr.w	r3, r3, #32
 8000448:	6283      	str	r3, [r0, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 800044a:	2301      	movs	r3, #1
 800044c:	e7b9      	b.n	80003c2 <HAL_ADC_ConfigChannel+0x5e>
  __HAL_LOCK(hadc);
 800044e:	2302      	movs	r3, #2
 8000450:	e7ba      	b.n	80003c8 <HAL_ADC_ConfigChannel+0x64>
 8000452:	bf00      	nop
 8000454:	40012400 	.word	0x40012400
 8000458:	20000068 	.word	0x20000068
 800045c:	000f4240 	.word	0x000f4240

08000460 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0U;
 8000460:	2300      	movs	r3, #0
{
 8000462:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8000464:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000466:	6803      	ldr	r3, [r0, #0]
{
 8000468:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 800046a:	689a      	ldr	r2, [r3, #8]
 800046c:	07d2      	lsls	r2, r2, #31
 800046e:	d502      	bpl.n	8000476 <ADC_Enable+0x16>
  return HAL_OK;
 8000470:	2000      	movs	r0, #0
}
 8000472:	b002      	add	sp, #8
 8000474:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_ADC_ENABLE(hadc);
 8000476:	689a      	ldr	r2, [r3, #8]
 8000478:	f042 0201 	orr.w	r2, r2, #1
 800047c:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800047e:	4b12      	ldr	r3, [pc, #72]	; (80004c8 <ADC_Enable+0x68>)
 8000480:	4a12      	ldr	r2, [pc, #72]	; (80004cc <ADC_Enable+0x6c>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 8000488:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 800048a:	9b01      	ldr	r3, [sp, #4]
 800048c:	b9c3      	cbnz	r3, 80004c0 <ADC_Enable+0x60>
    tickstart = HAL_GetTick();
 800048e:	f7ff fe9f 	bl	80001d0 <HAL_GetTick>
 8000492:	4606      	mov	r6, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000494:	6823      	ldr	r3, [r4, #0]
 8000496:	689d      	ldr	r5, [r3, #8]
 8000498:	f015 0501 	ands.w	r5, r5, #1
 800049c:	d1e8      	bne.n	8000470 <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800049e:	f7ff fe97 	bl	80001d0 <HAL_GetTick>
 80004a2:	1b80      	subs	r0, r0, r6
 80004a4:	2802      	cmp	r0, #2
 80004a6:	d9f5      	bls.n	8000494 <ADC_Enable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80004a8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 80004aa:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80004ae:	f043 0310 	orr.w	r3, r3, #16
 80004b2:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80004b4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        __HAL_UNLOCK(hadc);
 80004b6:	2001      	movs	r0, #1
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80004b8:	f043 0301 	orr.w	r3, r3, #1
 80004bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80004be:	e7d8      	b.n	8000472 <ADC_Enable+0x12>
      wait_loop_index--;
 80004c0:	9b01      	ldr	r3, [sp, #4]
 80004c2:	3b01      	subs	r3, #1
 80004c4:	e7e0      	b.n	8000488 <ADC_Enable+0x28>
 80004c6:	bf00      	nop
 80004c8:	20000068 	.word	0x20000068
 80004cc:	000f4240 	.word	0x000f4240

080004d0 <HAL_ADC_Start_DMA>:
{
 80004d0:	e92d 41d8 	stmdb	sp!, {r3, r4, r6, r7, r8, lr}
 80004d4:	4690      	mov	r8, r2
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80004d6:	4b40      	ldr	r3, [pc, #256]	; (80005d8 <HAL_ADC_Start_DMA+0x108>)
 80004d8:	6802      	ldr	r2, [r0, #0]
{
 80004da:	4604      	mov	r4, r0
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80004dc:	429a      	cmp	r2, r3
{
 80004de:	460f      	mov	r7, r1
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80004e0:	d002      	beq.n	80004e8 <HAL_ADC_Start_DMA+0x18>
 80004e2:	493e      	ldr	r1, [pc, #248]	; (80005dc <HAL_ADC_Start_DMA+0x10c>)
 80004e4:	428a      	cmp	r2, r1
 80004e6:	d103      	bne.n	80004f0 <HAL_ADC_Start_DMA+0x20>
 80004e8:	685b      	ldr	r3, [r3, #4]
 80004ea:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 80004ee:	d16e      	bne.n	80005ce <HAL_ADC_Start_DMA+0xfe>
    __HAL_LOCK(hadc);
 80004f0:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80004f4:	2b01      	cmp	r3, #1
 80004f6:	d06c      	beq.n	80005d2 <HAL_ADC_Start_DMA+0x102>
 80004f8:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
 80004fa:	4620      	mov	r0, r4
    __HAL_LOCK(hadc);
 80004fc:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    tmp_hal_status = ADC_Enable(hadc);
 8000500:	f7ff ffae 	bl	8000460 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8000504:	4606      	mov	r6, r0
 8000506:	2800      	cmp	r0, #0
 8000508:	d15d      	bne.n	80005c6 <HAL_ADC_Start_DMA+0xf6>
      ADC_STATE_CLR_SET(hadc->State,
 800050a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800050c:	6821      	ldr	r1, [r4, #0]
      ADC_STATE_CLR_SET(hadc->State,
 800050e:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000512:	4b32      	ldr	r3, [pc, #200]	; (80005dc <HAL_ADC_Start_DMA+0x10c>)
      ADC_STATE_CLR_SET(hadc->State,
 8000514:	f020 0001 	bic.w	r0, r0, #1
 8000518:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800051c:	4299      	cmp	r1, r3
      ADC_STATE_CLR_SET(hadc->State,
 800051e:	62a0      	str	r0, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000520:	d104      	bne.n	800052c <HAL_ADC_Start_DMA+0x5c>
 8000522:	4a2d      	ldr	r2, [pc, #180]	; (80005d8 <HAL_ADC_Start_DMA+0x108>)
 8000524:	6853      	ldr	r3, [r2, #4]
 8000526:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 800052a:	d13e      	bne.n	80005aa <HAL_ADC_Start_DMA+0xda>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800052c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800052e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000532:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000534:	684b      	ldr	r3, [r1, #4]
 8000536:	055a      	lsls	r2, r3, #21
 8000538:	d505      	bpl.n	8000546 <HAL_ADC_Start_DMA+0x76>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800053a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800053c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000540:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000544:	62a3      	str	r3, [r4, #40]	; 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000546:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000548:	6a20      	ldr	r0, [r4, #32]
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800054a:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800054e:	bf18      	it	ne
 8000550:	6ae3      	ldrne	r3, [r4, #44]	; 0x2c
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000552:	463a      	mov	r2, r7
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000554:	bf18      	it	ne
 8000556:	f023 0306 	bicne.w	r3, r3, #6
        ADC_CLEAR_ERRORCODE(hadc);
 800055a:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_UNLOCK(hadc);
 800055c:	2300      	movs	r3, #0
 800055e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000562:	4b1f      	ldr	r3, [pc, #124]	; (80005e0 <HAL_ADC_Start_DMA+0x110>)
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000564:	314c      	adds	r1, #76	; 0x4c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000566:	6283      	str	r3, [r0, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000568:	4b1e      	ldr	r3, [pc, #120]	; (80005e4 <HAL_ADC_Start_DMA+0x114>)
 800056a:	62c3      	str	r3, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800056c:	4b1e      	ldr	r3, [pc, #120]	; (80005e8 <HAL_ADC_Start_DMA+0x118>)
 800056e:	6303      	str	r3, [r0, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000570:	f06f 0302 	mvn.w	r3, #2
 8000574:	f841 3c4c 	str.w	r3, [r1, #-76]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000578:	f851 3c44 	ldr.w	r3, [r1, #-68]
 800057c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000580:	f841 3c44 	str.w	r3, [r1, #-68]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000584:	4643      	mov	r3, r8
 8000586:	f000 fcc5 	bl	8000f14 <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800058a:	6823      	ldr	r3, [r4, #0]
 800058c:	689a      	ldr	r2, [r3, #8]
 800058e:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8000592:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000596:	689a      	ldr	r2, [r3, #8]
 8000598:	bf0c      	ite	eq
 800059a:	f442 02a0 	orreq.w	r2, r2, #5242880	; 0x500000
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800059e:	f442 1280 	orrne.w	r2, r2, #1048576	; 0x100000
 80005a2:	609a      	str	r2, [r3, #8]
}
 80005a4:	4630      	mov	r0, r6
 80005a6:	e8bd 81d8 	ldmia.w	sp!, {r3, r4, r6, r7, r8, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80005aa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80005ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005b0:	62a3      	str	r3, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80005b2:	6853      	ldr	r3, [r2, #4]
 80005b4:	055b      	lsls	r3, r3, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80005b6:	bf41      	itttt	mi
 80005b8:	6aa0      	ldrmi	r0, [r4, #40]	; 0x28
 80005ba:	f420 5040 	bicmi.w	r0, r0, #12288	; 0x3000
 80005be:	f440 5080 	orrmi.w	r0, r0, #4096	; 0x1000
 80005c2:	62a0      	strmi	r0, [r4, #40]	; 0x28
 80005c4:	e7bf      	b.n	8000546 <HAL_ADC_Start_DMA+0x76>
      __HAL_UNLOCK(hadc);
 80005c6:	2300      	movs	r3, #0
 80005c8:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 80005cc:	e7ea      	b.n	80005a4 <HAL_ADC_Start_DMA+0xd4>
    tmp_hal_status = HAL_ERROR;
 80005ce:	2601      	movs	r6, #1
 80005d0:	e7e8      	b.n	80005a4 <HAL_ADC_Start_DMA+0xd4>
    __HAL_LOCK(hadc);
 80005d2:	2602      	movs	r6, #2
 80005d4:	e7e6      	b.n	80005a4 <HAL_ADC_Start_DMA+0xd4>
 80005d6:	bf00      	nop
 80005d8:	40012400 	.word	0x40012400
 80005dc:	40012800 	.word	0x40012800
 80005e0:	08000201 	.word	0x08000201
 80005e4:	08000251 	.word	0x08000251
 80005e8:	0800034b 	.word	0x0800034b

080005ec <ADC_ConversionStop_Disable>:
{
 80005ec:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 80005ee:	6803      	ldr	r3, [r0, #0]
{
 80005f0:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 80005f2:	689a      	ldr	r2, [r3, #8]
 80005f4:	07d2      	lsls	r2, r2, #31
 80005f6:	d401      	bmi.n	80005fc <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 80005f8:	2000      	movs	r0, #0
}
 80005fa:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 80005fc:	689a      	ldr	r2, [r3, #8]
 80005fe:	f022 0201 	bic.w	r2, r2, #1
 8000602:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8000604:	f7ff fde4 	bl	80001d0 <HAL_GetTick>
 8000608:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 800060a:	6823      	ldr	r3, [r4, #0]
 800060c:	689b      	ldr	r3, [r3, #8]
 800060e:	07db      	lsls	r3, r3, #31
 8000610:	d5f2      	bpl.n	80005f8 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000612:	f7ff fddd 	bl	80001d0 <HAL_GetTick>
 8000616:	1b40      	subs	r0, r0, r5
 8000618:	2802      	cmp	r0, #2
 800061a:	d9f6      	bls.n	800060a <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800061c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800061e:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000620:	f043 0310 	orr.w	r3, r3, #16
 8000624:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000626:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000628:	f043 0301 	orr.w	r3, r3, #1
 800062c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800062e:	e7e4      	b.n	80005fa <ADC_ConversionStop_Disable+0xe>

08000630 <HAL_ADC_Init>:
{
 8000630:	b570      	push	{r4, r5, r6, lr}
  if(hadc == NULL)
 8000632:	4604      	mov	r4, r0
 8000634:	2800      	cmp	r0, #0
 8000636:	d070      	beq.n	800071a <HAL_ADC_Init+0xea>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000638:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800063a:	b923      	cbnz	r3, 8000646 <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 800063c:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 800063e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8000642:	f001 ff71 	bl	8002528 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000646:	4620      	mov	r0, r4
 8000648:	f7ff ffd0 	bl	80005ec <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800064c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800064e:	f013 0f10 	tst.w	r3, #16
    ADC_STATE_CLR_SET(hadc->State,
 8000652:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000654:	d163      	bne.n	800071e <HAL_ADC_Init+0xee>
 8000656:	2800      	cmp	r0, #0
 8000658:	d161      	bne.n	800071e <HAL_ADC_Init+0xee>
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 800065a:	69e1      	ldr	r1, [r4, #28]
    ADC_STATE_CLR_SET(hadc->State,
 800065c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8000660:	6862      	ldr	r2, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 8000662:	f023 0302 	bic.w	r3, r3, #2
 8000666:	f043 0302 	orr.w	r3, r3, #2
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 800066a:	430a      	orrs	r2, r1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800066c:	68a1      	ldr	r1, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 800066e:	62a3      	str	r3, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 8000670:	68e3      	ldr	r3, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000672:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 8000676:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800067a:	d037      	beq.n	80006ec <HAL_ADC_Init+0xbc>
 800067c:	2901      	cmp	r1, #1
 800067e:	bf14      	ite	ne
 8000680:	4606      	movne	r6, r0
 8000682:	f44f 7680 	moveq.w	r6, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000686:	6965      	ldr	r5, [r4, #20]
 8000688:	2d01      	cmp	r5, #1
 800068a:	d106      	bne.n	800069a <HAL_ADC_Init+0x6a>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800068c:	bb83      	cbnz	r3, 80006f0 <HAL_ADC_Init+0xc0>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800068e:	69a3      	ldr	r3, [r4, #24]
 8000690:	3b01      	subs	r3, #1
 8000692:	ea46 3543 	orr.w	r5, r6, r3, lsl #13
 8000696:	f445 6600 	orr.w	r6, r5, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 800069a:	6823      	ldr	r3, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800069c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 80006a0:	685d      	ldr	r5, [r3, #4]
 80006a2:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 80006a6:	ea45 0506 	orr.w	r5, r5, r6
 80006aa:	605d      	str	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 80006ac:	689e      	ldr	r6, [r3, #8]
 80006ae:	4d1e      	ldr	r5, [pc, #120]	; (8000728 <HAL_ADC_Init+0xf8>)
 80006b0:	ea05 0506 	and.w	r5, r5, r6
 80006b4:	ea45 0502 	orr.w	r5, r5, r2
 80006b8:	609d      	str	r5, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80006ba:	d001      	beq.n	80006c0 <HAL_ADC_Init+0x90>
 80006bc:	2901      	cmp	r1, #1
 80006be:	d120      	bne.n	8000702 <HAL_ADC_Init+0xd2>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80006c0:	6921      	ldr	r1, [r4, #16]
 80006c2:	3901      	subs	r1, #1
 80006c4:	0509      	lsls	r1, r1, #20
    MODIFY_REG(hadc->Instance->SQR1,
 80006c6:	6add      	ldr	r5, [r3, #44]	; 0x2c
 80006c8:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 80006cc:	4329      	orrs	r1, r5
 80006ce:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80006d0:	6899      	ldr	r1, [r3, #8]
 80006d2:	4b16      	ldr	r3, [pc, #88]	; (800072c <HAL_ADC_Init+0xfc>)
 80006d4:	400b      	ands	r3, r1
 80006d6:	429a      	cmp	r2, r3
 80006d8:	d115      	bne.n	8000706 <HAL_ADC_Init+0xd6>
      ADC_CLEAR_ERRORCODE(hadc);
 80006da:	2300      	movs	r3, #0
 80006dc:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 80006de:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80006e0:	f023 0303 	bic.w	r3, r3, #3
 80006e4:	f043 0301 	orr.w	r3, r3, #1
 80006e8:	62a3      	str	r3, [r4, #40]	; 0x28
}
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80006ec:	460e      	mov	r6, r1
 80006ee:	e7ca      	b.n	8000686 <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80006f0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80006f2:	f043 0320 	orr.w	r3, r3, #32
 80006f6:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80006f8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80006fa:	f043 0301 	orr.w	r3, r3, #1
 80006fe:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000700:	e7cb      	b.n	800069a <HAL_ADC_Init+0x6a>
  uint32_t tmp_sqr1 = 0U;
 8000702:	2100      	movs	r1, #0
 8000704:	e7df      	b.n	80006c6 <HAL_ADC_Init+0x96>
      ADC_STATE_CLR_SET(hadc->State,
 8000706:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000708:	f023 0312 	bic.w	r3, r3, #18
 800070c:	f043 0310 	orr.w	r3, r3, #16
 8000710:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000712:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000714:	f043 0301 	orr.w	r3, r3, #1
 8000718:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 800071a:	2001      	movs	r0, #1
 800071c:	e7e5      	b.n	80006ea <HAL_ADC_Init+0xba>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800071e:	f043 0310 	orr.w	r3, r3, #16
 8000722:	62a3      	str	r3, [r4, #40]	; 0x28
 8000724:	e7f9      	b.n	800071a <HAL_ADC_Init+0xea>
 8000726:	bf00      	nop
 8000728:	ffe1f7fd 	.word	0xffe1f7fd
 800072c:	ff1f0efe 	.word	0xff1f0efe

08000730 <HAL_ADCEx_Calibration_Start>:
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8000730:	2300      	movs	r3, #0
{
 8000732:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8000734:	9301      	str	r3, [sp, #4]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000736:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 800073a:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 800073c:	2b01      	cmp	r3, #1
 800073e:	d05a      	beq.n	80007f6 <HAL_ADCEx_Calibration_Start+0xc6>
 8000740:	2301      	movs	r3, #1
 8000742:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000746:	f7ff ff51 	bl	80005ec <ADC_ConversionStop_Disable>
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800074a:	4605      	mov	r5, r0
 800074c:	2800      	cmp	r0, #0
 800074e:	d132      	bne.n	80007b6 <HAL_ADCEx_Calibration_Start+0x86>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000750:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000752:	2002      	movs	r0, #2
    ADC_STATE_CLR_SET(hadc->State,
 8000754:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000758:	f023 0302 	bic.w	r3, r3, #2
 800075c:	f043 0302 	orr.w	r3, r3, #2
 8000760:	62a3      	str	r3, [r4, #40]	; 0x28
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000762:	4b26      	ldr	r3, [pc, #152]	; (80007fc <HAL_ADCEx_Calibration_Start+0xcc>)
 8000764:	681e      	ldr	r6, [r3, #0]
 8000766:	f001 f9bd 	bl	8001ae4 <HAL_RCCEx_GetPeriphCLKFreq>
 800076a:	fbb6 f0f0 	udiv	r0, r6, r0
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 800076e:	0040      	lsls	r0, r0, #1
    wait_loop_index = ((SystemCoreClock
 8000770:	9001      	str	r0, [sp, #4]

    while(wait_loop_index != 0U)
 8000772:	9b01      	ldr	r3, [sp, #4]
 8000774:	bb1b      	cbnz	r3, 80007be <HAL_ADCEx_Calibration_Start+0x8e>
    {
      wait_loop_index--;
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8000776:	4620      	mov	r0, r4
 8000778:	f7ff fe72 	bl	8000460 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 800077c:	6822      	ldr	r2, [r4, #0]
 800077e:	6893      	ldr	r3, [r2, #8]
 8000780:	f043 0308 	orr.w	r3, r3, #8
 8000784:	6093      	str	r3, [r2, #8]
    
    tickstart = HAL_GetTick();  
 8000786:	f7ff fd23 	bl	80001d0 <HAL_GetTick>
 800078a:	4606      	mov	r6, r0

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800078c:	6823      	ldr	r3, [r4, #0]
 800078e:	689a      	ldr	r2, [r3, #8]
 8000790:	0712      	lsls	r2, r2, #28
 8000792:	d418      	bmi.n	80007c6 <HAL_ADCEx_Calibration_Start+0x96>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8000794:	689a      	ldr	r2, [r3, #8]
 8000796:	f042 0204 	orr.w	r2, r2, #4
 800079a:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800079c:	f7ff fd18 	bl	80001d0 <HAL_GetTick>
 80007a0:	4606      	mov	r6, r0

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80007a2:	6823      	ldr	r3, [r4, #0]
 80007a4:	689b      	ldr	r3, [r3, #8]
 80007a6:	075b      	lsls	r3, r3, #29
 80007a8:	d41f      	bmi.n	80007ea <HAL_ADCEx_Calibration_Start+0xba>
        return HAL_ERROR;
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80007aa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80007ac:	f023 0303 	bic.w	r3, r3, #3
 80007b0:	f043 0301 	orr.w	r3, r3, #1
 80007b4:	62a3      	str	r3, [r4, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80007b6:	2300      	movs	r3, #0
 80007b8:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80007bc:	e012      	b.n	80007e4 <HAL_ADCEx_Calibration_Start+0xb4>
      wait_loop_index--;
 80007be:	9b01      	ldr	r3, [sp, #4]
 80007c0:	3b01      	subs	r3, #1
 80007c2:	9301      	str	r3, [sp, #4]
 80007c4:	e7d5      	b.n	8000772 <HAL_ADCEx_Calibration_Start+0x42>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80007c6:	f7ff fd03 	bl	80001d0 <HAL_GetTick>
 80007ca:	1b80      	subs	r0, r0, r6
 80007cc:	280a      	cmp	r0, #10
 80007ce:	d9dd      	bls.n	800078c <HAL_ADCEx_Calibration_Start+0x5c>
        ADC_STATE_CLR_SET(hadc->State,
 80007d0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        return HAL_ERROR;
 80007d2:	2501      	movs	r5, #1
        ADC_STATE_CLR_SET(hadc->State,
 80007d4:	f023 0312 	bic.w	r3, r3, #18
 80007d8:	f043 0310 	orr.w	r3, r3, #16
 80007dc:	62a3      	str	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 80007de:	2300      	movs	r3, #0
 80007e0:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 80007e4:	4628      	mov	r0, r5
 80007e6:	b002      	add	sp, #8
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80007ea:	f7ff fcf1 	bl	80001d0 <HAL_GetTick>
 80007ee:	1b80      	subs	r0, r0, r6
 80007f0:	280a      	cmp	r0, #10
 80007f2:	d9d6      	bls.n	80007a2 <HAL_ADCEx_Calibration_Start+0x72>
 80007f4:	e7ec      	b.n	80007d0 <HAL_ADCEx_Calibration_Start+0xa0>
  __HAL_LOCK(hadc);
 80007f6:	2502      	movs	r5, #2
 80007f8:	e7f4      	b.n	80007e4 <HAL_ADCEx_Calibration_Start+0xb4>
 80007fa:	bf00      	nop
 80007fc:	20000068 	.word	0x20000068

08000800 <HAL_ADCEx_InjectedConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8000800:	4770      	bx	lr

08000802 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000802:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000804:	4604      	mov	r4, r0
 8000806:	2800      	cmp	r0, #0
 8000808:	d06e      	beq.n	80008e8 <HAL_CAN_Init+0xe6>
  assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

  if (hcan->State == HAL_CAN_STATE_RESET)
 800080a:	f890 3020 	ldrb.w	r3, [r0, #32]
 800080e:	b90b      	cbnz	r3, 8000814 <HAL_CAN_Init+0x12>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000810:	f001 ff14 	bl	800263c <HAL_CAN_MspInit>
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000814:	6822      	ldr	r2, [r4, #0]
 8000816:	6813      	ldr	r3, [r2, #0]
 8000818:	f023 0302 	bic.w	r3, r3, #2
 800081c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800081e:	f7ff fcd7 	bl	80001d0 <HAL_GetTick>
 8000822:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000824:	6823      	ldr	r3, [r4, #0]
 8000826:	685a      	ldr	r2, [r3, #4]
 8000828:	0791      	lsls	r1, r2, #30
 800082a:	d451      	bmi.n	80008d0 <HAL_CAN_Init+0xce>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800082c:	681a      	ldr	r2, [r3, #0]
 800082e:	f042 0201 	orr.w	r2, r2, #1
 8000832:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000834:	f7ff fccc 	bl	80001d0 <HAL_GetTick>
 8000838:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800083a:	6823      	ldr	r3, [r4, #0]
 800083c:	685a      	ldr	r2, [r3, #4]
 800083e:	07d2      	lsls	r2, r2, #31
 8000840:	d554      	bpl.n	80008ec <HAL_CAN_Init+0xea>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000842:	7e22      	ldrb	r2, [r4, #24]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000844:	2000      	movs	r0, #0
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000846:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000848:	681a      	ldr	r2, [r3, #0]
 800084a:	bf0c      	ite	eq
 800084c:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000850:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 8000854:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 8000856:	7e62      	ldrb	r2, [r4, #25]
 8000858:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800085a:	681a      	ldr	r2, [r3, #0]
 800085c:	bf0c      	ite	eq
 800085e:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000862:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 8000866:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000868:	7ea2      	ldrb	r2, [r4, #26]
 800086a:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800086c:	681a      	ldr	r2, [r3, #0]
 800086e:	bf0c      	ite	eq
 8000870:	f042 0220 	orreq.w	r2, r2, #32
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000874:	f022 0220 	bicne.w	r2, r2, #32
 8000878:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 800087a:	7ee2      	ldrb	r2, [r4, #27]
 800087c:	2a01      	cmp	r2, #1
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800087e:	681a      	ldr	r2, [r3, #0]
 8000880:	bf0c      	ite	eq
 8000882:	f022 0210 	biceq.w	r2, r2, #16
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000886:	f042 0210 	orrne.w	r2, r2, #16
 800088a:	601a      	str	r2, [r3, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800088c:	7f22      	ldrb	r2, [r4, #28]
 800088e:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000890:	681a      	ldr	r2, [r3, #0]
 8000892:	bf0c      	ite	eq
 8000894:	f042 0208 	orreq.w	r2, r2, #8
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000898:	f022 0208 	bicne.w	r2, r2, #8
 800089c:	601a      	str	r2, [r3, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800089e:	7f62      	ldrb	r2, [r4, #29]
 80008a0:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80008a2:	681a      	ldr	r2, [r3, #0]
 80008a4:	bf0c      	ite	eq
 80008a6:	f042 0204 	orreq.w	r2, r2, #4
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80008aa:	f022 0204 	bicne.w	r2, r2, #4
 80008ae:	601a      	str	r2, [r3, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80008b0:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 80008b4:	430a      	orrs	r2, r1
 80008b6:	6921      	ldr	r1, [r4, #16]
 80008b8:	430a      	orrs	r2, r1
 80008ba:	6961      	ldr	r1, [r4, #20]
 80008bc:	430a      	orrs	r2, r1
 80008be:	6861      	ldr	r1, [r4, #4]
 80008c0:	3901      	subs	r1, #1
 80008c2:	430a      	orrs	r2, r1
 80008c4:	61da      	str	r2, [r3, #28]

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80008c6:	2301      	movs	r3, #1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80008c8:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 80008ca:	f884 3020 	strb.w	r3, [r4, #32]

  /* Return function status */
  return HAL_OK;
}
 80008ce:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80008d0:	f7ff fc7e 	bl	80001d0 <HAL_GetTick>
 80008d4:	1b40      	subs	r0, r0, r5
 80008d6:	280a      	cmp	r0, #10
 80008d8:	d9a4      	bls.n	8000824 <HAL_CAN_Init+0x22>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80008da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80008dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008e0:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 80008e2:	2305      	movs	r3, #5
 80008e4:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 80008e8:	2001      	movs	r0, #1
 80008ea:	e7f0      	b.n	80008ce <HAL_CAN_Init+0xcc>
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80008ec:	f7ff fc70 	bl	80001d0 <HAL_GetTick>
 80008f0:	1b40      	subs	r0, r0, r5
 80008f2:	280a      	cmp	r0, #10
 80008f4:	d9a1      	bls.n	800083a <HAL_CAN_Init+0x38>
 80008f6:	e7f0      	b.n	80008da <HAL_CAN_Init+0xd8>

080008f8 <HAL_CAN_ConfigFilter>:
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
  HAL_CAN_StateTypeDef state = hcan->State;
 80008f8:	f890 3020 	ldrb.w	r3, [r0, #32]
{
 80008fc:	b570      	push	{r4, r5, r6, lr}

  if ((state == HAL_CAN_STATE_READY) ||
 80008fe:	3b01      	subs	r3, #1
 8000900:	2b01      	cmp	r3, #1
 8000902:	d85f      	bhi.n	80009c4 <HAL_CAN_ConfigFilter+0xcc>
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000904:	2401      	movs	r4, #1
  CAN_TypeDef *can_ip = hcan->Instance;
 8000906:	6803      	ldr	r3, [r0, #0]
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000908:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800090c:	f042 0201 	orr.w	r2, r2, #1
 8000910:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000914:	694a      	ldr	r2, [r1, #20]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000916:	f8d3 521c 	ldr.w	r5, [r3, #540]	; 0x21c
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800091a:	f002 001f 	and.w	r0, r2, #31
 800091e:	fa04 f000 	lsl.w	r0, r4, r0
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000922:	43c4      	mvns	r4, r0
 8000924:	4025      	ands	r5, r4
 8000926:	f8c3 521c 	str.w	r5, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800092a:	69cd      	ldr	r5, [r1, #28]
 800092c:	bb85      	cbnz	r5, 8000990 <HAL_CAN_ConfigFilter+0x98>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800092e:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000932:	68ce      	ldr	r6, [r1, #12]
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000934:	4025      	ands	r5, r4
 8000936:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800093a:	888d      	ldrh	r5, [r1, #4]
 800093c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000940:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000944:	f8c2 5240 	str.w	r5, [r2, #576]	; 0x240

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000948:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800094a:	880d      	ldrh	r5, [r1, #0]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800094c:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000950:	f8c2 5244 	str.w	r5, [r2, #580]	; 0x244
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000954:	698a      	ldr	r2, [r1, #24]
 8000956:	bb6a      	cbnz	r2, 80009b4 <HAL_CAN_ConfigFilter+0xbc>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000958:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800095c:	4022      	ands	r2, r4
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800095e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000962:	690a      	ldr	r2, [r1, #16]
 8000964:	bb52      	cbnz	r2, 80009bc <HAL_CAN_ConfigFilter+0xc4>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000966:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800096a:	4022      	ands	r2, r4
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800096c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000970:	6a0a      	ldr	r2, [r1, #32]
 8000972:	2a01      	cmp	r2, #1
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000974:	bf02      	ittt	eq
 8000976:	f8d3 221c 	ldreq.w	r2, [r3, #540]	; 0x21c
 800097a:	4310      	orreq	r0, r2
 800097c:	f8c3 021c 	streq.w	r0, [r3, #540]	; 0x21c

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);

    /* Return function status */
    return HAL_OK;
 8000980:	2000      	movs	r0, #0
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000982:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000986:	f022 0201 	bic.w	r2, r2, #1
 800098a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 800098e:	bd70      	pop	{r4, r5, r6, pc}
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000990:	2d01      	cmp	r5, #1
 8000992:	d1df      	bne.n	8000954 <HAL_CAN_ConfigFilter+0x5c>
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000994:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000998:	680e      	ldr	r6, [r1, #0]
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800099a:	4305      	orrs	r5, r0
 800099c:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80009a0:	888d      	ldrh	r5, [r1, #4]
 80009a2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80009a6:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80009aa:	f8c2 5240 	str.w	r5, [r2, #576]	; 0x240
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80009ae:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80009b0:	898d      	ldrh	r5, [r1, #12]
 80009b2:	e7cb      	b.n	800094c <HAL_CAN_ConfigFilter+0x54>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80009b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80009b8:	4302      	orrs	r2, r0
 80009ba:	e7d0      	b.n	800095e <HAL_CAN_ConfigFilter+0x66>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80009bc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80009c0:	4302      	orrs	r2, r0
 80009c2:	e7d3      	b.n	800096c <HAL_CAN_ConfigFilter+0x74>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80009c4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80009c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009ca:	6243      	str	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 80009cc:	2001      	movs	r0, #1
 80009ce:	e7de      	b.n	800098e <HAL_CAN_ConfigFilter+0x96>

080009d0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80009d0:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80009d2:	f890 3020 	ldrb.w	r3, [r0, #32]
{
 80009d6:	4604      	mov	r4, r0
  if (hcan->State == HAL_CAN_STATE_READY)
 80009d8:	2b01      	cmp	r3, #1
 80009da:	d11f      	bne.n	8000a1c <HAL_CAN_Start+0x4c>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80009dc:	2302      	movs	r3, #2

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80009de:	6802      	ldr	r2, [r0, #0]
    hcan->State = HAL_CAN_STATE_LISTENING;
 80009e0:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80009e4:	6813      	ldr	r3, [r2, #0]
 80009e6:	f023 0301 	bic.w	r3, r3, #1
 80009ea:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80009ec:	f7ff fbf0 	bl	80001d0 <HAL_GetTick>
 80009f0:	4605      	mov	r5, r0

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80009f2:	6823      	ldr	r3, [r4, #0]
 80009f4:	6858      	ldr	r0, [r3, #4]
 80009f6:	f010 0001 	ands.w	r0, r0, #1
 80009fa:	d101      	bne.n	8000a00 <HAL_CAN_Start+0x30>
        return HAL_ERROR;
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80009fc:	6260      	str	r0, [r4, #36]	; 0x24
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;

    return HAL_ERROR;
  }
}
 80009fe:	bd38      	pop	{r3, r4, r5, pc}
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000a00:	f7ff fbe6 	bl	80001d0 <HAL_GetTick>
 8000a04:	1b40      	subs	r0, r0, r5
 8000a06:	280a      	cmp	r0, #10
 8000a08:	d9f3      	bls.n	80009f2 <HAL_CAN_Start+0x22>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000a0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000a0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a10:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 8000a12:	2305      	movs	r3, #5
 8000a14:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 8000a18:	2001      	movs	r0, #1
 8000a1a:	e7f0      	b.n	80009fe <HAL_CAN_Start+0x2e>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000a1c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000a1e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000a22:	6243      	str	r3, [r0, #36]	; 0x24
 8000a24:	e7f8      	b.n	8000a18 <HAL_CAN_Start+0x48>

08000a26 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8000a26:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000a28:	f890 5020 	ldrb.w	r5, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000a2c:	6806      	ldr	r6, [r0, #0]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000a2e:	3d01      	subs	r5, #1
 8000a30:	2d01      	cmp	r5, #1
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000a32:	68b4      	ldr	r4, [r6, #8]
  if ((state == HAL_CAN_STATE_READY) ||
 8000a34:	d840      	bhi.n	8000ab8 <HAL_CAN_AddTxMessage+0x92>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000a36:	f014 5fe0 	tst.w	r4, #469762048	; 0x1c000000
 8000a3a:	d039      	beq.n	8000ab0 <HAL_CAN_AddTxMessage+0x8a>
        ((tsr & CAN_TSR_TME1) != 0U) ||
        ((tsr & CAN_TSR_TME2) != 0U))
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000a3c:	f3c4 6401 	ubfx	r4, r4, #24, #2

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8000a40:	2c03      	cmp	r4, #3
 8000a42:	f04f 0501 	mov.w	r5, #1
 8000a46:	d105      	bne.n	8000a54 <HAL_CAN_AddTxMessage+0x2e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8000a48:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000a4a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000a4e:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8000a50:	2001      	movs	r0, #1
 8000a52:	e027      	b.n	8000aa4 <HAL_CAN_AddTxMessage+0x7e>
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000a54:	40a5      	lsls	r5, r4
 8000a56:	601d      	str	r5, [r3, #0]
 8000a58:	e9d1 0702 	ldrd	r0, r7, [r1, #8]
 8000a5c:	f104 0318 	add.w	r3, r4, #24
      if (pHeader->IDE == CAN_ID_STD)
 8000a60:	bb08      	cbnz	r0, 8000aa6 <HAL_CAN_AddTxMessage+0x80>
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000a62:	6808      	ldr	r0, [r1, #0]
 8000a64:	ea47 5040 	orr.w	r0, r7, r0, lsl #21
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000a68:	011b      	lsls	r3, r3, #4
 8000a6a:	50f0      	str	r0, [r6, r3]
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000a6c:	6908      	ldr	r0, [r1, #16]
 8000a6e:	0124      	lsls	r4, r4, #4
 8000a70:	1933      	adds	r3, r6, r4
 8000a72:	f8c3 0184 	str.w	r0, [r3, #388]	; 0x184
      return HAL_OK;
 8000a76:	2000      	movs	r0, #0
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000a78:	7d09      	ldrb	r1, [r1, #20]
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000a7a:	4434      	add	r4, r6
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000a7c:	2901      	cmp	r1, #1
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000a7e:	bf02      	ittt	eq
 8000a80:	f8d3 1184 	ldreq.w	r1, [r3, #388]	; 0x184
 8000a84:	f441 7180 	orreq.w	r1, r1, #256	; 0x100
 8000a88:	f8c3 1184 	streq.w	r1, [r3, #388]	; 0x184
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000a8c:	6851      	ldr	r1, [r2, #4]
 8000a8e:	f8c4 118c 	str.w	r1, [r4, #396]	; 0x18c
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000a92:	6812      	ldr	r2, [r2, #0]
 8000a94:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000a98:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 8000a9c:	f042 0201 	orr.w	r2, r2, #1
 8000aa0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8000aa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000aa6:	684d      	ldr	r5, [r1, #4]
                                                           pHeader->IDE |
 8000aa8:	4338      	orrs	r0, r7
 8000aaa:	ea40 00c5 	orr.w	r0, r0, r5, lsl #3
 8000aae:	e7db      	b.n	8000a68 <HAL_CAN_AddTxMessage+0x42>
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000ab0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000ab2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ab6:	e7ca      	b.n	8000a4e <HAL_CAN_AddTxMessage+0x28>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000ab8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000aba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000abe:	e7c6      	b.n	8000a4e <HAL_CAN_AddTxMessage+0x28>

08000ac0 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_CAN_StateTypeDef state = hcan->State;
 8000ac2:	f890 4020 	ldrb.w	r4, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000ac6:	3c01      	subs	r4, #1
 8000ac8:	2c01      	cmp	r4, #1
 8000aca:	d86b      	bhi.n	8000ba4 <HAL_CAN_GetRxMessage+0xe4>
 8000acc:	6806      	ldr	r6, [r0, #0]
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000ace:	b941      	cbnz	r1, 8000ae2 <HAL_CAN_GetRxMessage+0x22>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000ad0:	68f4      	ldr	r4, [r6, #12]
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000ad2:	07a4      	lsls	r4, r4, #30
 8000ad4:	d107      	bne.n	8000ae6 <HAL_CAN_GetRxMessage+0x26>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000ad6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000ad8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000adc:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8000ade:	2001      	movs	r0, #1
 8000ae0:	e055      	b.n	8000b8e <HAL_CAN_GetRxMessage+0xce>
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000ae2:	6934      	ldr	r4, [r6, #16]
 8000ae4:	e7f5      	b.n	8000ad2 <HAL_CAN_GetRxMessage+0x12>
 8000ae6:	010c      	lsls	r4, r1, #4
 8000ae8:	1935      	adds	r5, r6, r4
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000aea:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 8000aee:	f007 0704 	and.w	r7, r7, #4
 8000af2:	6097      	str	r7, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000af4:	2f00      	cmp	r7, #0
 8000af6:	d14b      	bne.n	8000b90 <HAL_CAN_GetRxMessage+0xd0>
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000af8:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 8000afc:	0d7f      	lsrs	r7, r7, #21
 8000afe:	6017      	str	r7, [r2, #0]
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 8000b00:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000b04:	4426      	add	r6, r4
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 8000b06:	f3c7 0740 	ubfx	r7, r7, #1, #1
 8000b0a:	60d7      	str	r7, [r2, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000b0c:	f8d5 71b4 	ldr.w	r7, [r5, #436]	; 0x1b4
 8000b10:	f007 070f 	and.w	r7, r7, #15
 8000b14:	6117      	str	r7, [r2, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000b16:	f8d5 71b4 	ldr.w	r7, [r5, #436]	; 0x1b4
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000b1a:	f8d5 51b4 	ldr.w	r5, [r5, #436]	; 0x1b4
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000b1e:	f3c7 2707 	ubfx	r7, r7, #8, #8
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000b22:	0c2d      	lsrs	r5, r5, #16
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000b24:	6197      	str	r7, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000b26:	6155      	str	r5, [r2, #20]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000b28:	f8d6 21b8 	ldr.w	r2, [r6, #440]	; 0x1b8
 8000b2c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000b2e:	6802      	ldr	r2, [r0, #0]
 8000b30:	4422      	add	r2, r4
 8000b32:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8000b36:	0a12      	lsrs	r2, r2, #8
 8000b38:	705a      	strb	r2, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000b3a:	6802      	ldr	r2, [r0, #0]
 8000b3c:	4422      	add	r2, r4
 8000b3e:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8000b42:	0c12      	lsrs	r2, r2, #16
 8000b44:	709a      	strb	r2, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000b46:	6802      	ldr	r2, [r0, #0]
 8000b48:	4422      	add	r2, r4
 8000b4a:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8000b4e:	0e12      	lsrs	r2, r2, #24
 8000b50:	70da      	strb	r2, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000b52:	6802      	ldr	r2, [r0, #0]
 8000b54:	4422      	add	r2, r4
 8000b56:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8000b5a:	711a      	strb	r2, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8000b5c:	6802      	ldr	r2, [r0, #0]
 8000b5e:	4422      	add	r2, r4
 8000b60:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8000b64:	0a12      	lsrs	r2, r2, #8
 8000b66:	715a      	strb	r2, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8000b68:	6802      	ldr	r2, [r0, #0]
 8000b6a:	4422      	add	r2, r4
 8000b6c:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8000b70:	0c12      	lsrs	r2, r2, #16
 8000b72:	719a      	strb	r2, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8000b74:	6802      	ldr	r2, [r0, #0]
 8000b76:	4414      	add	r4, r2
 8000b78:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
 8000b7c:	0e12      	lsrs	r2, r2, #24
 8000b7e:	71da      	strb	r2, [r3, #7]
 8000b80:	6803      	ldr	r3, [r0, #0]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000b82:	b951      	cbnz	r1, 8000b9a <HAL_CAN_GetRxMessage+0xda>
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8000b84:	68da      	ldr	r2, [r3, #12]
 8000b86:	f042 0220 	orr.w	r2, r2, #32
 8000b8a:	60da      	str	r2, [r3, #12]
    return HAL_OK;
 8000b8c:	2000      	movs	r0, #0
  }
}
 8000b8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000b90:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 8000b94:	08ff      	lsrs	r7, r7, #3
 8000b96:	6057      	str	r7, [r2, #4]
 8000b98:	e7b2      	b.n	8000b00 <HAL_CAN_GetRxMessage+0x40>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8000b9a:	691a      	ldr	r2, [r3, #16]
 8000b9c:	f042 0220 	orr.w	r2, r2, #32
 8000ba0:	611a      	str	r2, [r3, #16]
 8000ba2:	e7f3      	b.n	8000b8c <HAL_CAN_GetRxMessage+0xcc>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000ba4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000ba6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000baa:	e797      	b.n	8000adc <HAL_CAN_GetRxMessage+0x1c>

08000bac <HAL_CAN_ActivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 8000bac:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8000bb0:	3b01      	subs	r3, #1
 8000bb2:	2b01      	cmp	r3, #1
 8000bb4:	d805      	bhi.n	8000bc2 <HAL_CAN_ActivateNotification+0x16>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8000bb6:	6802      	ldr	r2, [r0, #0]

    /* Return function status */
    return HAL_OK;
 8000bb8:	2000      	movs	r0, #0
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8000bba:	6953      	ldr	r3, [r2, #20]
 8000bbc:	4319      	orrs	r1, r3
 8000bbe:	6151      	str	r1, [r2, #20]
    return HAL_OK;
 8000bc0:	4770      	bx	lr
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000bc2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000bc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bc8:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8000bca:	2001      	movs	r0, #1
  }
}
 8000bcc:	4770      	bx	lr

08000bce <HAL_CAN_TxMailbox0CompleteCallback>:
 8000bce:	4770      	bx	lr

08000bd0 <HAL_CAN_TxMailbox1CompleteCallback>:
 8000bd0:	4770      	bx	lr

08000bd2 <HAL_CAN_TxMailbox2CompleteCallback>:
 8000bd2:	4770      	bx	lr

08000bd4 <HAL_CAN_TxMailbox0AbortCallback>:
 8000bd4:	4770      	bx	lr

08000bd6 <HAL_CAN_TxMailbox1AbortCallback>:
 8000bd6:	4770      	bx	lr

08000bd8 <HAL_CAN_TxMailbox2AbortCallback>:
 8000bd8:	4770      	bx	lr

08000bda <HAL_CAN_RxFifo0FullCallback>:
 8000bda:	4770      	bx	lr

08000bdc <HAL_CAN_RxFifo1MsgPendingCallback>:
 8000bdc:	4770      	bx	lr

08000bde <HAL_CAN_RxFifo1FullCallback>:
 8000bde:	4770      	bx	lr

08000be0 <HAL_CAN_SleepCallback>:
 8000be0:	4770      	bx	lr

08000be2 <HAL_CAN_WakeUpFromRxMsgCallback>:
 8000be2:	4770      	bx	lr

08000be4 <HAL_CAN_ErrorCallback>:
 8000be4:	4770      	bx	lr

08000be6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8000be6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000bea:	6803      	ldr	r3, [r0, #0]
{
 8000bec:	4605      	mov	r5, r0
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000bee:	695e      	ldr	r6, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000bf0:	f8d3 9004 	ldr.w	r9, [r3, #4]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000bf4:	f016 0401 	ands.w	r4, r6, #1
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000bf8:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000bfa:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000bfe:	f8d3 a010 	ldr.w	sl, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000c02:	f8d3 8018 	ldr.w	r8, [r3, #24]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000c06:	d022      	beq.n	8000c4e <HAL_CAN_IRQHandler+0x68>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000c08:	f017 0401 	ands.w	r4, r7, #1
 8000c0c:	d007      	beq.n	8000c1e <HAL_CAN_IRQHandler+0x38>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000c0e:	2201      	movs	r2, #1

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000c10:	07b9      	lsls	r1, r7, #30
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000c12:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000c14:	f140 80a3 	bpl.w	8000d5e <HAL_CAN_IRQHandler+0x178>
      {
        /* Transmission Mailbox 0 complete callback */
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000c18:	f7ff ffd9 	bl	8000bce <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000c1c:	2400      	movs	r4, #0
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8000c1e:	05fb      	lsls	r3, r7, #23
 8000c20:	d509      	bpl.n	8000c36 <HAL_CAN_IRQHandler+0x50>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000c22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c26:	682b      	ldr	r3, [r5, #0]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000c28:	05b8      	lsls	r0, r7, #22
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000c2a:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000c2c:	f140 80a5 	bpl.w	8000d7a <HAL_CAN_IRQHandler+0x194>
      {
        /* Transmission Mailbox 1 complete callback */
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8000c30:	4628      	mov	r0, r5
 8000c32:	f7ff ffcd 	bl	8000bd0 <HAL_CAN_TxMailbox1CompleteCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8000c36:	03fb      	lsls	r3, r7, #15
 8000c38:	d509      	bpl.n	8000c4e <HAL_CAN_IRQHandler+0x68>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000c3a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000c3e:	682b      	ldr	r3, [r5, #0]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000c40:	03b8      	lsls	r0, r7, #14
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000c42:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000c44:	f140 80a7 	bpl.w	8000d96 <HAL_CAN_IRQHandler+0x1b0>
      {
        /* Transmission Mailbox 2 complete callback */
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8000c48:	4628      	mov	r0, r5
 8000c4a:	f7ff ffc2 	bl	8000bd2 <HAL_CAN_TxMailbox2CompleteCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8000c4e:	0733      	lsls	r3, r6, #28
 8000c50:	d507      	bpl.n	8000c62 <HAL_CAN_IRQHandler+0x7c>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8000c52:	f01b 0f10 	tst.w	fp, #16
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000c56:	bf1f      	itttt	ne
 8000c58:	2210      	movne	r2, #16
 8000c5a:	682b      	ldrne	r3, [r5, #0]
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8000c5c:	f444 7400 	orrne.w	r4, r4, #512	; 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000c60:	60da      	strne	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8000c62:	0777      	lsls	r7, r6, #29
 8000c64:	d508      	bpl.n	8000c78 <HAL_CAN_IRQHandler+0x92>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8000c66:	f01b 0f08 	tst.w	fp, #8
 8000c6a:	d005      	beq.n	8000c78 <HAL_CAN_IRQHandler+0x92>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8000c6c:	2208      	movs	r2, #8
 8000c6e:	682b      	ldr	r3, [r5, #0]

      /* Receive FIFO 0 full Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8000c70:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8000c72:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 8000c74:	f7ff ffb1 	bl	8000bda <HAL_CAN_RxFifo0FullCallback>
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8000c78:	07b0      	lsls	r0, r6, #30
 8000c7a:	d506      	bpl.n	8000c8a <HAL_CAN_IRQHandler+0xa4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8000c7c:	682b      	ldr	r3, [r5, #0]
 8000c7e:	68db      	ldr	r3, [r3, #12]
 8000c80:	0799      	lsls	r1, r3, #30
 8000c82:	d002      	beq.n	8000c8a <HAL_CAN_IRQHandler+0xa4>
    {
      /* Receive FIFO 0 mesage pending Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8000c84:	4628      	mov	r0, r5
 8000c86:	f001 fbbd 	bl	8002404 <HAL_CAN_RxFifo0MsgPendingCallback>
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8000c8a:	0672      	lsls	r2, r6, #25
 8000c8c:	d507      	bpl.n	8000c9e <HAL_CAN_IRQHandler+0xb8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8000c8e:	f01a 0f10 	tst.w	sl, #16
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000c92:	bf1f      	itttt	ne
 8000c94:	2210      	movne	r2, #16
 8000c96:	682b      	ldrne	r3, [r5, #0]
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8000c98:	f444 6480 	orrne.w	r4, r4, #1024	; 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000c9c:	611a      	strne	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8000c9e:	06b3      	lsls	r3, r6, #26
 8000ca0:	d508      	bpl.n	8000cb4 <HAL_CAN_IRQHandler+0xce>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8000ca2:	f01a 0f08 	tst.w	sl, #8
 8000ca6:	d005      	beq.n	8000cb4 <HAL_CAN_IRQHandler+0xce>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8000ca8:	2208      	movs	r2, #8
 8000caa:	682b      	ldr	r3, [r5, #0]

      /* Receive FIFO 1 full Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8000cac:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8000cae:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 8000cb0:	f7ff ff95 	bl	8000bde <HAL_CAN_RxFifo1FullCallback>
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8000cb4:	06f7      	lsls	r7, r6, #27
 8000cb6:	d506      	bpl.n	8000cc6 <HAL_CAN_IRQHandler+0xe0>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8000cb8:	682b      	ldr	r3, [r5, #0]
 8000cba:	691b      	ldr	r3, [r3, #16]
 8000cbc:	0798      	lsls	r0, r3, #30
 8000cbe:	d002      	beq.n	8000cc6 <HAL_CAN_IRQHandler+0xe0>
    {
      /* Receive FIFO 1 mesage pending Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8000cc0:	4628      	mov	r0, r5
 8000cc2:	f7ff ff8b 	bl	8000bdc <HAL_CAN_RxFifo1MsgPendingCallback>
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8000cc6:	03b1      	lsls	r1, r6, #14
 8000cc8:	d508      	bpl.n	8000cdc <HAL_CAN_IRQHandler+0xf6>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8000cca:	f019 0f10 	tst.w	r9, #16
 8000cce:	d005      	beq.n	8000cdc <HAL_CAN_IRQHandler+0xf6>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8000cd0:	2210      	movs	r2, #16
 8000cd2:	682b      	ldr	r3, [r5, #0]

      /* Sleep Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8000cd4:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8000cd6:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 8000cd8:	f7ff ff82 	bl	8000be0 <HAL_CAN_SleepCallback>
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8000cdc:	03f2      	lsls	r2, r6, #15
 8000cde:	d508      	bpl.n	8000cf2 <HAL_CAN_IRQHandler+0x10c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8000ce0:	f019 0f08 	tst.w	r9, #8
 8000ce4:	d005      	beq.n	8000cf2 <HAL_CAN_IRQHandler+0x10c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8000ce6:	2208      	movs	r2, #8
 8000ce8:	682b      	ldr	r3, [r5, #0]

      /* WakeUp Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8000cea:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8000cec:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8000cee:	f7ff ff78 	bl	8000be2 <HAL_CAN_WakeUpFromRxMsgCallback>
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8000cf2:	0433      	lsls	r3, r6, #16
 8000cf4:	d52a      	bpl.n	8000d4c <HAL_CAN_IRQHandler+0x166>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8000cf6:	f019 0f04 	tst.w	r9, #4
 8000cfa:	682a      	ldr	r2, [r5, #0]
 8000cfc:	d024      	beq.n	8000d48 <HAL_CAN_IRQHandler+0x162>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000cfe:	05f7      	lsls	r7, r6, #23
 8000d00:	d504      	bpl.n	8000d0c <HAL_CAN_IRQHandler+0x126>
 8000d02:	f018 0f01 	tst.w	r8, #1
          ((esrflags & CAN_ESR_EWGF) != 0U))
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8000d06:	bf18      	it	ne
 8000d08:	f044 0401 	orrne.w	r4, r4, #1

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000d0c:	05b0      	lsls	r0, r6, #22
 8000d0e:	d504      	bpl.n	8000d1a <HAL_CAN_IRQHandler+0x134>
 8000d10:	f018 0f02 	tst.w	r8, #2
          ((esrflags & CAN_ESR_EPVF) != 0U))
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8000d14:	bf18      	it	ne
 8000d16:	f044 0402 	orrne.w	r4, r4, #2

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000d1a:	0571      	lsls	r1, r6, #21
 8000d1c:	d504      	bpl.n	8000d28 <HAL_CAN_IRQHandler+0x142>
 8000d1e:	f018 0f04 	tst.w	r8, #4
          ((esrflags & CAN_ESR_BOFF) != 0U))
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8000d22:	bf18      	it	ne
 8000d24:	f044 0404 	orrne.w	r4, r4, #4

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000d28:	0533      	lsls	r3, r6, #20
 8000d2a:	d50d      	bpl.n	8000d48 <HAL_CAN_IRQHandler+0x162>
 8000d2c:	f018 0370 	ands.w	r3, r8, #112	; 0x70
 8000d30:	d00a      	beq.n	8000d48 <HAL_CAN_IRQHandler+0x162>
          ((esrflags & CAN_ESR_LEC) != 0U))
      {
        switch (esrflags & CAN_ESR_LEC)
 8000d32:	2b30      	cmp	r3, #48	; 0x30
 8000d34:	d04c      	beq.n	8000dd0 <HAL_CAN_IRQHandler+0x1ea>
 8000d36:	d83c      	bhi.n	8000db2 <HAL_CAN_IRQHandler+0x1cc>
 8000d38:	2b10      	cmp	r3, #16
 8000d3a:	d043      	beq.n	8000dc4 <HAL_CAN_IRQHandler+0x1de>
 8000d3c:	2b20      	cmp	r3, #32
 8000d3e:	d044      	beq.n	8000dca <HAL_CAN_IRQHandler+0x1e4>
          default:
            break;
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8000d40:	6993      	ldr	r3, [r2, #24]
 8000d42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000d46:	6193      	str	r3, [r2, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8000d48:	2304      	movs	r3, #4
 8000d4a:	6053      	str	r3, [r2, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8000d4c:	b12c      	cbz	r4, 8000d5a <HAL_CAN_IRQHandler+0x174>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8000d4e:	6a6b      	ldr	r3, [r5, #36]	; 0x24

    /* Call Error callback function */
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8000d50:	4628      	mov	r0, r5
    hcan->ErrorCode |= errorcode;
 8000d52:	431c      	orrs	r4, r3
 8000d54:	626c      	str	r4, [r5, #36]	; 0x24
    HAL_CAN_ErrorCallback(hcan);
 8000d56:	f7ff ff45 	bl	8000be4 <HAL_CAN_ErrorCallback>
  }
}
 8000d5a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8000d5e:	077a      	lsls	r2, r7, #29
 8000d60:	d405      	bmi.n	8000d6e <HAL_CAN_IRQHandler+0x188>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8000d62:	f017 0408 	ands.w	r4, r7, #8
 8000d66:	d105      	bne.n	8000d74 <HAL_CAN_IRQHandler+0x18e>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8000d68:	f7ff ff34 	bl	8000bd4 <HAL_CAN_TxMailbox0AbortCallback>
 8000d6c:	e757      	b.n	8000c1e <HAL_CAN_IRQHandler+0x38>
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000d6e:	f44f 6400 	mov.w	r4, #2048	; 0x800
 8000d72:	e754      	b.n	8000c1e <HAL_CAN_IRQHandler+0x38>
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000d74:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 8000d78:	e751      	b.n	8000c1e <HAL_CAN_IRQHandler+0x38>
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8000d7a:	0579      	lsls	r1, r7, #21
 8000d7c:	d502      	bpl.n	8000d84 <HAL_CAN_IRQHandler+0x19e>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8000d7e:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 8000d82:	e758      	b.n	8000c36 <HAL_CAN_IRQHandler+0x50>
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8000d84:	053a      	lsls	r2, r7, #20
 8000d86:	d502      	bpl.n	8000d8e <HAL_CAN_IRQHandler+0x1a8>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8000d88:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8000d8c:	e753      	b.n	8000c36 <HAL_CAN_IRQHandler+0x50>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8000d8e:	4628      	mov	r0, r5
 8000d90:	f7ff ff21 	bl	8000bd6 <HAL_CAN_TxMailbox1AbortCallback>
 8000d94:	e74f      	b.n	8000c36 <HAL_CAN_IRQHandler+0x50>
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8000d96:	0379      	lsls	r1, r7, #13
 8000d98:	d502      	bpl.n	8000da0 <HAL_CAN_IRQHandler+0x1ba>
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8000d9a:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 8000d9e:	e756      	b.n	8000c4e <HAL_CAN_IRQHandler+0x68>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8000da0:	033a      	lsls	r2, r7, #12
 8000da2:	d502      	bpl.n	8000daa <HAL_CAN_IRQHandler+0x1c4>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8000da4:	f444 3480 	orr.w	r4, r4, #65536	; 0x10000
 8000da8:	e751      	b.n	8000c4e <HAL_CAN_IRQHandler+0x68>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8000daa:	4628      	mov	r0, r5
 8000dac:	f7ff ff14 	bl	8000bd8 <HAL_CAN_TxMailbox2AbortCallback>
 8000db0:	e74d      	b.n	8000c4e <HAL_CAN_IRQHandler+0x68>
        switch (esrflags & CAN_ESR_LEC)
 8000db2:	2b50      	cmp	r3, #80	; 0x50
 8000db4:	d00f      	beq.n	8000dd6 <HAL_CAN_IRQHandler+0x1f0>
 8000db6:	2b60      	cmp	r3, #96	; 0x60
 8000db8:	d010      	beq.n	8000ddc <HAL_CAN_IRQHandler+0x1f6>
 8000dba:	2b40      	cmp	r3, #64	; 0x40
 8000dbc:	d1c0      	bne.n	8000d40 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_BR;
 8000dbe:	f044 0440 	orr.w	r4, r4, #64	; 0x40
            break;
 8000dc2:	e7bd      	b.n	8000d40 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_STF;
 8000dc4:	f044 0408 	orr.w	r4, r4, #8
            break;
 8000dc8:	e7ba      	b.n	8000d40 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8000dca:	f044 0410 	orr.w	r4, r4, #16
            break;
 8000dce:	e7b7      	b.n	8000d40 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8000dd0:	f044 0420 	orr.w	r4, r4, #32
            break;
 8000dd4:	e7b4      	b.n	8000d40 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_BD;
 8000dd6:	f044 0480 	orr.w	r4, r4, #128	; 0x80
            break;
 8000dda:	e7b1      	b.n	8000d40 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8000ddc:	f444 7480 	orr.w	r4, r4, #256	; 0x100
            break;
 8000de0:	e7ae      	b.n	8000d40 <HAL_CAN_IRQHandler+0x15a>
	...

08000de4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000de4:	4a07      	ldr	r2, [pc, #28]	; (8000e04 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000de6:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000de8:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000dea:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dee:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000df2:	041b      	lsls	r3, r3, #16
 8000df4:	0c1b      	lsrs	r3, r3, #16
 8000df6:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000dfe:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000e00:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000e02:	4770      	bx	lr
 8000e04:	e000ed00 	.word	0xe000ed00

08000e08 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e08:	4b17      	ldr	r3, [pc, #92]	; (8000e68 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e0a:	b570      	push	{r4, r5, r6, lr}
 8000e0c:	68dc      	ldr	r4, [r3, #12]

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e0e:	f04f 36ff 	mov.w	r6, #4294967295
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e12:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e16:	f1c4 0507 	rsb	r5, r4, #7
 8000e1a:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e1c:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e20:	bf28      	it	cs
 8000e22:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e24:	2b06      	cmp	r3, #6
 8000e26:	bf98      	it	ls
 8000e28:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e2a:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e2e:	bf88      	it	hi
 8000e30:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e32:	ea21 0303 	bic.w	r3, r1, r3
 8000e36:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e38:	fa06 f404 	lsl.w	r4, r6, r4
 8000e3c:	ea22 0404 	bic.w	r4, r2, r4
  if ((int32_t)(IRQn) < 0)
 8000e40:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e42:	ea43 0304 	orr.w	r3, r3, r4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e46:	bfa8      	it	ge
 8000e48:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 8000e4c:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e50:	bfb8      	it	lt
 8000e52:	4a06      	ldrlt	r2, [pc, #24]	; (8000e6c <HAL_NVIC_SetPriority+0x64>)
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	bfb5      	itete	lt
 8000e58:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e5c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e60:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e62:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000e66:	bd70      	pop	{r4, r5, r6, pc}
 8000e68:	e000ed00 	.word	0xe000ed00
 8000e6c:	e000ed14 	.word	0xe000ed14

08000e70 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000e70:	2301      	movs	r3, #1
 8000e72:	0942      	lsrs	r2, r0, #5
 8000e74:	f000 001f 	and.w	r0, r0, #31
 8000e78:	fa03 f000 	lsl.w	r0, r3, r0
 8000e7c:	4b01      	ldr	r3, [pc, #4]	; (8000e84 <HAL_NVIC_EnableIRQ+0x14>)
 8000e7e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000e82:	4770      	bx	lr
 8000e84:	e000e100 	.word	0xe000e100

08000e88 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e88:	3801      	subs	r0, #1
 8000e8a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000e8e:	d20a      	bcs.n	8000ea6 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e90:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e92:	4b06      	ldr	r3, [pc, #24]	; (8000eac <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e94:	4a06      	ldr	r2, [pc, #24]	; (8000eb0 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e96:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e98:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e9c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e9e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ea0:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ea2:	601a      	str	r2, [r3, #0]
 8000ea4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000ea6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	e000e010 	.word	0xe000e010
 8000eb0:	e000ed00 	.word	0xe000ed00

08000eb4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000eb4:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000eb6:	b330      	cbz	r0, 8000f06 <HAL_DMA_Init+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000eb8:	2214      	movs	r2, #20
 8000eba:	6801      	ldr	r1, [r0, #0]
 8000ebc:	4b13      	ldr	r3, [pc, #76]	; (8000f0c <HAL_DMA_Init+0x58>)
 8000ebe:	440b      	add	r3, r1
 8000ec0:	fbb3 f3f2 	udiv	r3, r3, r2
 8000ec4:	009b      	lsls	r3, r3, #2
 8000ec6:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000ec8:	4b11      	ldr	r3, [pc, #68]	; (8000f10 <HAL_DMA_Init+0x5c>)

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000eca:	680a      	ldr	r2, [r1, #0]
  hdma->DmaBaseAddress = DMA1;
 8000ecc:	63c3      	str	r3, [r0, #60]	; 0x3c
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000ece:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8000ed2:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ed4:	68c4      	ldr	r4, [r0, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000ed6:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000eda:	4323      	orrs	r3, r4
 8000edc:	6904      	ldr	r4, [r0, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000ede:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ee2:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ee4:	6944      	ldr	r4, [r0, #20]
 8000ee6:	4323      	orrs	r3, r4
 8000ee8:	6984      	ldr	r4, [r0, #24]
 8000eea:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8000eec:	69c4      	ldr	r4, [r0, #28]
 8000eee:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8000ef0:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000ef2:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000ef4:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ef6:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 8000ef8:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000efc:	6383      	str	r3, [r0, #56]	; 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000efe:	f880 3020 	strb.w	r3, [r0, #32]

  return HAL_OK;
 8000f02:	4618      	mov	r0, r3
}
 8000f04:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000f06:	2001      	movs	r0, #1
 8000f08:	e7fc      	b.n	8000f04 <HAL_DMA_Init+0x50>
 8000f0a:	bf00      	nop
 8000f0c:	bffdfff8 	.word	0xbffdfff8
 8000f10:	40020000 	.word	0x40020000

08000f14 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f14:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000f16:	f890 4020 	ldrb.w	r4, [r0, #32]
 8000f1a:	2c01      	cmp	r4, #1
 8000f1c:	d035      	beq.n	8000f8a <HAL_DMA_Start_IT+0x76>
 8000f1e:	2401      	movs	r4, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000f20:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8000f24:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8000f28:	42a5      	cmp	r5, r4
 8000f2a:	f04f 0600 	mov.w	r6, #0
 8000f2e:	f04f 0402 	mov.w	r4, #2
 8000f32:	d128      	bne.n	8000f86 <HAL_DMA_Start_IT+0x72>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000f34:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000f38:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f3a:	6386      	str	r6, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8000f3c:	6826      	ldr	r6, [r4, #0]
 8000f3e:	f026 0601 	bic.w	r6, r6, #1
 8000f42:	6026      	str	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000f44:	e9d0 670f 	ldrd	r6, r7, [r0, #60]	; 0x3c
 8000f48:	40bd      	lsls	r5, r7
 8000f4a:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000f4c:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000f4e:	6843      	ldr	r3, [r0, #4]
 8000f50:	6805      	ldr	r5, [r0, #0]
 8000f52:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 8000f54:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000f56:	bf0b      	itete	eq
 8000f58:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8000f5a:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8000f5c:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8000f5e:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 8000f60:	b14b      	cbz	r3, 8000f76 <HAL_DMA_Start_IT+0x62>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f62:	6823      	ldr	r3, [r4, #0]
 8000f64:	f043 030e 	orr.w	r3, r3, #14
  HAL_StatusTypeDef status = HAL_OK;
 8000f68:	2000      	movs	r0, #0
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000f6a:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8000f6c:	682b      	ldr	r3, [r5, #0]
 8000f6e:	f043 0301 	orr.w	r3, r3, #1
 8000f72:	602b      	str	r3, [r5, #0]
}
 8000f74:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000f76:	6823      	ldr	r3, [r4, #0]
 8000f78:	f023 0304 	bic.w	r3, r3, #4
 8000f7c:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000f7e:	6823      	ldr	r3, [r4, #0]
 8000f80:	f043 030a 	orr.w	r3, r3, #10
 8000f84:	e7f0      	b.n	8000f68 <HAL_DMA_Start_IT+0x54>
    __HAL_UNLOCK(hdma); 
 8000f86:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 8000f8a:	2002      	movs	r0, #2
 8000f8c:	e7f2      	b.n	8000f74 <HAL_DMA_Start_IT+0x60>
	...

08000f90 <HAL_DMA_IRQHandler>:
{
 8000f90:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000f92:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000f94:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000f96:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000f98:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8000f9a:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000f9c:	4095      	lsls	r5, r2
 8000f9e:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 8000fa0:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000fa2:	d032      	beq.n	800100a <HAL_DMA_IRQHandler+0x7a>
 8000fa4:	074d      	lsls	r5, r1, #29
 8000fa6:	d530      	bpl.n	800100a <HAL_DMA_IRQHandler+0x7a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000fac:	bf5e      	ittt	pl
 8000fae:	681a      	ldrpl	r2, [r3, #0]
 8000fb0:	f022 0204 	bicpl.w	r2, r2, #4
 8000fb4:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000fb6:	4a3e      	ldr	r2, [pc, #248]	; (80010b0 <HAL_DMA_IRQHandler+0x120>)
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	d019      	beq.n	8000ff0 <HAL_DMA_IRQHandler+0x60>
 8000fbc:	3214      	adds	r2, #20
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d018      	beq.n	8000ff4 <HAL_DMA_IRQHandler+0x64>
 8000fc2:	3214      	adds	r2, #20
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d017      	beq.n	8000ff8 <HAL_DMA_IRQHandler+0x68>
 8000fc8:	3214      	adds	r2, #20
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d017      	beq.n	8000ffe <HAL_DMA_IRQHandler+0x6e>
 8000fce:	3214      	adds	r2, #20
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d017      	beq.n	8001004 <HAL_DMA_IRQHandler+0x74>
 8000fd4:	3214      	adds	r2, #20
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	bf0c      	ite	eq
 8000fda:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 8000fde:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 8000fe2:	4a34      	ldr	r2, [pc, #208]	; (80010b4 <HAL_DMA_IRQHandler+0x124>)
 8000fe4:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8000fe6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d05e      	beq.n	80010aa <HAL_DMA_IRQHandler+0x11a>
}
 8000fec:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8000fee:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000ff0:	2304      	movs	r3, #4
 8000ff2:	e7f6      	b.n	8000fe2 <HAL_DMA_IRQHandler+0x52>
 8000ff4:	2340      	movs	r3, #64	; 0x40
 8000ff6:	e7f4      	b.n	8000fe2 <HAL_DMA_IRQHandler+0x52>
 8000ff8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ffc:	e7f1      	b.n	8000fe2 <HAL_DMA_IRQHandler+0x52>
 8000ffe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001002:	e7ee      	b.n	8000fe2 <HAL_DMA_IRQHandler+0x52>
 8001004:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001008:	e7eb      	b.n	8000fe2 <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800100a:	2502      	movs	r5, #2
 800100c:	4095      	lsls	r5, r2
 800100e:	4225      	tst	r5, r4
 8001010:	d035      	beq.n	800107e <HAL_DMA_IRQHandler+0xee>
 8001012:	078d      	lsls	r5, r1, #30
 8001014:	d533      	bpl.n	800107e <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	0694      	lsls	r4, r2, #26
 800101a:	d406      	bmi.n	800102a <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	f022 020a 	bic.w	r2, r2, #10
 8001022:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8001024:	2201      	movs	r2, #1
 8001026:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800102a:	4a21      	ldr	r2, [pc, #132]	; (80010b0 <HAL_DMA_IRQHandler+0x120>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d019      	beq.n	8001064 <HAL_DMA_IRQHandler+0xd4>
 8001030:	3214      	adds	r2, #20
 8001032:	4293      	cmp	r3, r2
 8001034:	d018      	beq.n	8001068 <HAL_DMA_IRQHandler+0xd8>
 8001036:	3214      	adds	r2, #20
 8001038:	4293      	cmp	r3, r2
 800103a:	d017      	beq.n	800106c <HAL_DMA_IRQHandler+0xdc>
 800103c:	3214      	adds	r2, #20
 800103e:	4293      	cmp	r3, r2
 8001040:	d017      	beq.n	8001072 <HAL_DMA_IRQHandler+0xe2>
 8001042:	3214      	adds	r2, #20
 8001044:	4293      	cmp	r3, r2
 8001046:	d017      	beq.n	8001078 <HAL_DMA_IRQHandler+0xe8>
 8001048:	3214      	adds	r2, #20
 800104a:	4293      	cmp	r3, r2
 800104c:	bf0c      	ite	eq
 800104e:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8001052:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 8001056:	4a17      	ldr	r2, [pc, #92]	; (80010b4 <HAL_DMA_IRQHandler+0x124>)
 8001058:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 800105a:	2300      	movs	r3, #0
 800105c:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8001060:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001062:	e7c1      	b.n	8000fe8 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001064:	2302      	movs	r3, #2
 8001066:	e7f6      	b.n	8001056 <HAL_DMA_IRQHandler+0xc6>
 8001068:	2320      	movs	r3, #32
 800106a:	e7f4      	b.n	8001056 <HAL_DMA_IRQHandler+0xc6>
 800106c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001070:	e7f1      	b.n	8001056 <HAL_DMA_IRQHandler+0xc6>
 8001072:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001076:	e7ee      	b.n	8001056 <HAL_DMA_IRQHandler+0xc6>
 8001078:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800107c:	e7eb      	b.n	8001056 <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800107e:	2508      	movs	r5, #8
 8001080:	4095      	lsls	r5, r2
 8001082:	4225      	tst	r5, r4
 8001084:	d011      	beq.n	80010aa <HAL_DMA_IRQHandler+0x11a>
 8001086:	0709      	lsls	r1, r1, #28
 8001088:	d50f      	bpl.n	80010aa <HAL_DMA_IRQHandler+0x11a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800108a:	6819      	ldr	r1, [r3, #0]
 800108c:	f021 010e 	bic.w	r1, r1, #14
 8001090:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001092:	2301      	movs	r3, #1
 8001094:	fa03 f202 	lsl.w	r2, r3, r2
 8001098:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800109a:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 800109c:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 80010a0:	2300      	movs	r3, #0
 80010a2:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 80010a6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80010a8:	e79e      	b.n	8000fe8 <HAL_DMA_IRQHandler+0x58>
}
 80010aa:	bc70      	pop	{r4, r5, r6}
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	40020008 	.word	0x40020008
 80010b4:	40020000 	.word	0x40020000

080010b8 <FLASH_SetErrorCode>:
  uint32_t flags = 0U;
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80010b8:	4a11      	ldr	r2, [pc, #68]	; (8001100 <FLASH_SetErrorCode+0x48>)
 80010ba:	68d3      	ldr	r3, [r2, #12]
 80010bc:	f013 0310 	ands.w	r3, r3, #16
 80010c0:	d005      	beq.n	80010ce <FLASH_SetErrorCode+0x16>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80010c2:	4910      	ldr	r1, [pc, #64]	; (8001104 <FLASH_SetErrorCode+0x4c>)
 80010c4:	69cb      	ldr	r3, [r1, #28]
 80010c6:	f043 0302 	orr.w	r3, r3, #2
 80010ca:	61cb      	str	r3, [r1, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 80010cc:	2310      	movs	r3, #16
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80010ce:	68d2      	ldr	r2, [r2, #12]
 80010d0:	0750      	lsls	r0, r2, #29
 80010d2:	d506      	bpl.n	80010e2 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80010d4:	490b      	ldr	r1, [pc, #44]	; (8001104 <FLASH_SetErrorCode+0x4c>)
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80010d6:	f043 0304 	orr.w	r3, r3, #4
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80010da:	69ca      	ldr	r2, [r1, #28]
 80010dc:	f042 0201 	orr.w	r2, r2, #1
 80010e0:	61ca      	str	r2, [r1, #28]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80010e2:	4a07      	ldr	r2, [pc, #28]	; (8001100 <FLASH_SetErrorCode+0x48>)
 80010e4:	69d1      	ldr	r1, [r2, #28]
 80010e6:	07c9      	lsls	r1, r1, #31
 80010e8:	d508      	bpl.n	80010fc <FLASH_SetErrorCode+0x44>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80010ea:	4806      	ldr	r0, [pc, #24]	; (8001104 <FLASH_SetErrorCode+0x4c>)
 80010ec:	69c1      	ldr	r1, [r0, #28]
 80010ee:	f041 0104 	orr.w	r1, r1, #4
 80010f2:	61c1      	str	r1, [r0, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80010f4:	69d1      	ldr	r1, [r2, #28]
 80010f6:	f021 0101 	bic.w	r1, r1, #1
 80010fa:	61d1      	str	r1, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80010fc:	60d3      	str	r3, [r2, #12]
}  
 80010fe:	4770      	bx	lr
 8001100:	40022000 	.word	0x40022000
 8001104:	20000090 	.word	0x20000090

08001108 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001108:	4b06      	ldr	r3, [pc, #24]	; (8001124 <HAL_FLASH_Unlock+0x1c>)
 800110a:	6918      	ldr	r0, [r3, #16]
 800110c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001110:	d007      	beq.n	8001122 <HAL_FLASH_Unlock+0x1a>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001112:	4a05      	ldr	r2, [pc, #20]	; (8001128 <HAL_FLASH_Unlock+0x20>)
 8001114:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001116:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 800111a:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800111c:	6918      	ldr	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 800111e:	f3c0 10c0 	ubfx	r0, r0, #7, #1
}
 8001122:	4770      	bx	lr
 8001124:	40022000 	.word	0x40022000
 8001128:	45670123 	.word	0x45670123

0800112c <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800112c:	4a03      	ldr	r2, [pc, #12]	; (800113c <HAL_FLASH_Lock+0x10>)
}
 800112e:	2000      	movs	r0, #0
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001130:	6913      	ldr	r3, [r2, #16]
 8001132:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001136:	6113      	str	r3, [r2, #16]
}
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	40022000 	.word	0x40022000

08001140 <FLASH_WaitForLastOperation>:
{
 8001140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001142:	4606      	mov	r6, r0
  uint32_t tickstart = HAL_GetTick();
 8001144:	f7ff f844 	bl	80001d0 <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001148:	4c11      	ldr	r4, [pc, #68]	; (8001190 <FLASH_WaitForLastOperation+0x50>)
  uint32_t tickstart = HAL_GetTick();
 800114a:	4607      	mov	r7, r0
 800114c:	4625      	mov	r5, r4
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800114e:	68e3      	ldr	r3, [r4, #12]
 8001150:	07d8      	lsls	r0, r3, #31
 8001152:	d412      	bmi.n	800117a <FLASH_WaitForLastOperation+0x3a>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8001154:	68e3      	ldr	r3, [r4, #12]
 8001156:	0699      	lsls	r1, r3, #26
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001158:	bf44      	itt	mi
 800115a:	2320      	movmi	r3, #32
 800115c:	60e3      	strmi	r3, [r4, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800115e:	68eb      	ldr	r3, [r5, #12]
 8001160:	06da      	lsls	r2, r3, #27
 8001162:	d406      	bmi.n	8001172 <FLASH_WaitForLastOperation+0x32>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001164:	69eb      	ldr	r3, [r5, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001166:	07db      	lsls	r3, r3, #31
 8001168:	d403      	bmi.n	8001172 <FLASH_WaitForLastOperation+0x32>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800116a:	68e8      	ldr	r0, [r5, #12]
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800116c:	f010 0004 	ands.w	r0, r0, #4
 8001170:	d007      	beq.n	8001182 <FLASH_WaitForLastOperation+0x42>
    FLASH_SetErrorCode();
 8001172:	f7ff ffa1 	bl	80010b8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001176:	2001      	movs	r0, #1
 8001178:	e003      	b.n	8001182 <FLASH_WaitForLastOperation+0x42>
    if (Timeout != HAL_MAX_DELAY)
 800117a:	1c73      	adds	r3, r6, #1
 800117c:	d0e7      	beq.n	800114e <FLASH_WaitForLastOperation+0xe>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800117e:	b90e      	cbnz	r6, 8001184 <FLASH_WaitForLastOperation+0x44>
        return HAL_TIMEOUT;
 8001180:	2003      	movs	r0, #3
}
 8001182:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8001184:	f7ff f824 	bl	80001d0 <HAL_GetTick>
 8001188:	1bc0      	subs	r0, r0, r7
 800118a:	42b0      	cmp	r0, r6
 800118c:	d9df      	bls.n	800114e <FLASH_WaitForLastOperation+0xe>
 800118e:	e7f7      	b.n	8001180 <FLASH_WaitForLastOperation+0x40>
 8001190:	40022000 	.word	0x40022000

08001194 <HAL_FLASH_Program>:
{
 8001194:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __HAL_LOCK(&pFlash);
 8001198:	4c24      	ldr	r4, [pc, #144]	; (800122c <HAL_FLASH_Program+0x98>)
{
 800119a:	461e      	mov	r6, r3
  __HAL_LOCK(&pFlash);
 800119c:	7e23      	ldrb	r3, [r4, #24]
{
 800119e:	4605      	mov	r5, r0
  __HAL_LOCK(&pFlash);
 80011a0:	2b01      	cmp	r3, #1
{
 80011a2:	460f      	mov	r7, r1
 80011a4:	4690      	mov	r8, r2
  __HAL_LOCK(&pFlash);
 80011a6:	d03f      	beq.n	8001228 <HAL_FLASH_Program+0x94>
 80011a8:	2301      	movs	r3, #1
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80011aa:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 80011ae:	7623      	strb	r3, [r4, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80011b0:	f7ff ffc6 	bl	8001140 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 80011b4:	bba0      	cbnz	r0, 8001220 <HAL_FLASH_Program+0x8c>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80011b6:	2d01      	cmp	r5, #1
 80011b8:	d003      	beq.n	80011c2 <HAL_FLASH_Program+0x2e>
      nbiterations = 4U;
 80011ba:	2d02      	cmp	r5, #2
 80011bc:	bf0c      	ite	eq
 80011be:	2502      	moveq	r5, #2
 80011c0:	2504      	movne	r5, #4
 80011c2:	f04f 0900 	mov.w	r9, #0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80011c6:	46cb      	mov	fp, r9
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80011c8:	f8df a064 	ldr.w	sl, [pc, #100]	; 8001230 <HAL_FLASH_Program+0x9c>
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80011cc:	ea4f 1309 	mov.w	r3, r9, lsl #4
 80011d0:	f1c3 0120 	rsb	r1, r3, #32
 80011d4:	f1a3 0220 	sub.w	r2, r3, #32
 80011d8:	fa06 f101 	lsl.w	r1, r6, r1
 80011dc:	fa28 f303 	lsr.w	r3, r8, r3
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80011e0:	f8c4 b01c 	str.w	fp, [r4, #28]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80011e4:	430b      	orrs	r3, r1
 80011e6:	fa26 f202 	lsr.w	r2, r6, r2
 80011ea:	4313      	orrs	r3, r2
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80011ec:	f8da 2010 	ldr.w	r2, [sl, #16]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80011f0:	b29b      	uxth	r3, r3
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80011f2:	f042 0201 	orr.w	r2, r2, #1
 80011f6:	f8ca 2010 	str.w	r2, [sl, #16]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80011fa:	f24c 3050 	movw	r0, #50000	; 0xc350
  *(__IO uint16_t*)Address = Data;
 80011fe:	f827 3019 	strh.w	r3, [r7, r9, lsl #1]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001202:	f7ff ff9d 	bl	8001140 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8001206:	f8da 3010 	ldr.w	r3, [sl, #16]
 800120a:	f023 0301 	bic.w	r3, r3, #1
 800120e:	f8ca 3010 	str.w	r3, [sl, #16]
      if (status != HAL_OK)
 8001212:	b928      	cbnz	r0, 8001220 <HAL_FLASH_Program+0x8c>
 8001214:	f109 0901 	add.w	r9, r9, #1
    for (index = 0U; index < nbiterations; index++)
 8001218:	fa5f f389 	uxtb.w	r3, r9
 800121c:	429d      	cmp	r5, r3
 800121e:	d8d5      	bhi.n	80011cc <HAL_FLASH_Program+0x38>
  __HAL_UNLOCK(&pFlash);
 8001220:	2300      	movs	r3, #0
 8001222:	7623      	strb	r3, [r4, #24]
}
 8001224:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __HAL_LOCK(&pFlash);
 8001228:	2002      	movs	r0, #2
 800122a:	e7fb      	b.n	8001224 <HAL_FLASH_Program+0x90>
 800122c:	20000090 	.word	0x20000090
 8001230:	40022000 	.word	0x40022000

08001234 <FLASH_MassErase.isra.0>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001234:	2200      	movs	r2, #0
 8001236:	4b06      	ldr	r3, [pc, #24]	; (8001250 <FLASH_MassErase.isra.0+0x1c>)
 8001238:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800123a:	4b06      	ldr	r3, [pc, #24]	; (8001254 <FLASH_MassErase.isra.0+0x20>)
 800123c:	691a      	ldr	r2, [r3, #16]
 800123e:	f042 0204 	orr.w	r2, r2, #4
 8001242:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001244:	691a      	ldr	r2, [r3, #16]
 8001246:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800124a:	611a      	str	r2, [r3, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	20000090 	.word	0x20000090
 8001254:	40022000 	.word	0x40022000

08001258 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001258:	2200      	movs	r2, #0
 800125a:	4b06      	ldr	r3, [pc, #24]	; (8001274 <FLASH_PageErase+0x1c>)
 800125c:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800125e:	4b06      	ldr	r3, [pc, #24]	; (8001278 <FLASH_PageErase+0x20>)
 8001260:	691a      	ldr	r2, [r3, #16]
 8001262:	f042 0202 	orr.w	r2, r2, #2
 8001266:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8001268:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800126a:	691a      	ldr	r2, [r3, #16]
 800126c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001270:	611a      	str	r2, [r3, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8001272:	4770      	bx	lr
 8001274:	20000090 	.word	0x20000090
 8001278:	40022000 	.word	0x40022000

0800127c <HAL_FLASHEx_Erase>:
{
 800127c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 8001280:	4d22      	ldr	r5, [pc, #136]	; (800130c <HAL_FLASHEx_Erase+0x90>)
{
 8001282:	4607      	mov	r7, r0
  __HAL_LOCK(&pFlash);
 8001284:	7e2b      	ldrb	r3, [r5, #24]
{
 8001286:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 8001288:	2b01      	cmp	r3, #1
 800128a:	d03d      	beq.n	8001308 <HAL_FLASHEx_Erase+0x8c>
 800128c:	2401      	movs	r4, #1
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800128e:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(&pFlash);
 8001290:	762c      	strb	r4, [r5, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001292:	2b02      	cmp	r3, #2
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001294:	f24c 3050 	movw	r0, #50000	; 0xc350
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001298:	d113      	bne.n	80012c2 <HAL_FLASHEx_Erase+0x46>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800129a:	f7ff ff51 	bl	8001140 <FLASH_WaitForLastOperation>
 800129e:	b120      	cbz	r0, 80012aa <HAL_FLASHEx_Erase+0x2e>
  HAL_StatusTypeDef status = HAL_ERROR;
 80012a0:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 80012a2:	2300      	movs	r3, #0
 80012a4:	762b      	strb	r3, [r5, #24]
}
 80012a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        FLASH_MassErase(FLASH_BANK_1);
 80012aa:	f7ff ffc3 	bl	8001234 <FLASH_MassErase.isra.0>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80012ae:	f24c 3050 	movw	r0, #50000	; 0xc350
 80012b2:	f7ff ff45 	bl	8001140 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80012b6:	4a16      	ldr	r2, [pc, #88]	; (8001310 <HAL_FLASHEx_Erase+0x94>)
 80012b8:	6913      	ldr	r3, [r2, #16]
 80012ba:	f023 0304 	bic.w	r3, r3, #4
 80012be:	6113      	str	r3, [r2, #16]
 80012c0:	e7ef      	b.n	80012a2 <HAL_FLASHEx_Erase+0x26>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80012c2:	f7ff ff3d 	bl	8001140 <FLASH_WaitForLastOperation>
 80012c6:	2800      	cmp	r0, #0
 80012c8:	d1ea      	bne.n	80012a0 <HAL_FLASHEx_Erase+0x24>
        *PageError = 0xFFFFFFFFU;
 80012ca:	f04f 33ff 	mov.w	r3, #4294967295
 80012ce:	f8c8 3000 	str.w	r3, [r8]
  HAL_StatusTypeDef status = HAL_ERROR;
 80012d2:	4620      	mov	r0, r4
        for(address = pEraseInit->PageAddress;
 80012d4:	68be      	ldr	r6, [r7, #8]
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80012d6:	4c0e      	ldr	r4, [pc, #56]	; (8001310 <HAL_FLASHEx_Erase+0x94>)
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80012d8:	e9d7 3202 	ldrd	r3, r2, [r7, #8]
 80012dc:	eb03 2382 	add.w	r3, r3, r2, lsl #10
        for(address = pEraseInit->PageAddress;
 80012e0:	42b3      	cmp	r3, r6
 80012e2:	d9de      	bls.n	80012a2 <HAL_FLASHEx_Erase+0x26>
          FLASH_PageErase(address);
 80012e4:	4630      	mov	r0, r6
 80012e6:	f7ff ffb7 	bl	8001258 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80012ea:	f24c 3050 	movw	r0, #50000	; 0xc350
 80012ee:	f7ff ff27 	bl	8001140 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80012f2:	6923      	ldr	r3, [r4, #16]
 80012f4:	f023 0302 	bic.w	r3, r3, #2
 80012f8:	6123      	str	r3, [r4, #16]
          if (status != HAL_OK)
 80012fa:	b110      	cbz	r0, 8001302 <HAL_FLASHEx_Erase+0x86>
            *PageError = address;
 80012fc:	f8c8 6000 	str.w	r6, [r8]
            break;
 8001300:	e7cf      	b.n	80012a2 <HAL_FLASHEx_Erase+0x26>
            address += FLASH_PAGE_SIZE)
 8001302:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001306:	e7e7      	b.n	80012d8 <HAL_FLASHEx_Erase+0x5c>
  __HAL_LOCK(&pFlash);
 8001308:	2002      	movs	r0, #2
 800130a:	e7cc      	b.n	80012a6 <HAL_FLASHEx_Erase+0x2a>
 800130c:	20000090 	.word	0x20000090
 8001310:	40022000 	.word	0x40022000

08001314 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001314:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 8001318:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 800131a:	4616      	mov	r6, r2
 800131c:	4b65      	ldr	r3, [pc, #404]	; (80014b4 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800131e:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 80014c4 <HAL_GPIO_Init+0x1b0>
 8001322:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 80014c8 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 8001326:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800132a:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 800132c:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001330:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 8001334:	45a0      	cmp	r8, r4
 8001336:	d17e      	bne.n	8001436 <HAL_GPIO_Init+0x122>
      switch (GPIO_Init->Mode)
 8001338:	684d      	ldr	r5, [r1, #4]
 800133a:	2d12      	cmp	r5, #18
 800133c:	f000 80ae 	beq.w	800149c <HAL_GPIO_Init+0x188>
 8001340:	f200 8087 	bhi.w	8001452 <HAL_GPIO_Init+0x13e>
 8001344:	2d02      	cmp	r5, #2
 8001346:	f000 80a6 	beq.w	8001496 <HAL_GPIO_Init+0x182>
 800134a:	d87b      	bhi.n	8001444 <HAL_GPIO_Init+0x130>
 800134c:	2d00      	cmp	r5, #0
 800134e:	f000 808d 	beq.w	800146c <HAL_GPIO_Init+0x158>
 8001352:	2d01      	cmp	r5, #1
 8001354:	f000 809d 	beq.w	8001492 <HAL_GPIO_Init+0x17e>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001358:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800135c:	2cff      	cmp	r4, #255	; 0xff
 800135e:	bf93      	iteet	ls
 8001360:	4682      	movls	sl, r0
 8001362:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8001366:	3d08      	subhi	r5, #8
 8001368:	f8d0 b000 	ldrls.w	fp, [r0]
 800136c:	bf92      	itee	ls
 800136e:	00b5      	lslls	r5, r6, #2
 8001370:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8001374:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001376:	fa09 f805 	lsl.w	r8, r9, r5
 800137a:	ea2b 0808 	bic.w	r8, fp, r8
 800137e:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001382:	bf88      	it	hi
 8001384:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001388:	ea48 0505 	orr.w	r5, r8, r5
 800138c:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001390:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8001394:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8001398:	d04d      	beq.n	8001436 <HAL_GPIO_Init+0x122>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800139a:	4f47      	ldr	r7, [pc, #284]	; (80014b8 <HAL_GPIO_Init+0x1a4>)
 800139c:	f026 0803 	bic.w	r8, r6, #3
 80013a0:	69bd      	ldr	r5, [r7, #24]
 80013a2:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 80013a6:	f045 0501 	orr.w	r5, r5, #1
 80013aa:	61bd      	str	r5, [r7, #24]
 80013ac:	69bd      	ldr	r5, [r7, #24]
 80013ae:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 80013b2:	f005 0501 	and.w	r5, r5, #1
 80013b6:	9501      	str	r5, [sp, #4]
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80013b8:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80013bc:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80013be:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 80013c2:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80013c6:	fa09 f90b 	lsl.w	r9, r9, fp
 80013ca:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013ce:	4d3b      	ldr	r5, [pc, #236]	; (80014bc <HAL_GPIO_Init+0x1a8>)
 80013d0:	42a8      	cmp	r0, r5
 80013d2:	d068      	beq.n	80014a6 <HAL_GPIO_Init+0x192>
 80013d4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80013d8:	42a8      	cmp	r0, r5
 80013da:	d066      	beq.n	80014aa <HAL_GPIO_Init+0x196>
 80013dc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80013e0:	42a8      	cmp	r0, r5
 80013e2:	d064      	beq.n	80014ae <HAL_GPIO_Init+0x19a>
 80013e4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80013e8:	42a8      	cmp	r0, r5
 80013ea:	bf0c      	ite	eq
 80013ec:	2503      	moveq	r5, #3
 80013ee:	2504      	movne	r5, #4
 80013f0:	fa05 f50b 	lsl.w	r5, r5, fp
 80013f4:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 80013f8:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80013fc:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013fe:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8001402:	bf14      	ite	ne
 8001404:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001406:	43a5      	biceq	r5, r4
 8001408:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800140a:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800140c:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8001410:	bf14      	ite	ne
 8001412:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001414:	43a5      	biceq	r5, r4
 8001416:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001418:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800141a:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 800141e:	bf14      	ite	ne
 8001420:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001422:	43a5      	biceq	r5, r4
 8001424:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001426:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001428:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 800142c:	bf14      	ite	ne
 800142e:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001430:	ea25 0404 	biceq.w	r4, r5, r4
 8001434:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8001436:	3601      	adds	r6, #1
 8001438:	2e10      	cmp	r6, #16
 800143a:	f47f af74 	bne.w	8001326 <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 800143e:	b003      	add	sp, #12
 8001440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8001444:	2d03      	cmp	r5, #3
 8001446:	d022      	beq.n	800148e <HAL_GPIO_Init+0x17a>
 8001448:	2d11      	cmp	r5, #17
 800144a:	d185      	bne.n	8001358 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800144c:	68ca      	ldr	r2, [r1, #12]
 800144e:	3204      	adds	r2, #4
          break;
 8001450:	e782      	b.n	8001358 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8001452:	4f1b      	ldr	r7, [pc, #108]	; (80014c0 <HAL_GPIO_Init+0x1ac>)
 8001454:	42bd      	cmp	r5, r7
 8001456:	d009      	beq.n	800146c <HAL_GPIO_Init+0x158>
 8001458:	d812      	bhi.n	8001480 <HAL_GPIO_Init+0x16c>
 800145a:	f8df 9070 	ldr.w	r9, [pc, #112]	; 80014cc <HAL_GPIO_Init+0x1b8>
 800145e:	454d      	cmp	r5, r9
 8001460:	d004      	beq.n	800146c <HAL_GPIO_Init+0x158>
 8001462:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8001466:	454d      	cmp	r5, r9
 8001468:	f47f af76 	bne.w	8001358 <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800146c:	688a      	ldr	r2, [r1, #8]
 800146e:	b1c2      	cbz	r2, 80014a2 <HAL_GPIO_Init+0x18e>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001470:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8001472:	bf0c      	ite	eq
 8001474:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8001478:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800147c:	2208      	movs	r2, #8
 800147e:	e76b      	b.n	8001358 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8001480:	4565      	cmp	r5, ip
 8001482:	d0f3      	beq.n	800146c <HAL_GPIO_Init+0x158>
 8001484:	4575      	cmp	r5, lr
 8001486:	d0f1      	beq.n	800146c <HAL_GPIO_Init+0x158>
 8001488:	f8df 9044 	ldr.w	r9, [pc, #68]	; 80014d0 <HAL_GPIO_Init+0x1bc>
 800148c:	e7eb      	b.n	8001466 <HAL_GPIO_Init+0x152>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800148e:	2200      	movs	r2, #0
 8001490:	e762      	b.n	8001358 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001492:	68ca      	ldr	r2, [r1, #12]
          break;
 8001494:	e760      	b.n	8001358 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001496:	68ca      	ldr	r2, [r1, #12]
 8001498:	3208      	adds	r2, #8
          break;
 800149a:	e75d      	b.n	8001358 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800149c:	68ca      	ldr	r2, [r1, #12]
 800149e:	320c      	adds	r2, #12
          break;
 80014a0:	e75a      	b.n	8001358 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80014a2:	2204      	movs	r2, #4
 80014a4:	e758      	b.n	8001358 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014a6:	2500      	movs	r5, #0
 80014a8:	e7a2      	b.n	80013f0 <HAL_GPIO_Init+0xdc>
 80014aa:	2501      	movs	r5, #1
 80014ac:	e7a0      	b.n	80013f0 <HAL_GPIO_Init+0xdc>
 80014ae:	2502      	movs	r5, #2
 80014b0:	e79e      	b.n	80013f0 <HAL_GPIO_Init+0xdc>
 80014b2:	bf00      	nop
 80014b4:	40010400 	.word	0x40010400
 80014b8:	40021000 	.word	0x40021000
 80014bc:	40010800 	.word	0x40010800
 80014c0:	10210000 	.word	0x10210000
 80014c4:	10310000 	.word	0x10310000
 80014c8:	10320000 	.word	0x10320000
 80014cc:	10110000 	.word	0x10110000
 80014d0:	10220000 	.word	0x10220000

080014d4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014d4:	b10a      	cbz	r2, 80014da <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014d6:	6101      	str	r1, [r0, #16]
  }
}
 80014d8:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014da:	0409      	lsls	r1, r1, #16
 80014dc:	e7fb      	b.n	80014d6 <HAL_GPIO_WritePin+0x2>

080014de <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80014de:	68c3      	ldr	r3, [r0, #12]
 80014e0:	4059      	eors	r1, r3
 80014e2:	60c1      	str	r1, [r0, #12]
}
 80014e4:	4770      	bx	lr
	...

080014e8 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014e8:	6803      	ldr	r3, [r0, #0]
{
 80014ea:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014ee:	07db      	lsls	r3, r3, #31
{
 80014f0:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014f2:	d410      	bmi.n	8001516 <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014f4:	682b      	ldr	r3, [r5, #0]
 80014f6:	079f      	lsls	r7, r3, #30
 80014f8:	d45e      	bmi.n	80015b8 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014fa:	682b      	ldr	r3, [r5, #0]
 80014fc:	0719      	lsls	r1, r3, #28
 80014fe:	f100 8095 	bmi.w	800162c <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001502:	682b      	ldr	r3, [r5, #0]
 8001504:	075a      	lsls	r2, r3, #29
 8001506:	f100 80bf 	bmi.w	8001688 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800150a:	69ea      	ldr	r2, [r5, #28]
 800150c:	2a00      	cmp	r2, #0
 800150e:	f040 812d 	bne.w	800176c <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8001512:	2000      	movs	r0, #0
 8001514:	e014      	b.n	8001540 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001516:	4c90      	ldr	r4, [pc, #576]	; (8001758 <HAL_RCC_OscConfig+0x270>)
 8001518:	6863      	ldr	r3, [r4, #4]
 800151a:	f003 030c 	and.w	r3, r3, #12
 800151e:	2b04      	cmp	r3, #4
 8001520:	d007      	beq.n	8001532 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001522:	6863      	ldr	r3, [r4, #4]
 8001524:	f003 030c 	and.w	r3, r3, #12
 8001528:	2b08      	cmp	r3, #8
 800152a:	d10c      	bne.n	8001546 <HAL_RCC_OscConfig+0x5e>
 800152c:	6863      	ldr	r3, [r4, #4]
 800152e:	03de      	lsls	r6, r3, #15
 8001530:	d509      	bpl.n	8001546 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001532:	6823      	ldr	r3, [r4, #0]
 8001534:	039c      	lsls	r4, r3, #14
 8001536:	d5dd      	bpl.n	80014f4 <HAL_RCC_OscConfig+0xc>
 8001538:	686b      	ldr	r3, [r5, #4]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d1da      	bne.n	80014f4 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 800153e:	2001      	movs	r0, #1
}
 8001540:	b002      	add	sp, #8
 8001542:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001546:	686b      	ldr	r3, [r5, #4]
 8001548:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800154c:	d110      	bne.n	8001570 <HAL_RCC_OscConfig+0x88>
 800154e:	6823      	ldr	r3, [r4, #0]
 8001550:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001554:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001556:	f7fe fe3b 	bl	80001d0 <HAL_GetTick>
 800155a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800155c:	6823      	ldr	r3, [r4, #0]
 800155e:	0398      	lsls	r0, r3, #14
 8001560:	d4c8      	bmi.n	80014f4 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001562:	f7fe fe35 	bl	80001d0 <HAL_GetTick>
 8001566:	1b80      	subs	r0, r0, r6
 8001568:	2864      	cmp	r0, #100	; 0x64
 800156a:	d9f7      	bls.n	800155c <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 800156c:	2003      	movs	r0, #3
 800156e:	e7e7      	b.n	8001540 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001570:	b99b      	cbnz	r3, 800159a <HAL_RCC_OscConfig+0xb2>
 8001572:	6823      	ldr	r3, [r4, #0]
 8001574:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001578:	6023      	str	r3, [r4, #0]
 800157a:	6823      	ldr	r3, [r4, #0]
 800157c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001580:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001582:	f7fe fe25 	bl	80001d0 <HAL_GetTick>
 8001586:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001588:	6823      	ldr	r3, [r4, #0]
 800158a:	0399      	lsls	r1, r3, #14
 800158c:	d5b2      	bpl.n	80014f4 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800158e:	f7fe fe1f 	bl	80001d0 <HAL_GetTick>
 8001592:	1b80      	subs	r0, r0, r6
 8001594:	2864      	cmp	r0, #100	; 0x64
 8001596:	d9f7      	bls.n	8001588 <HAL_RCC_OscConfig+0xa0>
 8001598:	e7e8      	b.n	800156c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800159a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800159e:	6823      	ldr	r3, [r4, #0]
 80015a0:	d103      	bne.n	80015aa <HAL_RCC_OscConfig+0xc2>
 80015a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015a6:	6023      	str	r3, [r4, #0]
 80015a8:	e7d1      	b.n	800154e <HAL_RCC_OscConfig+0x66>
 80015aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015ae:	6023      	str	r3, [r4, #0]
 80015b0:	6823      	ldr	r3, [r4, #0]
 80015b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015b6:	e7cd      	b.n	8001554 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80015b8:	4c67      	ldr	r4, [pc, #412]	; (8001758 <HAL_RCC_OscConfig+0x270>)
 80015ba:	6863      	ldr	r3, [r4, #4]
 80015bc:	f013 0f0c 	tst.w	r3, #12
 80015c0:	d007      	beq.n	80015d2 <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80015c2:	6863      	ldr	r3, [r4, #4]
 80015c4:	f003 030c 	and.w	r3, r3, #12
 80015c8:	2b08      	cmp	r3, #8
 80015ca:	d110      	bne.n	80015ee <HAL_RCC_OscConfig+0x106>
 80015cc:	6863      	ldr	r3, [r4, #4]
 80015ce:	03da      	lsls	r2, r3, #15
 80015d0:	d40d      	bmi.n	80015ee <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015d2:	6823      	ldr	r3, [r4, #0]
 80015d4:	079b      	lsls	r3, r3, #30
 80015d6:	d502      	bpl.n	80015de <HAL_RCC_OscConfig+0xf6>
 80015d8:	692b      	ldr	r3, [r5, #16]
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d1af      	bne.n	800153e <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015de:	6823      	ldr	r3, [r4, #0]
 80015e0:	696a      	ldr	r2, [r5, #20]
 80015e2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80015e6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80015ea:	6023      	str	r3, [r4, #0]
 80015ec:	e785      	b.n	80014fa <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015ee:	692a      	ldr	r2, [r5, #16]
 80015f0:	4b5a      	ldr	r3, [pc, #360]	; (800175c <HAL_RCC_OscConfig+0x274>)
 80015f2:	b16a      	cbz	r2, 8001610 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 80015f4:	2201      	movs	r2, #1
 80015f6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80015f8:	f7fe fdea 	bl	80001d0 <HAL_GetTick>
 80015fc:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015fe:	6823      	ldr	r3, [r4, #0]
 8001600:	079f      	lsls	r7, r3, #30
 8001602:	d4ec      	bmi.n	80015de <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001604:	f7fe fde4 	bl	80001d0 <HAL_GetTick>
 8001608:	1b80      	subs	r0, r0, r6
 800160a:	2802      	cmp	r0, #2
 800160c:	d9f7      	bls.n	80015fe <HAL_RCC_OscConfig+0x116>
 800160e:	e7ad      	b.n	800156c <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8001610:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001612:	f7fe fddd 	bl	80001d0 <HAL_GetTick>
 8001616:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001618:	6823      	ldr	r3, [r4, #0]
 800161a:	0798      	lsls	r0, r3, #30
 800161c:	f57f af6d 	bpl.w	80014fa <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001620:	f7fe fdd6 	bl	80001d0 <HAL_GetTick>
 8001624:	1b80      	subs	r0, r0, r6
 8001626:	2802      	cmp	r0, #2
 8001628:	d9f6      	bls.n	8001618 <HAL_RCC_OscConfig+0x130>
 800162a:	e79f      	b.n	800156c <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800162c:	69aa      	ldr	r2, [r5, #24]
 800162e:	4c4a      	ldr	r4, [pc, #296]	; (8001758 <HAL_RCC_OscConfig+0x270>)
 8001630:	4b4b      	ldr	r3, [pc, #300]	; (8001760 <HAL_RCC_OscConfig+0x278>)
 8001632:	b1da      	cbz	r2, 800166c <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8001634:	2201      	movs	r2, #1
 8001636:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001638:	f7fe fdca 	bl	80001d0 <HAL_GetTick>
 800163c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800163e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001640:	079b      	lsls	r3, r3, #30
 8001642:	d50d      	bpl.n	8001660 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001644:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001648:	4b46      	ldr	r3, [pc, #280]	; (8001764 <HAL_RCC_OscConfig+0x27c>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001650:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8001652:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8001654:	9b01      	ldr	r3, [sp, #4]
 8001656:	1e5a      	subs	r2, r3, #1
 8001658:	9201      	str	r2, [sp, #4]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d1f9      	bne.n	8001652 <HAL_RCC_OscConfig+0x16a>
 800165e:	e750      	b.n	8001502 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001660:	f7fe fdb6 	bl	80001d0 <HAL_GetTick>
 8001664:	1b80      	subs	r0, r0, r6
 8001666:	2802      	cmp	r0, #2
 8001668:	d9e9      	bls.n	800163e <HAL_RCC_OscConfig+0x156>
 800166a:	e77f      	b.n	800156c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 800166c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800166e:	f7fe fdaf 	bl	80001d0 <HAL_GetTick>
 8001672:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001674:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001676:	079f      	lsls	r7, r3, #30
 8001678:	f57f af43 	bpl.w	8001502 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800167c:	f7fe fda8 	bl	80001d0 <HAL_GetTick>
 8001680:	1b80      	subs	r0, r0, r6
 8001682:	2802      	cmp	r0, #2
 8001684:	d9f6      	bls.n	8001674 <HAL_RCC_OscConfig+0x18c>
 8001686:	e771      	b.n	800156c <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001688:	4c33      	ldr	r4, [pc, #204]	; (8001758 <HAL_RCC_OscConfig+0x270>)
 800168a:	69e3      	ldr	r3, [r4, #28]
 800168c:	00d8      	lsls	r0, r3, #3
 800168e:	d424      	bmi.n	80016da <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8001690:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001692:	69e3      	ldr	r3, [r4, #28]
 8001694:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001698:	61e3      	str	r3, [r4, #28]
 800169a:	69e3      	ldr	r3, [r4, #28]
 800169c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016a0:	9300      	str	r3, [sp, #0]
 80016a2:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016a4:	4e30      	ldr	r6, [pc, #192]	; (8001768 <HAL_RCC_OscConfig+0x280>)
 80016a6:	6833      	ldr	r3, [r6, #0]
 80016a8:	05d9      	lsls	r1, r3, #23
 80016aa:	d518      	bpl.n	80016de <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016ac:	68eb      	ldr	r3, [r5, #12]
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d126      	bne.n	8001700 <HAL_RCC_OscConfig+0x218>
 80016b2:	6a23      	ldr	r3, [r4, #32]
 80016b4:	f043 0301 	orr.w	r3, r3, #1
 80016b8:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80016ba:	f7fe fd89 	bl	80001d0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016be:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80016c2:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016c4:	6a23      	ldr	r3, [r4, #32]
 80016c6:	079b      	lsls	r3, r3, #30
 80016c8:	d53f      	bpl.n	800174a <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 80016ca:	2f00      	cmp	r7, #0
 80016cc:	f43f af1d 	beq.w	800150a <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 80016d0:	69e3      	ldr	r3, [r4, #28]
 80016d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016d6:	61e3      	str	r3, [r4, #28]
 80016d8:	e717      	b.n	800150a <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 80016da:	2700      	movs	r7, #0
 80016dc:	e7e2      	b.n	80016a4 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016de:	6833      	ldr	r3, [r6, #0]
 80016e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016e4:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80016e6:	f7fe fd73 	bl	80001d0 <HAL_GetTick>
 80016ea:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016ec:	6833      	ldr	r3, [r6, #0]
 80016ee:	05da      	lsls	r2, r3, #23
 80016f0:	d4dc      	bmi.n	80016ac <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016f2:	f7fe fd6d 	bl	80001d0 <HAL_GetTick>
 80016f6:	eba0 0008 	sub.w	r0, r0, r8
 80016fa:	2864      	cmp	r0, #100	; 0x64
 80016fc:	d9f6      	bls.n	80016ec <HAL_RCC_OscConfig+0x204>
 80016fe:	e735      	b.n	800156c <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001700:	b9ab      	cbnz	r3, 800172e <HAL_RCC_OscConfig+0x246>
 8001702:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001704:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001708:	f023 0301 	bic.w	r3, r3, #1
 800170c:	6223      	str	r3, [r4, #32]
 800170e:	6a23      	ldr	r3, [r4, #32]
 8001710:	f023 0304 	bic.w	r3, r3, #4
 8001714:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001716:	f7fe fd5b 	bl	80001d0 <HAL_GetTick>
 800171a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800171c:	6a23      	ldr	r3, [r4, #32]
 800171e:	0798      	lsls	r0, r3, #30
 8001720:	d5d3      	bpl.n	80016ca <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001722:	f7fe fd55 	bl	80001d0 <HAL_GetTick>
 8001726:	1b80      	subs	r0, r0, r6
 8001728:	4540      	cmp	r0, r8
 800172a:	d9f7      	bls.n	800171c <HAL_RCC_OscConfig+0x234>
 800172c:	e71e      	b.n	800156c <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800172e:	2b05      	cmp	r3, #5
 8001730:	6a23      	ldr	r3, [r4, #32]
 8001732:	d103      	bne.n	800173c <HAL_RCC_OscConfig+0x254>
 8001734:	f043 0304 	orr.w	r3, r3, #4
 8001738:	6223      	str	r3, [r4, #32]
 800173a:	e7ba      	b.n	80016b2 <HAL_RCC_OscConfig+0x1ca>
 800173c:	f023 0301 	bic.w	r3, r3, #1
 8001740:	6223      	str	r3, [r4, #32]
 8001742:	6a23      	ldr	r3, [r4, #32]
 8001744:	f023 0304 	bic.w	r3, r3, #4
 8001748:	e7b6      	b.n	80016b8 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800174a:	f7fe fd41 	bl	80001d0 <HAL_GetTick>
 800174e:	eba0 0008 	sub.w	r0, r0, r8
 8001752:	42b0      	cmp	r0, r6
 8001754:	d9b6      	bls.n	80016c4 <HAL_RCC_OscConfig+0x1dc>
 8001756:	e709      	b.n	800156c <HAL_RCC_OscConfig+0x84>
 8001758:	40021000 	.word	0x40021000
 800175c:	42420000 	.word	0x42420000
 8001760:	42420480 	.word	0x42420480
 8001764:	20000068 	.word	0x20000068
 8001768:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800176c:	4c22      	ldr	r4, [pc, #136]	; (80017f8 <HAL_RCC_OscConfig+0x310>)
 800176e:	6863      	ldr	r3, [r4, #4]
 8001770:	f003 030c 	and.w	r3, r3, #12
 8001774:	2b08      	cmp	r3, #8
 8001776:	f43f aee2 	beq.w	800153e <HAL_RCC_OscConfig+0x56>
 800177a:	2300      	movs	r3, #0
 800177c:	4e1f      	ldr	r6, [pc, #124]	; (80017fc <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800177e:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001780:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001782:	d12b      	bne.n	80017dc <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8001784:	f7fe fd24 	bl	80001d0 <HAL_GetTick>
 8001788:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800178a:	6823      	ldr	r3, [r4, #0]
 800178c:	0199      	lsls	r1, r3, #6
 800178e:	d41f      	bmi.n	80017d0 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001790:	6a2b      	ldr	r3, [r5, #32]
 8001792:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001796:	d105      	bne.n	80017a4 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001798:	6862      	ldr	r2, [r4, #4]
 800179a:	68a9      	ldr	r1, [r5, #8]
 800179c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80017a0:	430a      	orrs	r2, r1
 80017a2:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017a4:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80017a6:	6862      	ldr	r2, [r4, #4]
 80017a8:	430b      	orrs	r3, r1
 80017aa:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80017ae:	4313      	orrs	r3, r2
 80017b0:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 80017b2:	2301      	movs	r3, #1
 80017b4:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80017b6:	f7fe fd0b 	bl	80001d0 <HAL_GetTick>
 80017ba:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017bc:	6823      	ldr	r3, [r4, #0]
 80017be:	019a      	lsls	r2, r3, #6
 80017c0:	f53f aea7 	bmi.w	8001512 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017c4:	f7fe fd04 	bl	80001d0 <HAL_GetTick>
 80017c8:	1b40      	subs	r0, r0, r5
 80017ca:	2802      	cmp	r0, #2
 80017cc:	d9f6      	bls.n	80017bc <HAL_RCC_OscConfig+0x2d4>
 80017ce:	e6cd      	b.n	800156c <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017d0:	f7fe fcfe 	bl	80001d0 <HAL_GetTick>
 80017d4:	1bc0      	subs	r0, r0, r7
 80017d6:	2802      	cmp	r0, #2
 80017d8:	d9d7      	bls.n	800178a <HAL_RCC_OscConfig+0x2a2>
 80017da:	e6c7      	b.n	800156c <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 80017dc:	f7fe fcf8 	bl	80001d0 <HAL_GetTick>
 80017e0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017e2:	6823      	ldr	r3, [r4, #0]
 80017e4:	019b      	lsls	r3, r3, #6
 80017e6:	f57f ae94 	bpl.w	8001512 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017ea:	f7fe fcf1 	bl	80001d0 <HAL_GetTick>
 80017ee:	1b40      	subs	r0, r0, r5
 80017f0:	2802      	cmp	r0, #2
 80017f2:	d9f6      	bls.n	80017e2 <HAL_RCC_OscConfig+0x2fa>
 80017f4:	e6ba      	b.n	800156c <HAL_RCC_OscConfig+0x84>
 80017f6:	bf00      	nop
 80017f8:	40021000 	.word	0x40021000
 80017fc:	42420060 	.word	0x42420060

08001800 <HAL_RCC_GetSysClockFreq>:
{
 8001800:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001802:	4b18      	ldr	r3, [pc, #96]	; (8001864 <HAL_RCC_GetSysClockFreq+0x64>)
{
 8001804:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001806:	ac02      	add	r4, sp, #8
 8001808:	f103 0510 	add.w	r5, r3, #16
 800180c:	4622      	mov	r2, r4
 800180e:	6818      	ldr	r0, [r3, #0]
 8001810:	6859      	ldr	r1, [r3, #4]
 8001812:	3308      	adds	r3, #8
 8001814:	c203      	stmia	r2!, {r0, r1}
 8001816:	42ab      	cmp	r3, r5
 8001818:	4614      	mov	r4, r2
 800181a:	d1f7      	bne.n	800180c <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800181c:	f240 2301 	movw	r3, #513	; 0x201
  tmpreg = RCC->CFGR;
 8001820:	4911      	ldr	r1, [pc, #68]	; (8001868 <HAL_RCC_GetSysClockFreq+0x68>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001822:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8001826:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001828:	f003 020c 	and.w	r2, r3, #12
 800182c:	2a08      	cmp	r2, #8
 800182e:	d117      	bne.n	8001860 <HAL_RCC_GetSysClockFreq+0x60>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001830:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001834:	a806      	add	r0, sp, #24
 8001836:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001838:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800183a:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800183e:	d50c      	bpl.n	800185a <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001840:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001842:	480a      	ldr	r0, [pc, #40]	; (800186c <HAL_RCC_GetSysClockFreq+0x6c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001844:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001848:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800184a:	aa06      	add	r2, sp, #24
 800184c:	4413      	add	r3, r2
 800184e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001852:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8001856:	b007      	add	sp, #28
 8001858:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800185a:	4805      	ldr	r0, [pc, #20]	; (8001870 <HAL_RCC_GetSysClockFreq+0x70>)
 800185c:	4350      	muls	r0, r2
 800185e:	e7fa      	b.n	8001856 <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
 8001860:	4802      	ldr	r0, [pc, #8]	; (800186c <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 8001862:	e7f8      	b.n	8001856 <HAL_RCC_GetSysClockFreq+0x56>
 8001864:	08002800 	.word	0x08002800
 8001868:	40021000 	.word	0x40021000
 800186c:	007a1200 	.word	0x007a1200
 8001870:	003d0900 	.word	0x003d0900

08001874 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001874:	4a53      	ldr	r2, [pc, #332]	; (80019c4 <HAL_RCC_ClockConfig+0x150>)
{
 8001876:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800187a:	6813      	ldr	r3, [r2, #0]
{
 800187c:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800187e:	f003 0307 	and.w	r3, r3, #7
 8001882:	428b      	cmp	r3, r1
{
 8001884:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001886:	d328      	bcc.n	80018da <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001888:	6829      	ldr	r1, [r5, #0]
 800188a:	078c      	lsls	r4, r1, #30
 800188c:	d432      	bmi.n	80018f4 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800188e:	07ca      	lsls	r2, r1, #31
 8001890:	d445      	bmi.n	800191e <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001892:	4a4c      	ldr	r2, [pc, #304]	; (80019c4 <HAL_RCC_ClockConfig+0x150>)
 8001894:	6813      	ldr	r3, [r2, #0]
 8001896:	f003 0307 	and.w	r3, r3, #7
 800189a:	42b3      	cmp	r3, r6
 800189c:	d87f      	bhi.n	800199e <HAL_RCC_ClockConfig+0x12a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800189e:	682a      	ldr	r2, [r5, #0]
 80018a0:	4c49      	ldr	r4, [pc, #292]	; (80019c8 <HAL_RCC_ClockConfig+0x154>)
 80018a2:	f012 0f04 	tst.w	r2, #4
 80018a6:	f040 8085 	bne.w	80019b4 <HAL_RCC_ClockConfig+0x140>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018aa:	0713      	lsls	r3, r2, #28
 80018ac:	d506      	bpl.n	80018bc <HAL_RCC_ClockConfig+0x48>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80018ae:	6863      	ldr	r3, [r4, #4]
 80018b0:	692a      	ldr	r2, [r5, #16]
 80018b2:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80018b6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80018ba:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018bc:	f7ff ffa0 	bl	8001800 <HAL_RCC_GetSysClockFreq>
 80018c0:	6863      	ldr	r3, [r4, #4]
 80018c2:	4a42      	ldr	r2, [pc, #264]	; (80019cc <HAL_RCC_ClockConfig+0x158>)
 80018c4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80018c8:	5cd3      	ldrb	r3, [r2, r3]
 80018ca:	40d8      	lsrs	r0, r3
 80018cc:	4b40      	ldr	r3, [pc, #256]	; (80019d0 <HAL_RCC_ClockConfig+0x15c>)
 80018ce:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80018d0:	2000      	movs	r0, #0
 80018d2:	f7fe fc3b 	bl	800014c <HAL_InitTick>
  return HAL_OK;
 80018d6:	2000      	movs	r0, #0
 80018d8:	e00a      	b.n	80018f0 <HAL_RCC_ClockConfig+0x7c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018da:	6813      	ldr	r3, [r2, #0]
 80018dc:	f023 0307 	bic.w	r3, r3, #7
 80018e0:	430b      	orrs	r3, r1
 80018e2:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80018e4:	6813      	ldr	r3, [r2, #0]
 80018e6:	f003 0307 	and.w	r3, r3, #7
 80018ea:	428b      	cmp	r3, r1
 80018ec:	d0cc      	beq.n	8001888 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 80018ee:	2001      	movs	r0, #1
}
 80018f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80018f4:	4b34      	ldr	r3, [pc, #208]	; (80019c8 <HAL_RCC_ClockConfig+0x154>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018f6:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018fa:	bf1e      	ittt	ne
 80018fc:	685a      	ldrne	r2, [r3, #4]
 80018fe:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8001902:	605a      	strne	r2, [r3, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001904:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001906:	bf42      	ittt	mi
 8001908:	685a      	ldrmi	r2, [r3, #4]
 800190a:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 800190e:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001910:	685a      	ldr	r2, [r3, #4]
 8001912:	68a8      	ldr	r0, [r5, #8]
 8001914:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001918:	4302      	orrs	r2, r0
 800191a:	605a      	str	r2, [r3, #4]
 800191c:	e7b7      	b.n	800188e <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800191e:	686a      	ldr	r2, [r5, #4]
 8001920:	4c29      	ldr	r4, [pc, #164]	; (80019c8 <HAL_RCC_ClockConfig+0x154>)
 8001922:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001924:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001926:	d11b      	bne.n	8001960 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001928:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800192c:	d0df      	beq.n	80018ee <HAL_RCC_ClockConfig+0x7a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800192e:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001930:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001934:	f023 0303 	bic.w	r3, r3, #3
 8001938:	4313      	orrs	r3, r2
 800193a:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 800193c:	f7fe fc48 	bl	80001d0 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001940:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8001942:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001944:	2b01      	cmp	r3, #1
 8001946:	d113      	bne.n	8001970 <HAL_RCC_ClockConfig+0xfc>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001948:	6863      	ldr	r3, [r4, #4]
 800194a:	f003 030c 	and.w	r3, r3, #12
 800194e:	2b04      	cmp	r3, #4
 8001950:	d09f      	beq.n	8001892 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001952:	f7fe fc3d 	bl	80001d0 <HAL_GetTick>
 8001956:	1bc0      	subs	r0, r0, r7
 8001958:	4540      	cmp	r0, r8
 800195a:	d9f5      	bls.n	8001948 <HAL_RCC_ClockConfig+0xd4>
          return HAL_TIMEOUT;
 800195c:	2003      	movs	r0, #3
 800195e:	e7c7      	b.n	80018f0 <HAL_RCC_ClockConfig+0x7c>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001960:	2a02      	cmp	r2, #2
 8001962:	d102      	bne.n	800196a <HAL_RCC_ClockConfig+0xf6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001964:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001968:	e7e0      	b.n	800192c <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800196a:	f013 0f02 	tst.w	r3, #2
 800196e:	e7dd      	b.n	800192c <HAL_RCC_ClockConfig+0xb8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001970:	2b02      	cmp	r3, #2
 8001972:	d10f      	bne.n	8001994 <HAL_RCC_ClockConfig+0x120>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001974:	6863      	ldr	r3, [r4, #4]
 8001976:	f003 030c 	and.w	r3, r3, #12
 800197a:	2b08      	cmp	r3, #8
 800197c:	d089      	beq.n	8001892 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800197e:	f7fe fc27 	bl	80001d0 <HAL_GetTick>
 8001982:	1bc0      	subs	r0, r0, r7
 8001984:	4540      	cmp	r0, r8
 8001986:	d9f5      	bls.n	8001974 <HAL_RCC_ClockConfig+0x100>
 8001988:	e7e8      	b.n	800195c <HAL_RCC_ClockConfig+0xe8>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800198a:	f7fe fc21 	bl	80001d0 <HAL_GetTick>
 800198e:	1bc0      	subs	r0, r0, r7
 8001990:	4540      	cmp	r0, r8
 8001992:	d8e3      	bhi.n	800195c <HAL_RCC_ClockConfig+0xe8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001994:	6863      	ldr	r3, [r4, #4]
 8001996:	f013 0f0c 	tst.w	r3, #12
 800199a:	d1f6      	bne.n	800198a <HAL_RCC_ClockConfig+0x116>
 800199c:	e779      	b.n	8001892 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800199e:	6813      	ldr	r3, [r2, #0]
 80019a0:	f023 0307 	bic.w	r3, r3, #7
 80019a4:	4333      	orrs	r3, r6
 80019a6:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80019a8:	6813      	ldr	r3, [r2, #0]
 80019aa:	f003 0307 	and.w	r3, r3, #7
 80019ae:	42b3      	cmp	r3, r6
 80019b0:	d19d      	bne.n	80018ee <HAL_RCC_ClockConfig+0x7a>
 80019b2:	e774      	b.n	800189e <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019b4:	6863      	ldr	r3, [r4, #4]
 80019b6:	68e9      	ldr	r1, [r5, #12]
 80019b8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80019bc:	430b      	orrs	r3, r1
 80019be:	6063      	str	r3, [r4, #4]
 80019c0:	e773      	b.n	80018aa <HAL_RCC_ClockConfig+0x36>
 80019c2:	bf00      	nop
 80019c4:	40022000 	.word	0x40022000
 80019c8:	40021000 	.word	0x40021000
 80019cc:	0800288c 	.word	0x0800288c
 80019d0:	20000068 	.word	0x20000068

080019d4 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80019d4:	4b04      	ldr	r3, [pc, #16]	; (80019e8 <HAL_RCC_GetPCLK2Freq+0x14>)
 80019d6:	4a05      	ldr	r2, [pc, #20]	; (80019ec <HAL_RCC_GetPCLK2Freq+0x18>)
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80019de:	5cd3      	ldrb	r3, [r2, r3]
 80019e0:	4a03      	ldr	r2, [pc, #12]	; (80019f0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80019e2:	6810      	ldr	r0, [r2, #0]
} 
 80019e4:	40d8      	lsrs	r0, r3
 80019e6:	4770      	bx	lr
 80019e8:	40021000 	.word	0x40021000
 80019ec:	0800289c 	.word	0x0800289c
 80019f0:	20000068 	.word	0x20000068

080019f4 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80019f4:	6803      	ldr	r3, [r0, #0]
{
 80019f6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80019fa:	07d9      	lsls	r1, r3, #31
{
 80019fc:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80019fe:	d520      	bpl.n	8001a42 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a00:	4c35      	ldr	r4, [pc, #212]	; (8001ad8 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001a02:	69e3      	ldr	r3, [r4, #28]
 8001a04:	00da      	lsls	r2, r3, #3
 8001a06:	d432      	bmi.n	8001a6e <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8001a08:	2701      	movs	r7, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 8001a0a:	69e3      	ldr	r3, [r4, #28]
 8001a0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a10:	61e3      	str	r3, [r4, #28]
 8001a12:	69e3      	ldr	r3, [r4, #28]
 8001a14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a18:	9301      	str	r3, [sp, #4]
 8001a1a:	9b01      	ldr	r3, [sp, #4]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a1c:	4e2f      	ldr	r6, [pc, #188]	; (8001adc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8001a1e:	6833      	ldr	r3, [r6, #0]
 8001a20:	05db      	lsls	r3, r3, #23
 8001a22:	d526      	bpl.n	8001a72 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001a24:	6a23      	ldr	r3, [r4, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001a26:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001a2a:	d136      	bne.n	8001a9a <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8001a2c:	6a23      	ldr	r3, [r4, #32]
 8001a2e:	686a      	ldr	r2, [r5, #4]
 8001a30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a34:	4313      	orrs	r3, r2
 8001a36:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001a38:	b11f      	cbz	r7, 8001a42 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a3a:	69e3      	ldr	r3, [r4, #28]
 8001a3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a40:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001a42:	6828      	ldr	r0, [r5, #0]
 8001a44:	0783      	lsls	r3, r0, #30
 8001a46:	d506      	bpl.n	8001a56 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001a48:	4a23      	ldr	r2, [pc, #140]	; (8001ad8 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001a4a:	68a9      	ldr	r1, [r5, #8]
 8001a4c:	6853      	ldr	r3, [r2, #4]
 8001a4e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001a52:	430b      	orrs	r3, r1
 8001a54:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001a56:	f010 0010 	ands.w	r0, r0, #16
 8001a5a:	d01b      	beq.n	8001a94 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001a5c:	4a1e      	ldr	r2, [pc, #120]	; (8001ad8 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001a5e:	68e9      	ldr	r1, [r5, #12]
 8001a60:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001a62:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001a64:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001a68:	430b      	orrs	r3, r1
 8001a6a:	6053      	str	r3, [r2, #4]
 8001a6c:	e012      	b.n	8001a94 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 8001a6e:	2700      	movs	r7, #0
 8001a70:	e7d4      	b.n	8001a1c <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a72:	6833      	ldr	r3, [r6, #0]
 8001a74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a78:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001a7a:	f7fe fba9 	bl	80001d0 <HAL_GetTick>
 8001a7e:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a80:	6833      	ldr	r3, [r6, #0]
 8001a82:	05d8      	lsls	r0, r3, #23
 8001a84:	d4ce      	bmi.n	8001a24 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a86:	f7fe fba3 	bl	80001d0 <HAL_GetTick>
 8001a8a:	eba0 0008 	sub.w	r0, r0, r8
 8001a8e:	2864      	cmp	r0, #100	; 0x64
 8001a90:	d9f6      	bls.n	8001a80 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 8001a92:	2003      	movs	r0, #3
}
 8001a94:	b002      	add	sp, #8
 8001a96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001a9a:	686a      	ldr	r2, [r5, #4]
 8001a9c:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d0c3      	beq.n	8001a2c <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8001aa4:	2001      	movs	r0, #1
 8001aa6:	4a0e      	ldr	r2, [pc, #56]	; (8001ae0 <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001aa8:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8001aaa:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001aac:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001aae:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ab2:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8001ab4:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001ab6:	07d9      	lsls	r1, r3, #31
 8001ab8:	d5b8      	bpl.n	8001a2c <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8001aba:	f7fe fb89 	bl	80001d0 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001abe:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001ac2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ac4:	6a23      	ldr	r3, [r4, #32]
 8001ac6:	079a      	lsls	r2, r3, #30
 8001ac8:	d4b0      	bmi.n	8001a2c <HAL_RCCEx_PeriphCLKConfig+0x38>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aca:	f7fe fb81 	bl	80001d0 <HAL_GetTick>
 8001ace:	1b80      	subs	r0, r0, r6
 8001ad0:	4540      	cmp	r0, r8
 8001ad2:	d9f7      	bls.n	8001ac4 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8001ad4:	e7dd      	b.n	8001a92 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8001ad6:	bf00      	nop
 8001ad8:	40021000 	.word	0x40021000
 8001adc:	40007000 	.word	0x40007000
 8001ae0:	42420440 	.word	0x42420440

08001ae4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8001ae4:	b570      	push	{r4, r5, r6, lr}
 8001ae6:	4604      	mov	r4, r0
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001ae8:	4b34      	ldr	r3, [pc, #208]	; (8001bbc <HAL_RCCEx_GetPeriphCLKFreq+0xd8>)
{
 8001aea:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001aec:	ad02      	add	r5, sp, #8
 8001aee:	f103 0610 	add.w	r6, r3, #16
 8001af2:	462a      	mov	r2, r5
 8001af4:	6818      	ldr	r0, [r3, #0]
 8001af6:	6859      	ldr	r1, [r3, #4]
 8001af8:	3308      	adds	r3, #8
 8001afa:	c203      	stmia	r2!, {r0, r1}
 8001afc:	42b3      	cmp	r3, r6
 8001afe:	4615      	mov	r5, r2
 8001b00:	d1f7      	bne.n	8001af2 <HAL_RCCEx_GetPeriphCLKFreq+0xe>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001b02:	f240 2301 	movw	r3, #513	; 0x201
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  switch (PeriphClk)
 8001b06:	2c02      	cmp	r4, #2
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001b08:	f8ad 3004 	strh.w	r3, [sp, #4]
  switch (PeriphClk)
 8001b0c:	d047      	beq.n	8001b9e <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 8001b0e:	2c10      	cmp	r4, #16
 8001b10:	d017      	beq.n	8001b42 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
 8001b12:	2c01      	cmp	r4, #1
 8001b14:	d14f      	bne.n	8001bb6 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8001b16:	f240 3102 	movw	r1, #770	; 0x302
      temp_reg = RCC->BDCR;
 8001b1a:	4a29      	ldr	r2, [pc, #164]	; (8001bc0 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
 8001b1c:	6a13      	ldr	r3, [r2, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8001b1e:	4019      	ands	r1, r3
 8001b20:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
 8001b24:	d044      	beq.n	8001bb0 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
      {
        frequency = LSE_VALUE;
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8001b26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b2e:	d12d      	bne.n	8001b8c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
      {
        frequency = LSI_VALUE;
 8001b30:	f649 4040 	movw	r0, #40000	; 0x9c40
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8001b34:	6a53      	ldr	r3, [r2, #36]	; 0x24
        frequency = LSI_VALUE;
 8001b36:	f013 0f02 	tst.w	r3, #2
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
      {
        frequency = HSE_VALUE / 128U;
 8001b3a:	bf08      	it	eq
 8001b3c:	2000      	moveq	r0, #0
    {
      break;
    }
  }
  return(frequency);
}
 8001b3e:	b006      	add	sp, #24
 8001b40:	bd70      	pop	{r4, r5, r6, pc}
      temp_reg = RCC->CFGR;
 8001b42:	4b1f      	ldr	r3, [pc, #124]	; (8001bc0 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
 8001b44:	6859      	ldr	r1, [r3, #4]
      if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLLON))
 8001b46:	6818      	ldr	r0, [r3, #0]
 8001b48:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 8001b4c:	d0f7      	beq.n	8001b3e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b4e:	f3c1 4283 	ubfx	r2, r1, #18, #4
 8001b52:	a806      	add	r0, sp, #24
 8001b54:	4402      	add	r2, r0
 8001b56:	f812 0c10 	ldrb.w	r0, [r2, #-16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b5a:	03ca      	lsls	r2, r1, #15
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b5c:	bf41      	itttt	mi
 8001b5e:	685a      	ldrmi	r2, [r3, #4]
 8001b60:	a906      	addmi	r1, sp, #24
 8001b62:	f3c2 4240 	ubfxmi	r2, r2, #17, #1
 8001b66:	1852      	addmi	r2, r2, r1
 8001b68:	bf44      	itt	mi
 8001b6a:	f812 1c14 	ldrbmi.w	r1, [r2, #-20]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8001b6e:	4a15      	ldrmi	r2, [pc, #84]	; (8001bc4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8001b70:	685b      	ldr	r3, [r3, #4]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8001b72:	bf4c      	ite	mi
 8001b74:	fbb2 f2f1 	udivmi	r2, r2, r1
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b78:	4a13      	ldrpl	r2, [pc, #76]	; (8001bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8001b7a:	025b      	lsls	r3, r3, #9
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b7c:	fb02 f000 	mul.w	r0, r2, r0
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8001b80:	d4dd      	bmi.n	8001b3e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          frequency = (pllclk * 2) / 3;
 8001b82:	2303      	movs	r3, #3
 8001b84:	0040      	lsls	r0, r0, #1
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8001b86:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8001b8a:	e7d8      	b.n	8001b3e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8001b8c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001b90:	d111      	bne.n	8001bb6 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 8001b92:	6813      	ldr	r3, [r2, #0]
        frequency = HSE_VALUE / 128U;
 8001b94:	f24f 4024 	movw	r0, #62500	; 0xf424
 8001b98:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001b9c:	e7cd      	b.n	8001b3a <HAL_RCCEx_GetPeriphCLKFreq+0x56>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8001b9e:	f7ff ff19 	bl	80019d4 <HAL_RCC_GetPCLK2Freq>
 8001ba2:	4b07      	ldr	r3, [pc, #28]	; (8001bc0 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f3c3 3381 	ubfx	r3, r3, #14, #2
 8001baa:	3301      	adds	r3, #1
 8001bac:	005b      	lsls	r3, r3, #1
 8001bae:	e7ea      	b.n	8001b86 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
        frequency = LSE_VALUE;
 8001bb0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001bb4:	e7c3      	b.n	8001b3e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        frequency = 0U;
 8001bb6:	2000      	movs	r0, #0
 8001bb8:	e7c1      	b.n	8001b3e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8001bba:	bf00      	nop
 8001bbc:	08002810 	.word	0x08002810
 8001bc0:	40021000 	.word	0x40021000
 8001bc4:	007a1200 	.word	0x007a1200
 8001bc8:	003d0900 	.word	0x003d0900

08001bcc <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001bcc:	6803      	ldr	r3, [r0, #0]
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);

  /* Return function status */
  return HAL_OK;
}
 8001bce:	2000      	movs	r0, #0
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001bd0:	68da      	ldr	r2, [r3, #12]
 8001bd2:	f042 0201 	orr.w	r2, r2, #1
 8001bd6:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	f042 0201 	orr.w	r2, r2, #1
 8001bde:	601a      	str	r2, [r3, #0]
}
 8001be0:	4770      	bx	lr

08001be2 <HAL_TIM_ConfigClockSource>:
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
  uint32_t tmpsmcr = 0U;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001be2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8001be6:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	f04f 0302 	mov.w	r3, #2
 8001bee:	d01c      	beq.n	8001c2a <HAL_TIM_ConfigClockSource+0x48>
 8001bf0:	2201      	movs	r2, #1

  htim->State = HAL_TIM_STATE_BUSY;
 8001bf2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001bf6:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 8001bf8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8001bfc:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001bfe:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8001c02:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8001c06:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001c08:	680a      	ldr	r2, [r1, #0]
 8001c0a:	2a40      	cmp	r2, #64	; 0x40
 8001c0c:	d079      	beq.n	8001d02 <HAL_TIM_ConfigClockSource+0x120>
 8001c0e:	d819      	bhi.n	8001c44 <HAL_TIM_ConfigClockSource+0x62>
 8001c10:	2a10      	cmp	r2, #16
 8001c12:	f000 8093 	beq.w	8001d3c <HAL_TIM_ConfigClockSource+0x15a>
 8001c16:	d80a      	bhi.n	8001c2e <HAL_TIM_ConfigClockSource+0x4c>
 8001c18:	2a00      	cmp	r2, #0
 8001c1a:	f000 8089 	beq.w	8001d30 <HAL_TIM_ConfigClockSource+0x14e>
    break;

  default:
    break;
  }
  htim->State = HAL_TIM_STATE_READY;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001c24:	2300      	movs	r3, #0
 8001c26:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8001c2a:	4618      	mov	r0, r3

  return HAL_OK;
}
 8001c2c:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8001c2e:	2a20      	cmp	r2, #32
 8001c30:	f000 808a 	beq.w	8001d48 <HAL_TIM_ConfigClockSource+0x166>
 8001c34:	2a30      	cmp	r2, #48	; 0x30
 8001c36:	d1f2      	bne.n	8001c1e <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8001c38:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8001c3a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001c3e:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 8001c42:	e036      	b.n	8001cb2 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8001c44:	2a70      	cmp	r2, #112	; 0x70
 8001c46:	d036      	beq.n	8001cb6 <HAL_TIM_ConfigClockSource+0xd4>
 8001c48:	d81b      	bhi.n	8001c82 <HAL_TIM_ConfigClockSource+0xa0>
 8001c4a:	2a50      	cmp	r2, #80	; 0x50
 8001c4c:	d042      	beq.n	8001cd4 <HAL_TIM_ConfigClockSource+0xf2>
 8001c4e:	2a60      	cmp	r2, #96	; 0x60
 8001c50:	d1e5      	bne.n	8001c1e <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001c52:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001c54:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001c56:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001c5a:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001c5c:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001c5e:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8001c60:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001c62:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001c66:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8001c6a:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001c6e:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8001c72:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8001c74:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8001c76:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001c78:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001c7c:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 8001c80:	e017      	b.n	8001cb2 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8001c82:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001c86:	d011      	beq.n	8001cac <HAL_TIM_ConfigClockSource+0xca>
 8001c88:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001c8c:	d1c7      	bne.n	8001c1e <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001c8e:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8001c92:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001c94:	68c9      	ldr	r1, [r1, #12]
 8001c96:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001c98:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001c9c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001ca0:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001ca2:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001ca4:	689a      	ldr	r2, [r3, #8]
 8001ca6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001caa:	e002      	b.n	8001cb2 <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001cac:	689a      	ldr	r2, [r3, #8]
 8001cae:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 8001cb2:	609a      	str	r2, [r3, #8]
 8001cb4:	e7b3      	b.n	8001c1e <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr = TIMx->SMCR;
 8001cb6:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001cb8:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
 8001cbc:	68c9      	ldr	r1, [r1, #12]
 8001cbe:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001cc0:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001cc4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001cc8:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8001cca:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8001ccc:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001cce:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 8001cd2:	e7ee      	b.n	8001cb2 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001cd4:	684c      	ldr	r4, [r1, #4]
 8001cd6:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001cd8:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001cda:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001cdc:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001ce0:	f025 0501 	bic.w	r5, r5, #1
 8001ce4:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001ce6:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8001ce8:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001cea:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001cee:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8001cf2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001cf4:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8001cf6:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001cf8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001cfc:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 8001d00:	e7d7      	b.n	8001cb2 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d02:	684c      	ldr	r4, [r1, #4]
 8001d04:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001d06:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001d08:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001d0a:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001d0e:	f025 0501 	bic.w	r5, r5, #1
 8001d12:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001d14:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8001d16:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001d18:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001d1c:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8001d20:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001d22:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8001d24:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001d26:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001d2a:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 8001d2e:	e7c0      	b.n	8001cb2 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8001d30:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001d32:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001d36:	f042 0207 	orr.w	r2, r2, #7
 8001d3a:	e7ba      	b.n	8001cb2 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8001d3c:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001d3e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001d42:	f042 0217 	orr.w	r2, r2, #23
 8001d46:	e7b4      	b.n	8001cb2 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8001d48:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001d4a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001d4e:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 8001d52:	e7ae      	b.n	8001cb2 <HAL_TIM_ConfigClockSource+0xd0>

08001d54 <HAL_TIM_OC_DelayElapsedCallback>:
 8001d54:	4770      	bx	lr

08001d56 <HAL_TIM_IC_CaptureCallback>:
 8001d56:	4770      	bx	lr

08001d58 <HAL_TIM_PWM_PulseFinishedCallback>:
 8001d58:	4770      	bx	lr

08001d5a <HAL_TIM_TriggerCallback>:
 8001d5a:	4770      	bx	lr

08001d5c <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d5c:	6803      	ldr	r3, [r0, #0]
{
 8001d5e:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d60:	691a      	ldr	r2, [r3, #16]
{
 8001d62:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d64:	0791      	lsls	r1, r2, #30
 8001d66:	d50e      	bpl.n	8001d86 <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8001d68:	68da      	ldr	r2, [r3, #12]
 8001d6a:	0792      	lsls	r2, r2, #30
 8001d6c:	d50b      	bpl.n	8001d86 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d6e:	f06f 0202 	mvn.w	r2, #2
 8001d72:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d74:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d76:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d78:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d7a:	079b      	lsls	r3, r3, #30
 8001d7c:	d077      	beq.n	8001e6e <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8001d7e:	f7ff ffea 	bl	8001d56 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d82:	2300      	movs	r3, #0
 8001d84:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d86:	6823      	ldr	r3, [r4, #0]
 8001d88:	691a      	ldr	r2, [r3, #16]
 8001d8a:	0750      	lsls	r0, r2, #29
 8001d8c:	d510      	bpl.n	8001db0 <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001d8e:	68da      	ldr	r2, [r3, #12]
 8001d90:	0751      	lsls	r1, r2, #29
 8001d92:	d50d      	bpl.n	8001db0 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d94:	f06f 0204 	mvn.w	r2, #4
 8001d98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d9a:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d9c:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d9e:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001da0:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8001da4:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001da6:	d068      	beq.n	8001e7a <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8001da8:	f7ff ffd5 	bl	8001d56 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dac:	2300      	movs	r3, #0
 8001dae:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001db0:	6823      	ldr	r3, [r4, #0]
 8001db2:	691a      	ldr	r2, [r3, #16]
 8001db4:	0712      	lsls	r2, r2, #28
 8001db6:	d50f      	bpl.n	8001dd8 <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001db8:	68da      	ldr	r2, [r3, #12]
 8001dba:	0710      	lsls	r0, r2, #28
 8001dbc:	d50c      	bpl.n	8001dd8 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001dbe:	f06f 0208 	mvn.w	r2, #8
 8001dc2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001dc4:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001dc6:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001dc8:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001dca:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8001dcc:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001dce:	d05a      	beq.n	8001e86 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001dd0:	f7ff ffc1 	bl	8001d56 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001dd8:	6823      	ldr	r3, [r4, #0]
 8001dda:	691a      	ldr	r2, [r3, #16]
 8001ddc:	06d2      	lsls	r2, r2, #27
 8001dde:	d510      	bpl.n	8001e02 <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001de0:	68da      	ldr	r2, [r3, #12]
 8001de2:	06d0      	lsls	r0, r2, #27
 8001de4:	d50d      	bpl.n	8001e02 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001de6:	f06f 0210 	mvn.w	r2, #16
 8001dea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001dec:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001dee:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001df0:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001df2:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8001df6:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001df8:	d04b      	beq.n	8001e92 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8001dfa:	f7ff ffac 	bl	8001d56 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e02:	6823      	ldr	r3, [r4, #0]
 8001e04:	691a      	ldr	r2, [r3, #16]
 8001e06:	07d1      	lsls	r1, r2, #31
 8001e08:	d508      	bpl.n	8001e1c <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001e0a:	68da      	ldr	r2, [r3, #12]
 8001e0c:	07d2      	lsls	r2, r2, #31
 8001e0e:	d505      	bpl.n	8001e1c <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e10:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e14:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e16:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e18:	f000 f920 	bl	800205c <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e1c:	6823      	ldr	r3, [r4, #0]
 8001e1e:	691a      	ldr	r2, [r3, #16]
 8001e20:	0610      	lsls	r0, r2, #24
 8001e22:	d508      	bpl.n	8001e36 <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001e24:	68da      	ldr	r2, [r3, #12]
 8001e26:	0611      	lsls	r1, r2, #24
 8001e28:	d505      	bpl.n	8001e36 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e2a:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8001e2e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e30:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001e32:	f000 f8aa 	bl	8001f8a <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e36:	6823      	ldr	r3, [r4, #0]
 8001e38:	691a      	ldr	r2, [r3, #16]
 8001e3a:	0652      	lsls	r2, r2, #25
 8001e3c:	d508      	bpl.n	8001e50 <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8001e3e:	68da      	ldr	r2, [r3, #12]
 8001e40:	0650      	lsls	r0, r2, #25
 8001e42:	d505      	bpl.n	8001e50 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e44:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8001e48:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e4a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001e4c:	f7ff ff85 	bl	8001d5a <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e50:	6823      	ldr	r3, [r4, #0]
 8001e52:	691a      	ldr	r2, [r3, #16]
 8001e54:	0691      	lsls	r1, r2, #26
 8001e56:	d522      	bpl.n	8001e9e <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8001e58:	68da      	ldr	r2, [r3, #12]
 8001e5a:	0692      	lsls	r2, r2, #26
 8001e5c:	d51f      	bpl.n	8001e9e <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e5e:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8001e62:	4620      	mov	r0, r4
}
 8001e64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e68:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8001e6a:	f000 b88d 	b.w	8001f88 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e6e:	f7ff ff71 	bl	8001d54 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e72:	4620      	mov	r0, r4
 8001e74:	f7ff ff70 	bl	8001d58 <HAL_TIM_PWM_PulseFinishedCallback>
 8001e78:	e783      	b.n	8001d82 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e7a:	f7ff ff6b 	bl	8001d54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e7e:	4620      	mov	r0, r4
 8001e80:	f7ff ff6a 	bl	8001d58 <HAL_TIM_PWM_PulseFinishedCallback>
 8001e84:	e792      	b.n	8001dac <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e86:	f7ff ff65 	bl	8001d54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e8a:	4620      	mov	r0, r4
 8001e8c:	f7ff ff64 	bl	8001d58 <HAL_TIM_PWM_PulseFinishedCallback>
 8001e90:	e7a0      	b.n	8001dd4 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e92:	f7ff ff5f 	bl	8001d54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e96:	4620      	mov	r0, r4
 8001e98:	f7ff ff5e 	bl	8001d58 <HAL_TIM_PWM_PulseFinishedCallback>
 8001e9c:	e7af      	b.n	8001dfe <HAL_TIM_IRQHandler+0xa2>
}
 8001e9e:	bd10      	pop	{r4, pc}

08001ea0 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ea0:	4a1a      	ldr	r2, [pc, #104]	; (8001f0c <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8001ea2:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ea4:	4290      	cmp	r0, r2
 8001ea6:	d00a      	beq.n	8001ebe <TIM_Base_SetConfig+0x1e>
 8001ea8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001eac:	d007      	beq.n	8001ebe <TIM_Base_SetConfig+0x1e>
 8001eae:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001eb2:	4290      	cmp	r0, r2
 8001eb4:	d003      	beq.n	8001ebe <TIM_Base_SetConfig+0x1e>
 8001eb6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001eba:	4290      	cmp	r0, r2
 8001ebc:	d115      	bne.n	8001eea <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 8001ebe:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ec0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001ec4:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ec6:	4a11      	ldr	r2, [pc, #68]	; (8001f0c <TIM_Base_SetConfig+0x6c>)
 8001ec8:	4290      	cmp	r0, r2
 8001eca:	d00a      	beq.n	8001ee2 <TIM_Base_SetConfig+0x42>
 8001ecc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001ed0:	d007      	beq.n	8001ee2 <TIM_Base_SetConfig+0x42>
 8001ed2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001ed6:	4290      	cmp	r0, r2
 8001ed8:	d003      	beq.n	8001ee2 <TIM_Base_SetConfig+0x42>
 8001eda:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001ede:	4290      	cmp	r0, r2
 8001ee0:	d103      	bne.n	8001eea <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ee2:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001ee4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ee8:	4313      	orrs	r3, r2
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8001eea:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 8001eec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8001ef0:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8001ef2:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ef4:	688b      	ldr	r3, [r1, #8]
 8001ef6:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001ef8:	680b      	ldr	r3, [r1, #0]
 8001efa:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001efc:	4b03      	ldr	r3, [pc, #12]	; (8001f0c <TIM_Base_SetConfig+0x6c>)
 8001efe:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8001f00:	bf04      	itt	eq
 8001f02:	690b      	ldreq	r3, [r1, #16]
 8001f04:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8001f06:	2301      	movs	r3, #1
 8001f08:	6143      	str	r3, [r0, #20]
}
 8001f0a:	4770      	bx	lr
 8001f0c:	40012c00 	.word	0x40012c00

08001f10 <HAL_TIM_Base_Init>:
{
 8001f10:	b510      	push	{r4, lr}
  if(htim == NULL)
 8001f12:	4604      	mov	r4, r0
 8001f14:	b1a0      	cbz	r0, 8001f40 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001f16:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001f1a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001f1e:	b91b      	cbnz	r3, 8001f28 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001f20:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001f24:	f000 fb66 	bl	80025f4 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8001f28:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f2a:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8001f2c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f30:	1d21      	adds	r1, r4, #4
 8001f32:	f7ff ffb5 	bl	8001ea0 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001f36:	2301      	movs	r3, #1
  return HAL_OK;
 8001f38:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8001f3a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8001f3e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001f40:	2001      	movs	r0, #1
 8001f42:	e7fc      	b.n	8001f3e <HAL_TIM_Base_Init+0x2e>

08001f44 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8001f44:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8001f48:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	f04f 0302 	mov.w	r3, #2
 8001f50:	d018      	beq.n	8001f84 <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 8001f52:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001f56:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8001f58:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001f5a:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001f5c:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001f5e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001f62:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8001f64:	685a      	ldr	r2, [r3, #4]
 8001f66:	4322      	orrs	r2, r4
 8001f68:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8001f6a:	689a      	ldr	r2, [r3, #8]
 8001f6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f70:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001f72:	689a      	ldr	r2, [r3, #8]
 8001f74:	430a      	orrs	r2, r1
 8001f76:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001f7e:	2300      	movs	r3, #0
 8001f80:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8001f84:	4618      	mov	r0, r3

  return HAL_OK;
}
 8001f86:	bd10      	pop	{r4, pc}

08001f88 <HAL_TIMEx_CommutationCallback>:
 8001f88:	4770      	bx	lr

08001f8a <HAL_TIMEx_BreakCallback>:
 8001f8a:	4770      	bx	lr

08001f8c <Error_Handler>:
}



void Error_Handler(void)
{
 8001f8c:	b508      	push	{r3, lr}
	while(1)
	{
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001f8e:	4c05      	ldr	r4, [pc, #20]	; (8001fa4 <Error_Handler+0x18>)
 8001f90:	4620      	mov	r0, r4
 8001f92:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f96:	f7ff faa2 	bl	80014de <HAL_GPIO_TogglePin>
		HAL_Delay(33);
 8001f9a:	2021      	movs	r0, #33	; 0x21
 8001f9c:	f7fe f91e 	bl	80001dc <HAL_Delay>
 8001fa0:	e7f6      	b.n	8001f90 <Error_Handler+0x4>
 8001fa2:	bf00      	nop
 8001fa4:	40011000 	.word	0x40011000

08001fa8 <SystemClock_Config>:
{
 8001fa8:	b530      	push	{r4, r5, lr}
 8001faa:	b095      	sub	sp, #84	; 0x54
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fac:	2220      	movs	r2, #32
 8001fae:	2100      	movs	r1, #0
 8001fb0:	a80b      	add	r0, sp, #44	; 0x2c
 8001fb2:	f000 fc11 	bl	80027d8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fb6:	2214      	movs	r2, #20
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001fb8:	2510      	movs	r5, #16
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fba:	2100      	movs	r1, #0
 8001fbc:	eb0d 0002 	add.w	r0, sp, r2
 8001fc0:	f000 fc0a 	bl	80027d8 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001fc4:	462a      	mov	r2, r5
 8001fc6:	2100      	movs	r1, #0
 8001fc8:	a801      	add	r0, sp, #4
 8001fca:	f000 fc05 	bl	80027d8 <memset>
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001fce:	2301      	movs	r3, #1
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001fd0:	2402      	movs	r4, #2
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001fd2:	e9cd 350e 	strd	r3, r5, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001fd6:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
	if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fda:	a80a      	add	r0, sp, #40	; 0x28
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001fdc:	940a      	str	r4, [sp, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fde:	9411      	str	r4, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001fe0:	9313      	str	r3, [sp, #76]	; 0x4c
	if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fe2:	f7ff fa81 	bl	80014e8 <HAL_RCC_OscConfig>
 8001fe6:	b108      	cbz	r0, 8001fec <SystemClock_Config+0x44>
		Error_Handler();
 8001fe8:	f7ff ffd0 	bl	8001f8c <Error_Handler>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 8001fec:	230f      	movs	r3, #15
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fee:	e9cd 3405 	strd	r3, r4, [sp, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ff2:	f44f 6380 	mov.w	r3, #1024	; 0x400
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ff6:	9007      	str	r0, [sp, #28]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ff8:	e9cd 3008 	strd	r3, r0, [sp, #32]
	if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ffc:	4621      	mov	r1, r4
 8001ffe:	a805      	add	r0, sp, #20
 8002000:	f7ff fc38 	bl	8001874 <HAL_RCC_ClockConfig>
 8002004:	2800      	cmp	r0, #0
 8002006:	d1ef      	bne.n	8001fe8 <SystemClock_Config+0x40>
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8002008:	f44f 4340 	mov.w	r3, #49152	; 0xc000
	if(HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800200c:	a801      	add	r0, sp, #4
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800200e:	9401      	str	r4, [sp, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8002010:	9303      	str	r3, [sp, #12]
	if(HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002012:	f7ff fcef 	bl	80019f4 <HAL_RCCEx_PeriphCLKConfig>
 8002016:	2800      	cmp	r0, #0
 8002018:	d1e6      	bne.n	8001fe8 <SystemClock_Config+0x40>
}
 800201a:	b015      	add	sp, #84	; 0x54
 800201c:	bd30      	pop	{r4, r5, pc}
	...

08002020 <HAL_ADC_ConvCpltCallback>:
	if(AdcHandle->Instance==hadc1.Instance)
 8002020:	4b0a      	ldr	r3, [pc, #40]	; (800204c <HAL_ADC_ConvCpltCallback+0x2c>)
 8002022:	6802      	ldr	r2, [r0, #0]
 8002024:	681b      	ldr	r3, [r3, #0]
{
 8002026:	b510      	push	{r4, lr}
	if(AdcHandle->Instance==hadc1.Instance)
 8002028:	429a      	cmp	r2, r3
 800202a:	d10d      	bne.n	8002048 <HAL_ADC_ConvCpltCallback+0x28>
		for(int i=0; i<ADC1_INPUTS_NUMB; i++)
 800202c:	4b08      	ldr	r3, [pc, #32]	; (8002050 <HAL_ADC_ConvCpltCallback+0x30>)
			adc1Values[i]=adc1Buffer[i];
 800202e:	4909      	ldr	r1, [pc, #36]	; (8002054 <HAL_ADC_ConvCpltCallback+0x34>)
 8002030:	681a      	ldr	r2, [r3, #0]
		for(int i=0; i<ADC1_INPUTS_NUMB; i++)
 8002032:	2300      	movs	r3, #0
			adc1Values[i]=adc1Buffer[i];
 8002034:	4808      	ldr	r0, [pc, #32]	; (8002058 <HAL_ADC_ConvCpltCallback+0x38>)
		for(int i=0; i<ADC1_INPUTS_NUMB; i++)
 8002036:	4293      	cmp	r3, r2
 8002038:	d100      	bne.n	800203c <HAL_ADC_ConvCpltCallback+0x1c>
}
 800203a:	bd10      	pop	{r4, pc}
			adc1Values[i]=adc1Buffer[i];
 800203c:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 8002040:	f841 4023 	str.w	r4, [r1, r3, lsl #2]
		for(int i=0; i<ADC1_INPUTS_NUMB; i++)
 8002044:	3301      	adds	r3, #1
 8002046:	e7f6      	b.n	8002036 <HAL_ADC_ConvCpltCallback+0x16>
		Error_Handler();
 8002048:	f7ff ffa0 	bl	8001f8c <Error_Handler>
 800204c:	2000013c 	.word	0x2000013c
 8002050:	0800fc08 	.word	0x0800fc08
 8002054:	200000b0 	.word	0x200000b0
 8002058:	200001b0 	.word	0x200001b0

0800205c <HAL_TIM_PeriodElapsedCallback>:
	if(htim->Instance == htim3.Instance)
 800205c:	4b1c      	ldr	r3, [pc, #112]	; (80020d0 <HAL_TIM_PeriodElapsedCallback+0x74>)
 800205e:	6802      	ldr	r2, [r0, #0]
 8002060:	681b      	ldr	r3, [r3, #0]
{
 8002062:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if(htim->Instance == htim3.Instance)
 8002066:	429a      	cmp	r2, r3
 8002068:	d12d      	bne.n	80020c6 <HAL_TIM_PeriodElapsedCallback+0x6a>
		if(ADC_ENABLES)
 800206a:	4b1a      	ldr	r3, [pc, #104]	; (80020d4 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	b363      	cbz	r3, 80020ca <HAL_TIM_PeriodElapsedCallback+0x6e>
			txData1[0]=0x00; txData1[1]=0x00; txData1[2]=0x00; txData1[3]=0x00; txData1[4]=0x00; txData1[5]=0x00; txData1[6]=0x00; txData1[7]=0x00;
 8002070:	4b19      	ldr	r3, [pc, #100]	; (80020d8 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002072:	2200      	movs	r2, #0
 8002074:	469e      	mov	lr, r3
			for(int i=0; i<ADC1_INPUTS_NUMB; i++) //this won't work if ADC1_INPUTS_NUMB > 8
 8002076:	4819      	ldr	r0, [pc, #100]	; (80020dc <HAL_TIM_PeriodElapsedCallback+0x80>)
				uint32_t data = adc1Values[i]*sensorAdjustment[i]+sensorAdjustmentB[i];
 8002078:	4c19      	ldr	r4, [pc, #100]	; (80020e0 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800207a:	4d1a      	ldr	r5, [pc, #104]	; (80020e4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800207c:	4e1a      	ldr	r6, [pc, #104]	; (80020e8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
					txData1[i]=data>>significantByteShift[i];
 800207e:	4f1b      	ldr	r7, [pc, #108]	; (80020ec <HAL_TIM_PeriodElapsedCallback+0x90>)
			txData1[0]=0x00; txData1[1]=0x00; txData1[2]=0x00; txData1[3]=0x00; txData1[4]=0x00; txData1[5]=0x00; txData1[6]=0x00; txData1[7]=0x00;
 8002080:	701a      	strb	r2, [r3, #0]
 8002082:	705a      	strb	r2, [r3, #1]
 8002084:	709a      	strb	r2, [r3, #2]
 8002086:	70da      	strb	r2, [r3, #3]
 8002088:	711a      	strb	r2, [r3, #4]
 800208a:	715a      	strb	r2, [r3, #5]
 800208c:	719a      	strb	r2, [r3, #6]
 800208e:	71da      	strb	r2, [r3, #7]
			for(int i=0; i<ADC1_INPUTS_NUMB; i++) //this won't work if ADC1_INPUTS_NUMB > 8
 8002090:	6801      	ldr	r1, [r0, #0]
 8002092:	4291      	cmp	r1, r2
 8002094:	d807      	bhi.n	80020a6 <HAL_TIM_PeriodElapsedCallback+0x4a>
}
 8002096:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			HAL_CAN_AddTxMessage(&hcan1, &txHeader1, txData1, &txMailbox1);
 800209a:	4b15      	ldr	r3, [pc, #84]	; (80020f0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 800209c:	4a0e      	ldr	r2, [pc, #56]	; (80020d8 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800209e:	4915      	ldr	r1, [pc, #84]	; (80020f4 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80020a0:	4815      	ldr	r0, [pc, #84]	; (80020f8 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80020a2:	f7fe bcc0 	b.w	8000a26 <HAL_CAN_AddTxMessage>
				uint32_t data = adc1Values[i]*sensorAdjustment[i]+sensorAdjustmentB[i];
 80020a6:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
 80020aa:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
 80020ae:	469c      	mov	ip, r3
 80020b0:	f856 3022 	ldr.w	r3, [r6, r2, lsl #2]
 80020b4:	fb0c 3101 	mla	r1, ip, r1, r3
					txData1[i]=data>>significantByteShift[i];
 80020b8:	f857 3022 	ldr.w	r3, [r7, r2, lsl #2]
 80020bc:	40d9      	lsrs	r1, r3
 80020be:	f80e 1002 	strb.w	r1, [lr, r2]
			for(int i=0; i<ADC1_INPUTS_NUMB; i++) //this won't work if ADC1_INPUTS_NUMB > 8
 80020c2:	3201      	adds	r2, #1
 80020c4:	e7e4      	b.n	8002090 <HAL_TIM_PeriodElapsedCallback+0x34>
		Error_Handler();
 80020c6:	f7ff ff61 	bl	8001f8c <Error_Handler>
}
 80020ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80020ce:	bf00      	nop
 80020d0:	200000f8 	.word	0x200000f8
 80020d4:	0800fc00 	.word	0x0800fc00
 80020d8:	200000f0 	.word	0x200000f0
 80020dc:	0800fc08 	.word	0x0800fc08
 80020e0:	200000b0 	.word	0x200000b0
 80020e4:	20000008 	.word	0x20000008
 80020e8:	20000028 	.word	0x20000028
 80020ec:	20000048 	.word	0x20000048
 80020f0:	20000138 	.word	0x20000138
 80020f4:	20000204 	.word	0x20000204
 80020f8:	200001dc 	.word	0x200001dc

080020fc <Flash_Write>:
{
 80020fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t pError = 0;
 8002100:	2300      	movs	r3, #0
{
 8002102:	4617      	mov	r7, r2
	pEraseInit.NbPages = 1;
 8002104:	2201      	movs	r2, #1
{
 8002106:	b086      	sub	sp, #24
 8002108:	4606      	mov	r6, r0
 800210a:	460d      	mov	r5, r1
	uint32_t pError = 0;
 800210c:	9301      	str	r3, [sp, #4]
	pEraseInit.PageAddress = Flash_Address;
 800210e:	9004      	str	r0, [sp, #16]
	pEraseInit.NbPages = 1;
 8002110:	9205      	str	r2, [sp, #20]
	pEraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 8002112:	9302      	str	r3, [sp, #8]
  __ASM volatile ("cpsid i" : : : "memory");
 8002114:	b672      	cpsid	i
	if(HAL_FLASH_Unlock() != HAL_OK)
 8002116:	f7fe fff7 	bl	8001108 <HAL_FLASH_Unlock>
 800211a:	b9e0      	cbnz	r0, 8002156 <Flash_Write+0x5a>
	while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0) { }
 800211c:	4b12      	ldr	r3, [pc, #72]	; (8002168 <Flash_Write+0x6c>)
 800211e:	68dc      	ldr	r4, [r3, #12]
 8002120:	f014 0401 	ands.w	r4, r4, #1
 8002124:	d1fb      	bne.n	800211e <Flash_Write+0x22>
	HAL_FLASHEx_Erase(&pEraseInit, &pError);
 8002126:	a901      	add	r1, sp, #4
 8002128:	a802      	add	r0, sp, #8
 800212a:	f7ff f8a7 	bl	800127c <HAL_FLASHEx_Erase>
		while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0) { }
 800212e:	f8df 8038 	ldr.w	r8, [pc, #56]	; 8002168 <Flash_Write+0x6c>
 8002132:	1b76      	subs	r6, r6, r5
	for(int i=0; i<Data_Words; i++)
 8002134:	42bc      	cmp	r4, r7
 8002136:	db06      	blt.n	8002146 <Flash_Write+0x4a>
	if(HAL_FLASH_Lock() != HAL_OK)
 8002138:	f7fe fff8 	bl	800112c <HAL_FLASH_Lock>
 800213c:	b958      	cbnz	r0, 8002156 <Flash_Write+0x5a>
  __ASM volatile ("cpsie i" : : : "memory");
 800213e:	b662      	cpsie	i
}
 8002140:	b006      	add	sp, #24
 8002142:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002146:	1971      	adds	r1, r6, r5
		if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Flash_Address+i*0x04, Flash_Data[i]) != HAL_OK)
 8002148:	2300      	movs	r3, #0
 800214a:	f855 2b04 	ldr.w	r2, [r5], #4
 800214e:	2002      	movs	r0, #2
 8002150:	f7ff f820 	bl	8001194 <HAL_FLASH_Program>
 8002154:	b110      	cbz	r0, 800215c <Flash_Write+0x60>
 8002156:	b662      	cpsie	i
		Error_Handler();
 8002158:	f7ff ff18 	bl	8001f8c <Error_Handler>
		while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0) { }
 800215c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8002160:	07db      	lsls	r3, r3, #31
 8002162:	d4fb      	bmi.n	800215c <Flash_Write+0x60>
	for(int i=0; i<Data_Words; i++)
 8002164:	3401      	adds	r4, #1
 8002166:	e7e5      	b.n	8002134 <Flash_Write+0x38>
 8002168:	40022000 	.word	0x40022000

0800216c <main>:
{
 800216c:	b580      	push	{r7, lr}
	return *(uint32_t*)Flash_Address;
 800216e:	4c93      	ldr	r4, [pc, #588]	; (80023bc <main+0x250>)
{
 8002170:	f5ad 6d87 	sub.w	sp, sp, #1080	; 0x438
	HAL_Init();
 8002174:	f7fe f80e 	bl	8000194 <HAL_Init>
	SystemClock_Config();
 8002178:	f7ff ff16 	bl	8001fa8 <SystemClock_Config>
	if(Flash_Read(FLASH_PAGE_63)==0xFFFFFFFF) //initialize the flash to avoid errors
 800217c:	6823      	ldr	r3, [r4, #0]
 800217e:	3301      	adds	r3, #1
 8002180:	d117      	bne.n	80021b2 <main+0x46>
		uint32_t data[256] = {0};
 8002182:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002186:	2100      	movs	r1, #0
 8002188:	a80e      	add	r0, sp, #56	; 0x38
 800218a:	f000 fb25 	bl	80027d8 <memset>
		data[ADC_ENABLES_POS]=0x03;
 800218e:	2303      	movs	r3, #3
 8002190:	930e      	str	r3, [sp, #56]	; 0x38
		data[ADC1_INPUTS_NUMB_POS]=2;
 8002192:	2302      	movs	r3, #2
 8002194:	9310      	str	r3, [sp, #64]	; 0x40
		data[ADC_SAMPLE_RATE_POS] = ADC_SAMPLETIME_239CYCLES_5;
 8002196:	2307      	movs	r3, #7
 8002198:	9313      	str	r3, [sp, #76]	; 0x4c
		data[CAN_ID_POS]=0x01;
 800219a:	2301      	movs	r3, #1
		data[MESSAGE_TIM_PERIOD_POS]=1000;
 800219c:	2504      	movs	r5, #4
		data[CAN_ID_POS]=0x01;
 800219e:	930f      	str	r3, [sp, #60]	; 0x3c
		data[MESSAGE_TIM_PERIOD_POS]=1000;
 80021a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
		Flash_Write(FLASH_PAGE_63, data, 6);
 80021a4:	2206      	movs	r2, #6
 80021a6:	a90e      	add	r1, sp, #56	; 0x38
 80021a8:	4620      	mov	r0, r4
		data[MESSAGE_TIM_PERIOD_POS]=1000;
 80021aa:	e9cd 5311 	strd	r5, r3, [sp, #68]	; 0x44
		Flash_Write(FLASH_PAGE_63, data, 6);
 80021ae:	f7ff ffa5 	bl	80020fc <Flash_Write>
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80021b2:	4c83      	ldr	r4, [pc, #524]	; (80023c0 <main+0x254>)
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021b4:	2210      	movs	r2, #16
 80021b6:	2100      	movs	r1, #0
 80021b8:	a80e      	add	r0, sp, #56	; 0x38
 80021ba:	f000 fb0d 	bl	80027d8 <memset>
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80021be:	69a3      	ldr	r3, [r4, #24]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 80021c0:	2200      	movs	r2, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80021c2:	f043 0304 	orr.w	r3, r3, #4
 80021c6:	61a3      	str	r3, [r4, #24]
 80021c8:	69a3      	ldr	r3, [r4, #24]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 80021ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80021ce:	f003 0304 	and.w	r3, r3, #4
 80021d2:	9302      	str	r3, [sp, #8]
 80021d4:	9b02      	ldr	r3, [sp, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80021d6:	69a3      	ldr	r3, [r4, #24]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 80021d8:	487a      	ldr	r0, [pc, #488]	; (80023c4 <main+0x258>)
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80021da:	f043 0308 	orr.w	r3, r3, #8
 80021de:	61a3      	str	r3, [r4, #24]
 80021e0:	69a3      	ldr	r3, [r4, #24]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021e2:	2601      	movs	r6, #1
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80021e4:	f003 0308 	and.w	r3, r3, #8
 80021e8:	9303      	str	r3, [sp, #12]
 80021ea:	9b03      	ldr	r3, [sp, #12]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80021ec:	69a3      	ldr	r3, [r4, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021ee:	2500      	movs	r5, #0
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80021f0:	f043 0310 	orr.w	r3, r3, #16
 80021f4:	61a3      	str	r3, [r4, #24]
 80021f6:	69a3      	ldr	r3, [r4, #24]
 80021f8:	f003 0310 	and.w	r3, r3, #16
 80021fc:	9304      	str	r3, [sp, #16]
 80021fe:	9b04      	ldr	r3, [sp, #16]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8002200:	f7ff f968 	bl	80014d4 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002204:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002208:	e9cd 360e 	strd	r3, r6, [sp, #56]	; 0x38
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800220c:	2303      	movs	r3, #3
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800220e:	a90e      	add	r1, sp, #56	; 0x38
 8002210:	486c      	ldr	r0, [pc, #432]	; (80023c4 <main+0x258>)
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002212:	e9cd 5310 	strd	r5, r3, [sp, #64]	; 0x40
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002216:	f7ff f87d 	bl	8001314 <HAL_GPIO_Init>
	__HAL_RCC_DMA1_CLK_ENABLE();
 800221a:	6963      	ldr	r3, [r4, #20]
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800221c:	462a      	mov	r2, r5
	__HAL_RCC_DMA1_CLK_ENABLE();
 800221e:	4333      	orrs	r3, r6
 8002220:	6163      	str	r3, [r4, #20]
 8002222:	6963      	ldr	r3, [r4, #20]
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002224:	4629      	mov	r1, r5
	__HAL_RCC_DMA1_CLK_ENABLE();
 8002226:	4033      	ands	r3, r6
 8002228:	9301      	str	r3, [sp, #4]
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800222a:	200b      	movs	r0, #11
	__HAL_RCC_DMA1_CLK_ENABLE();
 800222c:	9b01      	ldr	r3, [sp, #4]
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800222e:	f7fe fdeb 	bl	8000e08 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002232:	200b      	movs	r0, #11
 8002234:	f7fe fe1c 	bl	8000e70 <HAL_NVIC_EnableIRQ>
	hadc1.Instance = ADC1;
 8002238:	4863      	ldr	r0, [pc, #396]	; (80023c8 <main+0x25c>)
 800223a:	4b64      	ldr	r3, [pc, #400]	; (80023cc <main+0x260>)
	ADC_ChannelConfTypeDef sConfig = {0};
 800223c:	e9cd 5507 	strd	r5, r5, [sp, #28]
	hadc1.Instance = ADC1;
 8002240:	6003      	str	r3, [r0, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002242:	f44f 7380 	mov.w	r3, #256	; 0x100
	hadc1.Init.ContinuousConvMode = ENABLE;
 8002246:	e9c0 3602 	strd	r3, r6, [r0, #8]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800224a:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
	hadc1.Init.NbrOfConversion = ADC1_INPUTS_NUMB;
 800224e:	4e60      	ldr	r6, [pc, #384]	; (80023d0 <main+0x264>)
	ADC_ChannelConfTypeDef sConfig = {0};
 8002250:	9509      	str	r5, [sp, #36]	; 0x24
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002252:	6145      	str	r5, [r0, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002254:	61c3      	str	r3, [r0, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002256:	6045      	str	r5, [r0, #4]
	hadc1.Init.NbrOfConversion = ADC1_INPUTS_NUMB;
 8002258:	6833      	ldr	r3, [r6, #0]
 800225a:	6103      	str	r3, [r0, #16]
	if(HAL_ADC_Init(&hadc1) != HAL_OK)
 800225c:	f7fe f9e8 	bl	8000630 <HAL_ADC_Init>
 8002260:	b108      	cbz	r0, 8002266 <main+0xfa>
		Error_Handler();
 8002262:	f7ff fe93 	bl	8001f8c <Error_Handler>
	int j=0;
 8002266:	4604      	mov	r4, r0
	for(int i=0; i<ADC1_INPUTS_NUMB_MAX; i++)
 8002268:	4605      	mov	r5, r0
	sConfig.SamplingTime = ADC_SAMPLE_RATE;
 800226a:	4b5a      	ldr	r3, [pc, #360]	; (80023d4 <main+0x268>)
		if((ADC_ENABLES&(1<<i)))
 800226c:	4f53      	ldr	r7, [pc, #332]	; (80023bc <main+0x250>)
	sConfig.SamplingTime = ADC_SAMPLE_RATE;
 800226e:	681b      	ldr	r3, [r3, #0]
			sConfig.Channel=adc_channels[i];
 8002270:	f8df 8184 	ldr.w	r8, [pc, #388]	; 80023f8 <main+0x28c>
			sConfig.Rank=adc_ranks[j];
 8002274:	f8df 9184 	ldr.w	r9, [pc, #388]	; 80023fc <main+0x290>
	sConfig.SamplingTime = ADC_SAMPLE_RATE;
 8002278:	9309      	str	r3, [sp, #36]	; 0x24
		if((ADC_ENABLES&(1<<i)))
 800227a:	2301      	movs	r3, #1
 800227c:	683a      	ldr	r2, [r7, #0]
 800227e:	40ab      	lsls	r3, r5
 8002280:	4213      	tst	r3, r2
 8002282:	d00c      	beq.n	800229e <main+0x132>
			sConfig.Channel=adc_channels[i];
 8002284:	f858 3025 	ldr.w	r3, [r8, r5, lsl #2]
			if(HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002288:	a907      	add	r1, sp, #28
			sConfig.Channel=adc_channels[i];
 800228a:	9307      	str	r3, [sp, #28]
			sConfig.Rank=adc_ranks[j];
 800228c:	f859 3024 	ldr.w	r3, [r9, r4, lsl #2]
			if(HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002290:	484d      	ldr	r0, [pc, #308]	; (80023c8 <main+0x25c>)
			sConfig.Rank=adc_ranks[j];
 8002292:	9308      	str	r3, [sp, #32]
			if(HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002294:	f7fe f866 	bl	8000364 <HAL_ADC_ConfigChannel>
 8002298:	2800      	cmp	r0, #0
 800229a:	d1e2      	bne.n	8002262 <main+0xf6>
			j++;
 800229c:	3401      	adds	r4, #1
	for(int i=0; i<ADC1_INPUTS_NUMB_MAX; i++)
 800229e:	3501      	adds	r5, #1
 80022a0:	2d09      	cmp	r5, #9
 80022a2:	d1ea      	bne.n	800227a <main+0x10e>
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022a4:	2210      	movs	r2, #16
 80022a6:	2100      	movs	r1, #0
 80022a8:	a80a      	add	r0, sp, #40	; 0x28
 80022aa:	f000 fa95 	bl	80027d8 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022ae:	2300      	movs	r3, #0
	htim3.Init.Prescaler = 6399;
 80022b0:	f641 02ff 	movw	r2, #6399	; 0x18ff
	htim3.Instance = TIM3;
 80022b4:	4d48      	ldr	r5, [pc, #288]	; (80023d8 <main+0x26c>)
	htim3.Init.Prescaler = 6399;
 80022b6:	f8df e148 	ldr.w	lr, [pc, #328]	; 8002400 <main+0x294>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022ba:	e9cd 3305 	strd	r3, r3, [sp, #20]
	htim3.Init.Prescaler = 6399;
 80022be:	e9c5 e200 	strd	lr, r2, [r5]
	htim3.Init.Period = MESSAGE_TIM_PERIOD;
 80022c2:	4a46      	ldr	r2, [pc, #280]	; (80023dc <main+0x270>)
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022c4:	60ab      	str	r3, [r5, #8]
	htim3.Init.Period = MESSAGE_TIM_PERIOD;
 80022c6:	6812      	ldr	r2, [r2, #0]
	if(HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80022c8:	4628      	mov	r0, r5
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022ca:	e9c5 2303 	strd	r2, r3, [r5, #12]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022ce:	61ab      	str	r3, [r5, #24]
	if(HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80022d0:	f7ff fe1e 	bl	8001f10 <HAL_TIM_Base_Init>
 80022d4:	2800      	cmp	r0, #0
 80022d6:	d1c4      	bne.n	8002262 <main+0xf6>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	if(HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80022dc:	a90a      	add	r1, sp, #40	; 0x28
 80022de:	4628      	mov	r0, r5
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022e0:	930a      	str	r3, [sp, #40]	; 0x28
	if(HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80022e2:	f7ff fc7e 	bl	8001be2 <HAL_TIM_ConfigClockSource>
 80022e6:	2800      	cmp	r0, #0
 80022e8:	d1bb      	bne.n	8002262 <main+0xf6>
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022ea:	e9cd 0005 	strd	r0, r0, [sp, #20]
	if(HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80022ee:	a905      	add	r1, sp, #20
 80022f0:	4628      	mov	r0, r5
 80022f2:	f7ff fe27 	bl	8001f44 <HAL_TIMEx_MasterConfigSynchronization>
 80022f6:	2800      	cmp	r0, #0
 80022f8:	d1b3      	bne.n	8002262 <main+0xf6>
	hcan1.Init.Prescaler = 2;
 80022fa:	2702      	movs	r7, #2
	hcan1.Instance = CAN1;
 80022fc:	4c38      	ldr	r4, [pc, #224]	; (80023e0 <main+0x274>)
	hcan1.Init.Prescaler = 2;
 80022fe:	4b39      	ldr	r3, [pc, #228]	; (80023e4 <main+0x278>)
	hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8002300:	f44f 2c40 	mov.w	ip, #786432	; 0xc0000
	hcan1.Init.Prescaler = 2;
 8002304:	e9c4 3700 	strd	r3, r7, [r4]
	hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8002308:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800230c:	60e0      	str	r0, [r4, #12]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 800230e:	60a0      	str	r0, [r4, #8]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 8002310:	7620      	strb	r0, [r4, #24]
	hcan1.Init.AutoBusOff = DISABLE;
 8002312:	7660      	strb	r0, [r4, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 8002314:	76a0      	strb	r0, [r4, #26]
	hcan1.Init.AutoRetransmission = DISABLE;
 8002316:	76e0      	strb	r0, [r4, #27]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 8002318:	7760      	strb	r0, [r4, #29]
	if(HAL_CAN_Init(&hcan1) != HAL_OK)
 800231a:	4620      	mov	r0, r4
	hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 800231c:	e9c4 c304 	strd	ip, r3, [r4, #16]
	if(HAL_CAN_Init(&hcan1) != HAL_OK)
 8002320:	f7fe fa6f 	bl	8000802 <HAL_CAN_Init>
 8002324:	2800      	cmp	r0, #0
 8002326:	d19c      	bne.n	8002262 <main+0xf6>
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8002328:	2301      	movs	r3, #1
	sFilterConfig.FilterIdHigh = 0xFFE0; //0x0000;
 800232a:	f64f 72e0 	movw	r2, #65504	; 0xffe0
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800232e:	9315      	str	r3, [sp, #84]	; 0x54
	sFilterConfig.FilterActivation = ENABLE;
 8002330:	9316      	str	r3, [sp, #88]	; 0x58
	sFilterConfig.SlaveStartFilterBank = 14;
 8002332:	230e      	movs	r3, #14
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8002334:	e9cd 0013 	strd	r0, r0, [sp, #76]	; 0x4c
	sFilterConfig.FilterIdLow = 0x0000;
 8002338:	e9cd 200e 	strd	r2, r0, [sp, #56]	; 0x38
	sFilterConfig.FilterMaskIdLow = 0x0000;
 800233c:	e9cd 2010 	strd	r2, r0, [sp, #64]	; 0x40
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8002340:	9012      	str	r0, [sp, #72]	; 0x48
	if(HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 8002342:	a90e      	add	r1, sp, #56	; 0x38
 8002344:	4620      	mov	r0, r4
	sFilterConfig.SlaveStartFilterBank = 14;
 8002346:	9317      	str	r3, [sp, #92]	; 0x5c
	if(HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 8002348:	f7fe fad6 	bl	80008f8 <HAL_CAN_ConfigFilter>
 800234c:	2800      	cmp	r0, #0
 800234e:	d188      	bne.n	8002262 <main+0xf6>
	if(HAL_ADCEx_Calibration_Start(&hadc1) != HAL_OK)
 8002350:	481d      	ldr	r0, [pc, #116]	; (80023c8 <main+0x25c>)
 8002352:	f7fe f9ed 	bl	8000730 <HAL_ADCEx_Calibration_Start>
 8002356:	2800      	cmp	r0, #0
 8002358:	d183      	bne.n	8002262 <main+0xf6>
	if(HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc1Buffer, ADC1_INPUTS_NUMB) != HAL_OK)
 800235a:	6832      	ldr	r2, [r6, #0]
 800235c:	4922      	ldr	r1, [pc, #136]	; (80023e8 <main+0x27c>)
 800235e:	481a      	ldr	r0, [pc, #104]	; (80023c8 <main+0x25c>)
 8002360:	f7fe f8b6 	bl	80004d0 <HAL_ADC_Start_DMA>
 8002364:	2800      	cmp	r0, #0
 8002366:	f47f af7c 	bne.w	8002262 <main+0xf6>
	HAL_TIM_Base_Start_IT(&htim3);
 800236a:	4628      	mov	r0, r5
 800236c:	f7ff fc2e 	bl	8001bcc <HAL_TIM_Base_Start_IT>
	if(HAL_CAN_Start(&hcan1) != HAL_OK)
 8002370:	4620      	mov	r0, r4
 8002372:	f7fe fb2d 	bl	80009d0 <HAL_CAN_Start>
 8002376:	2800      	cmp	r0, #0
 8002378:	f47f af73 	bne.w	8002262 <main+0xf6>
	if(HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 800237c:	4639      	mov	r1, r7
 800237e:	4620      	mov	r0, r4
 8002380:	f7fe fc14 	bl	8000bac <HAL_CAN_ActivateNotification>
 8002384:	2800      	cmp	r0, #0
 8002386:	f47f af6c 	bne.w	8002262 <main+0xf6>
	txHeader1.StdId = CAN_ID;
 800238a:	4b18      	ldr	r3, [pc, #96]	; (80023ec <main+0x280>)
	txHeader1.DLC = CAN_DLC;
 800238c:	4918      	ldr	r1, [pc, #96]	; (80023f0 <main+0x284>)
	txHeader1.StdId = CAN_ID;
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	4b18      	ldr	r3, [pc, #96]	; (80023f4 <main+0x288>)
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8002392:	4d0c      	ldr	r5, [pc, #48]	; (80023c4 <main+0x258>)
	txHeader1.StdId = CAN_ID;
 8002394:	601a      	str	r2, [r3, #0]
	txHeader1.ExtId = 0x01;
 8002396:	2201      	movs	r2, #1
 8002398:	605a      	str	r2, [r3, #4]
	txHeader1.RTR = CAN_RTR_DATA;
 800239a:	2200      	movs	r2, #0
	txHeader1.IDE = CAN_ID_STD;
 800239c:	e9c3 2202 	strd	r2, r2, [r3, #8]
	txHeader1.DLC = CAN_DLC;
 80023a0:	6809      	ldr	r1, [r1, #0]
	return *(uint32_t*)Flash_Address;
 80023a2:	4c0e      	ldr	r4, [pc, #56]	; (80023dc <main+0x270>)
	txHeader1.DLC = CAN_DLC;
 80023a4:	6119      	str	r1, [r3, #16]
	txHeader1.TransmitGlobalTime = DISABLE;
 80023a6:	751a      	strb	r2, [r3, #20]
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80023a8:	4628      	mov	r0, r5
 80023aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80023ae:	f7ff f896 	bl	80014de <HAL_GPIO_TogglePin>
		HAL_Delay(Flash_Read(FLASH_PAGE_63+(0x4*4)));
 80023b2:	6820      	ldr	r0, [r4, #0]
 80023b4:	f7fd ff12 	bl	80001dc <HAL_Delay>
 80023b8:	e7f6      	b.n	80023a8 <main+0x23c>
 80023ba:	bf00      	nop
 80023bc:	0800fc00 	.word	0x0800fc00
 80023c0:	40021000 	.word	0x40021000
 80023c4:	40011000 	.word	0x40011000
 80023c8:	2000013c 	.word	0x2000013c
 80023cc:	40012400 	.word	0x40012400
 80023d0:	0800fc08 	.word	0x0800fc08
 80023d4:	0800fc14 	.word	0x0800fc14
 80023d8:	200000f8 	.word	0x200000f8
 80023dc:	0800fc10 	.word	0x0800fc10
 80023e0:	200001dc 	.word	0x200001dc
 80023e4:	40006400 	.word	0x40006400
 80023e8:	200001b0 	.word	0x200001b0
 80023ec:	0800fc04 	.word	0x0800fc04
 80023f0:	0800fc0c 	.word	0x0800fc0c
 80023f4:	20000204 	.word	0x20000204
 80023f8:	08002820 	.word	0x08002820
 80023fc:	08002844 	.word	0x08002844
 8002400:	40000400 	.word	0x40000400

08002404 <HAL_CAN_RxFifo0MsgPendingCallback>:
{
 8002404:	b5f0      	push	{r4, r5, r6, r7, lr}
	if(HAL_CAN_GetRxMessage(CanHandle, CAN_RX_FIFO0, &rxHeader1, rxData1) != HAL_OK)
 8002406:	4c33      	ldr	r4, [pc, #204]	; (80024d4 <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 8002408:	4e33      	ldr	r6, [pc, #204]	; (80024d8 <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
{
 800240a:	f2ad 4d04 	subw	sp, sp, #1028	; 0x404
	if(HAL_CAN_GetRxMessage(CanHandle, CAN_RX_FIFO0, &rxHeader1, rxData1) != HAL_OK)
 800240e:	4623      	mov	r3, r4
 8002410:	4632      	mov	r2, r6
 8002412:	2100      	movs	r1, #0
{
 8002414:	4607      	mov	r7, r0
	if(HAL_CAN_GetRxMessage(CanHandle, CAN_RX_FIFO0, &rxHeader1, rxData1) != HAL_OK)
 8002416:	f7fe fb53 	bl	8000ac0 <HAL_CAN_GetRxMessage>
 800241a:	4605      	mov	r5, r0
 800241c:	b108      	cbz	r0, 8002422 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
		Error_Handler();
 800241e:	f7ff fdb5 	bl	8001f8c <Error_Handler>
	if(CanHandle->Instance==hcan1.Instance)
 8002422:	4b2e      	ldr	r3, [pc, #184]	; (80024dc <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 8002424:	683a      	ldr	r2, [r7, #0]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	429a      	cmp	r2, r3
 800242a:	d1f8      	bne.n	800241e <HAL_CAN_RxFifo0MsgPendingCallback+0x1a>
		if(rxHeader1.StdId==0x7ff)
 800242c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8002430:	6832      	ldr	r2, [r6, #0]
 8002432:	429a      	cmp	r2, r3
 8002434:	d12f      	bne.n	8002496 <HAL_CAN_RxFifo0MsgPendingCallback+0x92>
			uint32_t data[256] = {0};
 8002436:	4601      	mov	r1, r0
 8002438:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800243c:	4668      	mov	r0, sp
 800243e:	f000 f9cb 	bl	80027d8 <memset>
			data[ADC_ENABLES_POS]=rxData1[0];
 8002442:	4628      	mov	r0, r5
 8002444:	462a      	mov	r2, r5
			for(int i=0; i<8; i++) //8 is because we are sending a byte, even though max inputs is 9 everywhere else that will never be reached setting values this way
 8002446:	462b      	mov	r3, r5
			data[ADC_ENABLES_POS]=rxData1[0];
 8002448:	7821      	ldrb	r1, [r4, #0]
 800244a:	9100      	str	r1, [sp, #0]
				if(rxData1[0]&(1<<i))
 800244c:	fa41 f503 	asr.w	r5, r1, r3
 8002450:	07ed      	lsls	r5, r5, #31
			for(int i=0; i<8; i++) //8 is because we are sending a byte, even though max inputs is 9 everywhere else that will never be reached setting values this way
 8002452:	f103 0301 	add.w	r3, r3, #1
					data[ADC1_INPUTS_NUMB_POS]+=1;
 8002456:	bf44      	itt	mi
 8002458:	3201      	addmi	r2, #1
 800245a:	2001      	movmi	r0, #1
			for(int i=0; i<8; i++) //8 is because we are sending a byte, even though max inputs is 9 everywhere else that will never be reached setting values this way
 800245c:	2b08      	cmp	r3, #8
 800245e:	d1f5      	bne.n	800244c <HAL_CAN_RxFifo0MsgPendingCallback+0x48>
 8002460:	b100      	cbz	r0, 8002464 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>
 8002462:	9202      	str	r2, [sp, #8]
			if(rxData1[1]>((239-79)/2)+79) { data[ADC_SAMPLE_RATE_POS] = ADC_SAMPLETIME_239CYCLES_5; }
 8002464:	7863      	ldrb	r3, [r4, #1]
 8002466:	2b9f      	cmp	r3, #159	; 0x9f
 8002468:	d918      	bls.n	800249c <HAL_CAN_RxFifo0MsgPendingCallback+0x98>
 800246a:	2307      	movs	r3, #7
			else if(rxData1[1]>((7-1)/2)+1) { data[ADC_SAMPLE_RATE_POS] = ADC_SAMPLETIME_7CYCLES_5; }
 800246c:	9305      	str	r3, [sp, #20]
			data[CAN_ID_POS]=((rxData1[2]<<8)+rxData1[3]);
 800246e:	78a2      	ldrb	r2, [r4, #2]
 8002470:	78e3      	ldrb	r3, [r4, #3]
 8002472:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002476:	9301      	str	r3, [sp, #4]
			if(data[ADC1_INPUTS_NUMB_POS]<=4) {data[CAN_DLC_POS]=data[ADC1_INPUTS_NUMB_POS]*2;}
 8002478:	9b02      	ldr	r3, [sp, #8]
 800247a:	2b04      	cmp	r3, #4
 800247c:	d826      	bhi.n	80024cc <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>
 800247e:	005b      	lsls	r3, r3, #1
			data[MESSAGE_TIM_PERIOD_POS]=(rxData1[4]<<8)+rxData1[5];
 8002480:	7922      	ldrb	r2, [r4, #4]
			else {data[CAN_DLC_POS]=8;} //this shouldn't actually happen in this section
 8002482:	9303      	str	r3, [sp, #12]
			data[MESSAGE_TIM_PERIOD_POS]=(rxData1[4]<<8)+rxData1[5];
 8002484:	7963      	ldrb	r3, [r4, #5]
			Flash_Write(FLASH_PAGE_63, data, 6);
 8002486:	4669      	mov	r1, sp
			data[MESSAGE_TIM_PERIOD_POS]=(rxData1[4]<<8)+rxData1[5];
 8002488:	eb03 2302 	add.w	r3, r3, r2, lsl #8
			Flash_Write(FLASH_PAGE_63, data, 6);
 800248c:	4814      	ldr	r0, [pc, #80]	; (80024e0 <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 800248e:	2206      	movs	r2, #6
			data[MESSAGE_TIM_PERIOD_POS]=(rxData1[4]<<8)+rxData1[5];
 8002490:	9304      	str	r3, [sp, #16]
			Flash_Write(FLASH_PAGE_63, data, 6);
 8002492:	f7ff fe33 	bl	80020fc <Flash_Write>
}
 8002496:	f20d 4d04 	addw	sp, sp, #1028	; 0x404
 800249a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			else if(rxData1[1]>((79-55)/2)+55) { data[ADC_SAMPLE_RATE_POS] = ADC_SAMPLETIME_71CYCLES_5; }
 800249c:	2b43      	cmp	r3, #67	; 0x43
 800249e:	d901      	bls.n	80024a4 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>
 80024a0:	2306      	movs	r3, #6
 80024a2:	e7e3      	b.n	800246c <HAL_CAN_RxFifo0MsgPendingCallback+0x68>
			else if(rxData1[1]>((55-41)/2)+41) { data[ADC_SAMPLE_RATE_POS] = ADC_SAMPLETIME_55CYCLES_5; }
 80024a4:	2b30      	cmp	r3, #48	; 0x30
 80024a6:	d901      	bls.n	80024ac <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>
 80024a8:	2305      	movs	r3, #5
 80024aa:	e7df      	b.n	800246c <HAL_CAN_RxFifo0MsgPendingCallback+0x68>
			else if(rxData1[1]>((41-28)/2)+28) { data[ADC_SAMPLE_RATE_POS] = ADC_SAMPLETIME_41CYCLES_5; }
 80024ac:	2b22      	cmp	r3, #34	; 0x22
 80024ae:	d901      	bls.n	80024b4 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>
 80024b0:	2304      	movs	r3, #4
 80024b2:	e7db      	b.n	800246c <HAL_CAN_RxFifo0MsgPendingCallback+0x68>
			else if(rxData1[1]>((28-13)/2)+13) { data[ADC_SAMPLE_RATE_POS] = ADC_SAMPLETIME_28CYCLES_5; }
 80024b4:	2b14      	cmp	r3, #20
 80024b6:	d901      	bls.n	80024bc <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>
 80024b8:	2303      	movs	r3, #3
 80024ba:	e7d7      	b.n	800246c <HAL_CAN_RxFifo0MsgPendingCallback+0x68>
			else if(rxData1[1]>((13-7)/2)+7) { data[ADC_SAMPLE_RATE_POS] = ADC_SAMPLETIME_13CYCLES_5; }
 80024bc:	2b0a      	cmp	r3, #10
 80024be:	d901      	bls.n	80024c4 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>
 80024c0:	2302      	movs	r3, #2
 80024c2:	e7d3      	b.n	800246c <HAL_CAN_RxFifo0MsgPendingCallback+0x68>
			else if(rxData1[1]>((7-1)/2)+1) { data[ADC_SAMPLE_RATE_POS] = ADC_SAMPLETIME_7CYCLES_5; }
 80024c4:	2b04      	cmp	r3, #4
 80024c6:	d9d2      	bls.n	800246e <HAL_CAN_RxFifo0MsgPendingCallback+0x6a>
 80024c8:	2301      	movs	r3, #1
 80024ca:	e7cf      	b.n	800246c <HAL_CAN_RxFifo0MsgPendingCallback+0x68>
			else if(data[ADC1_INPUTS_NUMB_POS]<=8) {data[CAN_DLC_POS]=data[ADC1_INPUTS_NUMB_POS];}
 80024cc:	2b08      	cmp	r3, #8
			else {data[CAN_DLC_POS]=8;} //this shouldn't actually happen in this section
 80024ce:	bf88      	it	hi
 80024d0:	2308      	movhi	r3, #8
 80024d2:	e7d5      	b.n	8002480 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>
 80024d4:	200001d4 	.word	0x200001d4
 80024d8:	200000d4 	.word	0x200000d4
 80024dc:	200001dc 	.word	0x200001dc
 80024e0:	0800fc00 	.word	0x0800fc00

080024e4 <HAL_MspInit>:
extern TIM_HandleTypeDef htim3;
extern CAN_HandleTypeDef hcan1;

void HAL_MspInit(void)
{
  __HAL_RCC_AFIO_CLK_ENABLE();
 80024e4:	4b0e      	ldr	r3, [pc, #56]	; (8002520 <HAL_MspInit+0x3c>)
{
 80024e6:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 80024e8:	699a      	ldr	r2, [r3, #24]
 80024ea:	f042 0201 	orr.w	r2, r2, #1
 80024ee:	619a      	str	r2, [r3, #24]
 80024f0:	699a      	ldr	r2, [r3, #24]
 80024f2:	f002 0201 	and.w	r2, r2, #1
 80024f6:	9200      	str	r2, [sp, #0]
 80024f8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024fa:	69da      	ldr	r2, [r3, #28]
 80024fc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002500:	61da      	str	r2, [r3, #28]
 8002502:	69db      	ldr	r3, [r3, #28]

  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002504:	4a07      	ldr	r2, [pc, #28]	; (8002524 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8002506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800250a:	9301      	str	r3, [sp, #4]
 800250c:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800250e:	6853      	ldr	r3, [r2, #4]
 8002510:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002514:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002518:	6053      	str	r3, [r2, #4]
}
 800251a:	b002      	add	sp, #8
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	40021000 	.word	0x40021000
 8002524:	40010000 	.word	0x40010000

08002528 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002528:	b570      	push	{r4, r5, r6, lr}
 800252a:	4605      	mov	r5, r0
 800252c:	b086      	sub	sp, #24
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800252e:	2210      	movs	r2, #16
 8002530:	2100      	movs	r1, #0
 8002532:	a802      	add	r0, sp, #8
 8002534:	f000 f950 	bl	80027d8 <memset>
	if(hadc->Instance==hadc1.Instance)
 8002538:	4b27      	ldr	r3, [pc, #156]	; (80025d8 <HAL_ADC_MspInit+0xb0>)
 800253a:	682a      	ldr	r2, [r5, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	429a      	cmp	r2, r3
 8002540:	d147      	bne.n	80025d2 <HAL_ADC_MspInit+0xaa>
	{
		__HAL_RCC_ADC1_CLK_ENABLE();
 8002542:	4b26      	ldr	r3, [pc, #152]	; (80025dc <HAL_ADC_MspInit+0xb4>)
		//__HAL_RCC_GPIOA_CLK_ENABLE();

		GPIO_InitStruct.Pin = 0;
		for(int i=0; i<ADC1_INPUTS_NUMB_MAX; i++)
		{
			if((ADC_ENABLES&(1<<i)))
 8002544:	2001      	movs	r0, #1
		__HAL_RCC_ADC1_CLK_ENABLE();
 8002546:	699a      	ldr	r2, [r3, #24]
			if((ADC_ENABLES&(1<<i)))
 8002548:	4925      	ldr	r1, [pc, #148]	; (80025e0 <HAL_ADC_MspInit+0xb8>)
		__HAL_RCC_ADC1_CLK_ENABLE();
 800254a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800254e:	619a      	str	r2, [r3, #24]
 8002550:	699b      	ldr	r3, [r3, #24]
			{
				GPIO_InitStruct.Pin |= adc1_pins[i];
 8002552:	4c24      	ldr	r4, [pc, #144]	; (80025e4 <HAL_ADC_MspInit+0xbc>)
		__HAL_RCC_ADC1_CLK_ENABLE();
 8002554:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002558:	9301      	str	r3, [sp, #4]
 800255a:	9b01      	ldr	r3, [sp, #4]
		for(int i=0; i<ADC1_INPUTS_NUMB_MAX; i++)
 800255c:	2300      	movs	r3, #0
			if((ADC_ENABLES&(1<<i)))
 800255e:	680e      	ldr	r6, [r1, #0]
 8002560:	fa00 f203 	lsl.w	r2, r0, r3
 8002564:	4232      	tst	r2, r6
				GPIO_InitStruct.Pin |= adc1_pins[i];
 8002566:	bf1c      	itt	ne
 8002568:	f854 6023 	ldrne.w	r6, [r4, r3, lsl #2]
 800256c:	9a02      	ldrne	r2, [sp, #8]
		for(int i=0; i<ADC1_INPUTS_NUMB_MAX; i++)
 800256e:	f103 0301 	add.w	r3, r3, #1
				GPIO_InitStruct.Pin |= adc1_pins[i];
 8002572:	bf1c      	itt	ne
 8002574:	4332      	orrne	r2, r6
 8002576:	9202      	strne	r2, [sp, #8]
		for(int i=0; i<ADC1_INPUTS_NUMB_MAX; i++)
 8002578:	2b09      	cmp	r3, #9
 800257a:	d1f0      	bne.n	800255e <HAL_ADC_MspInit+0x36>
			}
		}
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800257c:	2303      	movs	r3, #3
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800257e:	a902      	add	r1, sp, #8
 8002580:	4819      	ldr	r0, [pc, #100]	; (80025e8 <HAL_ADC_MspInit+0xc0>)
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002582:	9303      	str	r3, [sp, #12]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002584:	f7fe fec6 	bl	8001314 <HAL_GPIO_Init>

		hdma_adc1.Instance = DMA1_Channel1;
		hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002588:	2300      	movs	r3, #0
		hdma_adc1.Instance = DMA1_Channel1;
 800258a:	4c18      	ldr	r4, [pc, #96]	; (80025ec <HAL_ADC_MspInit+0xc4>)
		hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800258c:	4a18      	ldr	r2, [pc, #96]	; (80025f0 <HAL_ADC_MspInit+0xc8>)
		hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800258e:	60a3      	str	r3, [r4, #8]
		hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002590:	e9c4 2300 	strd	r2, r3, [r4]
		hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
		hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002594:	2180      	movs	r1, #128	; 0x80
 8002596:	f44f 7300 	mov.w	r3, #512	; 0x200
		hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
		hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800259a:	f44f 6000 	mov.w	r0, #2048	; 0x800
		hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800259e:	e9c4 1303 	strd	r1, r3, [r4, #12]
		hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80025a2:	2320      	movs	r3, #32
 80025a4:	e9c4 0305 	strd	r0, r3, [r4, #20]
		hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80025a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
		if(HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80025ac:	4620      	mov	r0, r4
		hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80025ae:	61e3      	str	r3, [r4, #28]
		if(HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80025b0:	f7fe fc80 	bl	8000eb4 <HAL_DMA_Init>
 80025b4:	b108      	cbz	r0, 80025ba <HAL_ADC_MspInit+0x92>
		{
			Error_Handler();
 80025b6:	f7ff fce9 	bl	8001f8c <Error_Handler>
		}

		__HAL_LINKDMA(hadc, DMA_Handle, hdma_adc1);
		HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80025ba:	2200      	movs	r2, #0
		__HAL_LINKDMA(hadc, DMA_Handle, hdma_adc1);
 80025bc:	622c      	str	r4, [r5, #32]
		HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80025be:	2012      	movs	r0, #18
 80025c0:	4611      	mov	r1, r2
		__HAL_LINKDMA(hadc, DMA_Handle, hdma_adc1);
 80025c2:	6265      	str	r5, [r4, #36]	; 0x24
		HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80025c4:	f7fe fc20 	bl	8000e08 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80025c8:	2012      	movs	r0, #18
 80025ca:	f7fe fc51 	bl	8000e70 <HAL_NVIC_EnableIRQ>
	}
	else
	{
		Error_Handler();
	}
}
 80025ce:	b006      	add	sp, #24
 80025d0:	bd70      	pop	{r4, r5, r6, pc}
		Error_Handler();
 80025d2:	f7ff fcdb 	bl	8001f8c <Error_Handler>
}
 80025d6:	e7fa      	b.n	80025ce <HAL_ADC_MspInit+0xa6>
 80025d8:	2000013c 	.word	0x2000013c
 80025dc:	40021000 	.word	0x40021000
 80025e0:	0800fc00 	.word	0x0800fc00
 80025e4:	08002868 	.word	0x08002868
 80025e8:	40010800 	.word	0x40010800
 80025ec:	2000016c 	.word	0x2000016c
 80025f0:	40020008 	.word	0x40020008

080025f4 <HAL_TIM_Base_MspInit>:
	}
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
	if(htim_base->Instance==htim3.Instance)
 80025f4:	4b0f      	ldr	r3, [pc, #60]	; (8002634 <HAL_TIM_Base_MspInit+0x40>)
{
 80025f6:	b507      	push	{r0, r1, r2, lr}
	if(htim_base->Instance==htim3.Instance)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	6802      	ldr	r2, [r0, #0]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d114      	bne.n	800262a <HAL_TIM_Base_MspInit+0x36>
	{
		__HAL_RCC_TIM3_CLK_ENABLE();
 8002600:	4b0d      	ldr	r3, [pc, #52]	; (8002638 <HAL_TIM_Base_MspInit+0x44>)

		HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002602:	201d      	movs	r0, #29
		__HAL_RCC_TIM3_CLK_ENABLE();
 8002604:	69da      	ldr	r2, [r3, #28]
 8002606:	f042 0202 	orr.w	r2, r2, #2
 800260a:	61da      	str	r2, [r3, #28]
		HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800260c:	2200      	movs	r2, #0
		__HAL_RCC_TIM3_CLK_ENABLE();
 800260e:	69db      	ldr	r3, [r3, #28]
		HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002610:	4611      	mov	r1, r2
		__HAL_RCC_TIM3_CLK_ENABLE();
 8002612:	f003 0302 	and.w	r3, r3, #2
 8002616:	9301      	str	r3, [sp, #4]
 8002618:	9b01      	ldr	r3, [sp, #4]
		HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800261a:	f7fe fbf5 	bl	8000e08 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800261e:	201d      	movs	r0, #29
	}
	else
	{
		Error_Handler();
	}
}
 8002620:	b003      	add	sp, #12
 8002622:	f85d eb04 	ldr.w	lr, [sp], #4
		HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002626:	f7fe bc23 	b.w	8000e70 <HAL_NVIC_EnableIRQ>
}
 800262a:	b003      	add	sp, #12
 800262c:	f85d eb04 	ldr.w	lr, [sp], #4
		Error_Handler();
 8002630:	f7ff bcac 	b.w	8001f8c <Error_Handler>
 8002634:	200000f8 	.word	0x200000f8
 8002638:	40021000 	.word	0x40021000

0800263c <HAL_CAN_MspInit>:
		Error_Handler();
	}
}

void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800263c:	b510      	push	{r4, lr}
 800263e:	4604      	mov	r4, r0
 8002640:	b086      	sub	sp, #24
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002642:	2210      	movs	r2, #16
 8002644:	2100      	movs	r1, #0
 8002646:	a802      	add	r0, sp, #8
 8002648:	f000 f8c6 	bl	80027d8 <memset>

	if(hcan->Instance==hcan1.Instance)
 800264c:	4b16      	ldr	r3, [pc, #88]	; (80026a8 <HAL_CAN_MspInit+0x6c>)
 800264e:	6822      	ldr	r2, [r4, #0]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	429a      	cmp	r2, r3
 8002654:	d125      	bne.n	80026a2 <HAL_CAN_MspInit+0x66>
	{
		__HAL_RCC_CAN1_CLK_ENABLE();
 8002656:	4b15      	ldr	r3, [pc, #84]	; (80026ac <HAL_CAN_MspInit+0x70>)
		//__HAL_RCC_GPIOA_CLK_ENABLE();

		GPIO_InitStruct.Pin = GPIO_PIN_11;
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
		GPIO_InitStruct.Pull = GPIO_NOPULL;
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002658:	a902      	add	r1, sp, #8
		__HAL_RCC_CAN1_CLK_ENABLE();
 800265a:	69da      	ldr	r2, [r3, #28]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800265c:	4814      	ldr	r0, [pc, #80]	; (80026b0 <HAL_CAN_MspInit+0x74>)
		__HAL_RCC_CAN1_CLK_ENABLE();
 800265e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8002662:	61da      	str	r2, [r3, #28]
 8002664:	69db      	ldr	r3, [r3, #28]
 8002666:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800266a:	9301      	str	r3, [sp, #4]
 800266c:	9b01      	ldr	r3, [sp, #4]
		GPIO_InitStruct.Pin = GPIO_PIN_11;
 800266e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002672:	9302      	str	r3, [sp, #8]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002674:	f7fe fe4e 	bl	8001314 <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = GPIO_PIN_12;
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002678:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800267c:	2302      	movs	r3, #2
 800267e:	e9cd 2302 	strd	r2, r3, [sp, #8]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002682:	2303      	movs	r3, #3
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002684:	a902      	add	r1, sp, #8
 8002686:	480a      	ldr	r0, [pc, #40]	; (80026b0 <HAL_CAN_MspInit+0x74>)
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002688:	9305      	str	r3, [sp, #20]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800268a:	f7fe fe43 	bl	8001314 <HAL_GPIO_Init>

		HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800268e:	2200      	movs	r2, #0
 8002690:	2014      	movs	r0, #20
 8002692:	4611      	mov	r1, r2
 8002694:	f7fe fbb8 	bl	8000e08 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8002698:	2014      	movs	r0, #20
 800269a:	f7fe fbe9 	bl	8000e70 <HAL_NVIC_EnableIRQ>
	}
	else
	{
		Error_Handler();
	}
}
 800269e:	b006      	add	sp, #24
 80026a0:	bd10      	pop	{r4, pc}
		Error_Handler();
 80026a2:	f7ff fc73 	bl	8001f8c <Error_Handler>
}
 80026a6:	e7fa      	b.n	800269e <HAL_CAN_MspInit+0x62>
 80026a8:	200001dc 	.word	0x200001dc
 80026ac:	40021000 	.word	0x40021000
 80026b0:	40010800 	.word	0x40010800

080026b4 <NMI_Handler>:


void NMI_Handler(void)
{

}
 80026b4:	4770      	bx	lr

080026b6 <HardFault_Handler>:

void HardFault_Handler(void)
{
 80026b6:	e7fe      	b.n	80026b6 <HardFault_Handler>

080026b8 <MemManage_Handler>:

  }
}

void MemManage_Handler(void)
{
 80026b8:	e7fe      	b.n	80026b8 <MemManage_Handler>

080026ba <BusFault_Handler>:

  }
}

void BusFault_Handler(void)
{
 80026ba:	e7fe      	b.n	80026ba <BusFault_Handler>

080026bc <UsageFault_Handler>:

  }
}

void UsageFault_Handler(void)
{
 80026bc:	e7fe      	b.n	80026bc <UsageFault_Handler>

080026be <SVC_Handler>:
 80026be:	4770      	bx	lr

080026c0 <DebugMon_Handler>:
 80026c0:	4770      	bx	lr

080026c2 <PendSV_Handler>:
 80026c2:	4770      	bx	lr

080026c4 <SysTick_Handler>:

}

void SysTick_Handler(void)
{
	HAL_IncTick();
 80026c4:	f7fd bd78 	b.w	80001b8 <HAL_IncTick>

080026c8 <DMA1_Channel1_IRQHandler>:



void DMA1_Channel1_IRQHandler(void)
{
	HAL_DMA_IRQHandler(&hdma_adc1);
 80026c8:	4801      	ldr	r0, [pc, #4]	; (80026d0 <DMA1_Channel1_IRQHandler+0x8>)
 80026ca:	f7fe bc61 	b.w	8000f90 <HAL_DMA_IRQHandler>
 80026ce:	bf00      	nop
 80026d0:	2000016c 	.word	0x2000016c

080026d4 <ADC1_2_IRQHandler>:
}

void ADC1_2_IRQHandler(void)
{
	HAL_ADC_IRQHandler(&hadc1);
 80026d4:	4801      	ldr	r0, [pc, #4]	; (80026dc <ADC1_2_IRQHandler+0x8>)
 80026d6:	f7fd bdc1 	b.w	800025c <HAL_ADC_IRQHandler>
 80026da:	bf00      	nop
 80026dc:	2000013c 	.word	0x2000013c

080026e0 <TIM3_IRQHandler>:
}

void TIM3_IRQHandler(void)
{
	HAL_TIM_IRQHandler(&htim3);
 80026e0:	4801      	ldr	r0, [pc, #4]	; (80026e8 <TIM3_IRQHandler+0x8>)
 80026e2:	f7ff bb3b 	b.w	8001d5c <HAL_TIM_IRQHandler>
 80026e6:	bf00      	nop
 80026e8:	200000f8 	.word	0x200000f8

080026ec <USB_LP_CAN1_RX0_IRQHandler>:
}

void USB_LP_CAN1_RX0_IRQHandler(void)
{
	HAL_CAN_IRQHandler(&hcan1);
 80026ec:	4801      	ldr	r0, [pc, #4]	; (80026f4 <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 80026ee:	f7fe ba7a 	b.w	8000be6 <HAL_CAN_IRQHandler>
 80026f2:	bf00      	nop
 80026f4:	200001dc 	.word	0x200001dc

080026f8 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80026f8:	4b0f      	ldr	r3, [pc, #60]	; (8002738 <SystemInit+0x40>)
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	f042 0201 	orr.w	r2, r2, #1
 8002700:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002702:	6859      	ldr	r1, [r3, #4]
 8002704:	4a0d      	ldr	r2, [pc, #52]	; (800273c <SystemInit+0x44>)
 8002706:	400a      	ands	r2, r1
 8002708:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002710:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002714:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800271c:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800271e:	685a      	ldr	r2, [r3, #4]
 8002720:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8002724:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002726:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800272a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800272c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002730:	4b03      	ldr	r3, [pc, #12]	; (8002740 <SystemInit+0x48>)
 8002732:	609a      	str	r2, [r3, #8]
#endif 
}
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	40021000 	.word	0x40021000
 800273c:	f8ff0000 	.word	0xf8ff0000
 8002740:	e000ed00 	.word	0xe000ed00

08002744 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002744:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002746:	e003      	b.n	8002750 <LoopCopyDataInit>

08002748 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002748:	4b0b      	ldr	r3, [pc, #44]	; (8002778 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800274a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800274c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800274e:	3104      	adds	r1, #4

08002750 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002750:	480a      	ldr	r0, [pc, #40]	; (800277c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002752:	4b0b      	ldr	r3, [pc, #44]	; (8002780 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002754:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002756:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002758:	d3f6      	bcc.n	8002748 <CopyDataInit>
  ldr r2, =_sbss
 800275a:	4a0a      	ldr	r2, [pc, #40]	; (8002784 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800275c:	e002      	b.n	8002764 <LoopFillZerobss>

0800275e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800275e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002760:	f842 3b04 	str.w	r3, [r2], #4

08002764 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002764:	4b08      	ldr	r3, [pc, #32]	; (8002788 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002766:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002768:	d3f9      	bcc.n	800275e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800276a:	f7ff ffc5 	bl	80026f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800276e:	f000 f80f 	bl	8002790 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002772:	f7ff fcfb 	bl	800216c <main>
  bx lr
 8002776:	4770      	bx	lr
  ldr r3, =_sidata
 8002778:	080028ac 	.word	0x080028ac
  ldr r0, =_sdata
 800277c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002780:	2000006c 	.word	0x2000006c
  ldr r2, =_sbss
 8002784:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8002788:	2000021c 	.word	0x2000021c

0800278c <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800278c:	e7fe      	b.n	800278c <CAN1_RX1_IRQHandler>
	...

08002790 <__libc_init_array>:
 8002790:	b570      	push	{r4, r5, r6, lr}
 8002792:	2500      	movs	r5, #0
 8002794:	4e0c      	ldr	r6, [pc, #48]	; (80027c8 <__libc_init_array+0x38>)
 8002796:	4c0d      	ldr	r4, [pc, #52]	; (80027cc <__libc_init_array+0x3c>)
 8002798:	1ba4      	subs	r4, r4, r6
 800279a:	10a4      	asrs	r4, r4, #2
 800279c:	42a5      	cmp	r5, r4
 800279e:	d109      	bne.n	80027b4 <__libc_init_array+0x24>
 80027a0:	f000 f822 	bl	80027e8 <_init>
 80027a4:	2500      	movs	r5, #0
 80027a6:	4e0a      	ldr	r6, [pc, #40]	; (80027d0 <__libc_init_array+0x40>)
 80027a8:	4c0a      	ldr	r4, [pc, #40]	; (80027d4 <__libc_init_array+0x44>)
 80027aa:	1ba4      	subs	r4, r4, r6
 80027ac:	10a4      	asrs	r4, r4, #2
 80027ae:	42a5      	cmp	r5, r4
 80027b0:	d105      	bne.n	80027be <__libc_init_array+0x2e>
 80027b2:	bd70      	pop	{r4, r5, r6, pc}
 80027b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80027b8:	4798      	blx	r3
 80027ba:	3501      	adds	r5, #1
 80027bc:	e7ee      	b.n	800279c <__libc_init_array+0xc>
 80027be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80027c2:	4798      	blx	r3
 80027c4:	3501      	adds	r5, #1
 80027c6:	e7f2      	b.n	80027ae <__libc_init_array+0x1e>
 80027c8:	080028a4 	.word	0x080028a4
 80027cc:	080028a4 	.word	0x080028a4
 80027d0:	080028a4 	.word	0x080028a4
 80027d4:	080028a8 	.word	0x080028a8

080027d8 <memset>:
 80027d8:	4603      	mov	r3, r0
 80027da:	4402      	add	r2, r0
 80027dc:	4293      	cmp	r3, r2
 80027de:	d100      	bne.n	80027e2 <memset+0xa>
 80027e0:	4770      	bx	lr
 80027e2:	f803 1b01 	strb.w	r1, [r3], #1
 80027e6:	e7f9      	b.n	80027dc <memset+0x4>

080027e8 <_init>:
 80027e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027ea:	bf00      	nop
 80027ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027ee:	bc08      	pop	{r3}
 80027f0:	469e      	mov	lr, r3
 80027f2:	4770      	bx	lr

080027f4 <_fini>:
 80027f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027f6:	bf00      	nop
 80027f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027fa:	bc08      	pop	{r3}
 80027fc:	469e      	mov	lr, r3
 80027fe:	4770      	bx	lr
