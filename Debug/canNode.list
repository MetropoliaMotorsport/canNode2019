
canNode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002204  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002310  08002310  00012310  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002348  08002348  00012348  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800234c  0800234c  0001234c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08002350  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000174  2000000c  0800235c  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000180  0800235c  00020180  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001588f  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002c47  00000000  00000000  000358c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006a95  00000000  00000000  0003850b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000009a0  00000000  00000000  0003efa0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000c40  00000000  00000000  0003f940  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00016747  00000000  00000000  00040580  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000abc2  00000000  00000000  00056cc7  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00077c4e  00000000  00000000  00061889  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  000d94d7  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001c20  00000000  00000000  000d9554  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080022f8 	.word	0x080022f8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080022f8 	.word	0x080022f8

0800014c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800014c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800014e:	4b0e      	ldr	r3, [pc, #56]	; (8000188 <HAL_InitTick+0x3c>)
{
 8000150:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000152:	7818      	ldrb	r0, [r3, #0]
 8000154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000158:	fbb3 f3f0 	udiv	r3, r3, r0
 800015c:	4a0b      	ldr	r2, [pc, #44]	; (800018c <HAL_InitTick+0x40>)
 800015e:	6810      	ldr	r0, [r2, #0]
 8000160:	fbb0 f0f3 	udiv	r0, r0, r3
 8000164:	f000 fe24 	bl	8000db0 <HAL_SYSTICK_Config>
 8000168:	4604      	mov	r4, r0
 800016a:	b958      	cbnz	r0, 8000184 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800016c:	2d0f      	cmp	r5, #15
 800016e:	d809      	bhi.n	8000184 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000170:	4602      	mov	r2, r0
 8000172:	4629      	mov	r1, r5
 8000174:	f04f 30ff 	mov.w	r0, #4294967295
 8000178:	f000 fdda 	bl	8000d30 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800017c:	4620      	mov	r0, r4
 800017e:	4b04      	ldr	r3, [pc, #16]	; (8000190 <HAL_InitTick+0x44>)
 8000180:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000182:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000184:	2001      	movs	r0, #1
 8000186:	e7fc      	b.n	8000182 <HAL_InitTick+0x36>
 8000188:	20000000 	.word	0x20000000
 800018c:	20000008 	.word	0x20000008
 8000190:	20000004 	.word	0x20000004

08000194 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000194:	4a07      	ldr	r2, [pc, #28]	; (80001b4 <HAL_Init+0x20>)
{
 8000196:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000198:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800019a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800019c:	f043 0310 	orr.w	r3, r3, #16
 80001a0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001a2:	f000 fdb3 	bl	8000d0c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001a6:	2000      	movs	r0, #0
 80001a8:	f7ff ffd0 	bl	800014c <HAL_InitTick>
  HAL_MspInit();
 80001ac:	f001 ff36 	bl	800201c <HAL_MspInit>
}
 80001b0:	2000      	movs	r0, #0
 80001b2:	bd08      	pop	{r3, pc}
 80001b4:	40022000 	.word	0x40022000

080001b8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001b8:	4a03      	ldr	r2, [pc, #12]	; (80001c8 <HAL_IncTick+0x10>)
 80001ba:	4b04      	ldr	r3, [pc, #16]	; (80001cc <HAL_IncTick+0x14>)
 80001bc:	6811      	ldr	r1, [r2, #0]
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	440b      	add	r3, r1
 80001c2:	6013      	str	r3, [r2, #0]
}
 80001c4:	4770      	bx	lr
 80001c6:	bf00      	nop
 80001c8:	20000028 	.word	0x20000028
 80001cc:	20000000 	.word	0x20000000

080001d0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001d0:	4b01      	ldr	r3, [pc, #4]	; (80001d8 <HAL_GetTick+0x8>)
 80001d2:	6818      	ldr	r0, [r3, #0]
}
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	20000028 	.word	0x20000028

080001dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80001dc:	b538      	push	{r3, r4, r5, lr}
 80001de:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80001e0:	f7ff fff6 	bl	80001d0 <HAL_GetTick>
 80001e4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80001e6:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80001e8:	bf1e      	ittt	ne
 80001ea:	4b04      	ldrne	r3, [pc, #16]	; (80001fc <HAL_Delay+0x20>)
 80001ec:	781b      	ldrbne	r3, [r3, #0]
 80001ee:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80001f0:	f7ff ffee 	bl	80001d0 <HAL_GetTick>
 80001f4:	1b40      	subs	r0, r0, r5
 80001f6:	42a0      	cmp	r0, r4
 80001f8:	d3fa      	bcc.n	80001f0 <HAL_Delay+0x14>
  {
  }
}
 80001fa:	bd38      	pop	{r3, r4, r5, pc}
 80001fc:	20000000 	.word	0x20000000

08000200 <ADC_DMAConvCplt>:
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000200:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8000202:	b510      	push	{r4, lr}
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000204:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000206:	f012 0f50 	tst.w	r2, #80	; 0x50
 800020a:	d11b      	bne.n	8000244 <ADC_DMAConvCplt+0x44>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800020c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800020e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000212:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000214:	681a      	ldr	r2, [r3, #0]
 8000216:	6892      	ldr	r2, [r2, #8]
 8000218:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 800021c:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8000220:	d10c      	bne.n	800023c <ADC_DMAConvCplt+0x3c>
 8000222:	68da      	ldr	r2, [r3, #12]
 8000224:	b952      	cbnz	r2, 800023c <ADC_DMAConvCplt+0x3c>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000226:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000228:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800022c:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800022e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000230:	04d2      	lsls	r2, r2, #19
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000232:	bf5e      	ittt	pl
 8000234:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
 8000236:	f042 0201 	orrpl.w	r2, r2, #1
 800023a:	629a      	strpl	r2, [r3, #40]	; 0x28
      }
    }
    
    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc); 
 800023c:	4618      	mov	r0, r3
 800023e:	f001 fe77 	bl	8001f30 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8000242:	bd10      	pop	{r4, pc}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000244:	6a1b      	ldr	r3, [r3, #32]
}
 8000246:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800024a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800024c:	4718      	bx	r3

0800024e <HAL_ADC_ConvHalfCpltCallback>:
 800024e:	4770      	bx	lr

08000250 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8000250:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Half conversion callback */
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8000252:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8000254:	f7ff fffb 	bl	800024e <HAL_ADC_ConvHalfCpltCallback>
}
 8000258:	bd08      	pop	{r3, pc}

0800025a <HAL_ADC_LevelOutOfWindowCallback>:
 800025a:	4770      	bx	lr

0800025c <HAL_ADC_IRQHandler>:
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 800025c:	6803      	ldr	r3, [r0, #0]
{
 800025e:	b510      	push	{r4, lr}
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8000260:	685a      	ldr	r2, [r3, #4]
{
 8000262:	4604      	mov	r4, r0
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8000264:	0690      	lsls	r0, r2, #26
 8000266:	d527      	bpl.n	80002b8 <HAL_ADC_IRQHandler+0x5c>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8000268:	681a      	ldr	r2, [r3, #0]
 800026a:	0791      	lsls	r1, r2, #30
 800026c:	d524      	bpl.n	80002b8 <HAL_ADC_IRQHandler+0x5c>
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800026e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000270:	06d2      	lsls	r2, r2, #27
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000272:	bf5e      	ittt	pl
 8000274:	6aa2      	ldrpl	r2, [r4, #40]	; 0x28
 8000276:	f442 7200 	orrpl.w	r2, r2, #512	; 0x200
 800027a:	62a2      	strpl	r2, [r4, #40]	; 0x28
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800027c:	689a      	ldr	r2, [r3, #8]
 800027e:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8000282:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8000286:	d110      	bne.n	80002aa <HAL_ADC_IRQHandler+0x4e>
 8000288:	68e2      	ldr	r2, [r4, #12]
 800028a:	b972      	cbnz	r2, 80002aa <HAL_ADC_IRQHandler+0x4e>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800028c:	685a      	ldr	r2, [r3, #4]
 800028e:	f022 0220 	bic.w	r2, r2, #32
 8000292:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000294:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000296:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800029a:	62a3      	str	r3, [r4, #40]	; 0x28
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800029c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800029e:	04db      	lsls	r3, r3, #19
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80002a0:	bf5e      	ittt	pl
 80002a2:	6aa3      	ldrpl	r3, [r4, #40]	; 0x28
 80002a4:	f043 0301 	orrpl.w	r3, r3, #1
 80002a8:	62a3      	strpl	r3, [r4, #40]	; 0x28
      HAL_ADC_ConvCpltCallback(hadc);
 80002aa:	4620      	mov	r0, r4
 80002ac:	f001 fe40 	bl	8001f30 <HAL_ADC_ConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80002b0:	f06f 0212 	mvn.w	r2, #18
 80002b4:	6823      	ldr	r3, [r4, #0]
 80002b6:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 80002b8:	6823      	ldr	r3, [r4, #0]
 80002ba:	685a      	ldr	r2, [r3, #4]
 80002bc:	0610      	lsls	r0, r2, #24
 80002be:	d530      	bpl.n	8000322 <HAL_ADC_IRQHandler+0xc6>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 80002c0:	681a      	ldr	r2, [r3, #0]
 80002c2:	0751      	lsls	r1, r2, #29
 80002c4:	d52d      	bpl.n	8000322 <HAL_ADC_IRQHandler+0xc6>
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80002c6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80002c8:	06d2      	lsls	r2, r2, #27
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80002ca:	bf5e      	ittt	pl
 80002cc:	6aa2      	ldrpl	r2, [r4, #40]	; 0x28
 80002ce:	f442 5200 	orrpl.w	r2, r2, #8192	; 0x2000
 80002d2:	62a2      	strpl	r2, [r4, #40]	; 0x28
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80002d4:	689a      	ldr	r2, [r3, #8]
 80002d6:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
 80002da:	f5b2 4fe0 	cmp.w	r2, #28672	; 0x7000
 80002de:	d00a      	beq.n	80002f6 <HAL_ADC_IRQHandler+0x9a>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80002e0:	685a      	ldr	r2, [r3, #4]
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80002e2:	0550      	lsls	r0, r2, #21
 80002e4:	d416      	bmi.n	8000314 <HAL_ADC_IRQHandler+0xb8>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80002e6:	689a      	ldr	r2, [r3, #8]
 80002e8:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80002ec:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 80002f0:	d110      	bne.n	8000314 <HAL_ADC_IRQHandler+0xb8>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80002f2:	68e2      	ldr	r2, [r4, #12]
 80002f4:	b972      	cbnz	r2, 8000314 <HAL_ADC_IRQHandler+0xb8>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80002f6:	685a      	ldr	r2, [r3, #4]
 80002f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80002fc:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80002fe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000300:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000304:	62a3      	str	r3, [r4, #40]	; 0x28
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000306:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000308:	05d9      	lsls	r1, r3, #23
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800030a:	bf5e      	ittt	pl
 800030c:	6aa3      	ldrpl	r3, [r4, #40]	; 0x28
 800030e:	f043 0301 	orrpl.w	r3, r3, #1
 8000312:	62a3      	strpl	r3, [r4, #40]	; 0x28
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000314:	4620      	mov	r0, r4
 8000316:	f000 fa73 	bl	8000800 <HAL_ADCEx_InjectedConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800031a:	f06f 020c 	mvn.w	r2, #12
 800031e:	6823      	ldr	r3, [r4, #0]
 8000320:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8000322:	6823      	ldr	r3, [r4, #0]
 8000324:	685a      	ldr	r2, [r3, #4]
 8000326:	0652      	lsls	r2, r2, #25
 8000328:	d50d      	bpl.n	8000346 <HAL_ADC_IRQHandler+0xea>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	07db      	lsls	r3, r3, #31
 800032e:	d50a      	bpl.n	8000346 <HAL_ADC_IRQHandler+0xea>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000330:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000332:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000334:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000338:	62a3      	str	r3, [r4, #40]	; 0x28
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800033a:	f7ff ff8e 	bl	800025a <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800033e:	f06f 0201 	mvn.w	r2, #1
 8000342:	6823      	ldr	r3, [r4, #0]
 8000344:	601a      	str	r2, [r3, #0]
}
 8000346:	bd10      	pop	{r4, pc}

08000348 <HAL_ADC_ErrorCallback>:
 8000348:	4770      	bx	lr

0800034a <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800034a:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 800034c:	b508      	push	{r3, lr}
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800034e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000350:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000354:	6283      	str	r3, [r0, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8000356:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000358:	f043 0304 	orr.w	r3, r3, #4
 800035c:	62c3      	str	r3, [r0, #44]	; 0x2c
  
  /* Error callback */
  HAL_ADC_ErrorCallback(hadc); 
 800035e:	f7ff fff3 	bl	8000348 <HAL_ADC_ErrorCallback>
}
 8000362:	bd08      	pop	{r3, pc}

08000364 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0U;
 8000364:	2300      	movs	r3, #0
{ 
 8000366:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8000368:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800036a:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800036e:	2b01      	cmp	r3, #1
 8000370:	d06d      	beq.n	800044e <HAL_ADC_ConfigChannel+0xea>
 8000372:	2301      	movs	r3, #1
  if (sConfig->Rank < 7U)
 8000374:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 8000376:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 800037a:	2d06      	cmp	r5, #6
 800037c:	6802      	ldr	r2, [r0, #0]
 800037e:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8000382:	680c      	ldr	r4, [r1, #0]
 8000384:	d823      	bhi.n	80003ce <HAL_ADC_ConfigChannel+0x6a>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000386:	261f      	movs	r6, #31
 8000388:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800038a:	3b05      	subs	r3, #5
 800038c:	409e      	lsls	r6, r3
 800038e:	ea25 0506 	bic.w	r5, r5, r6
 8000392:	fa04 f303 	lsl.w	r3, r4, r3
 8000396:	432b      	orrs	r3, r5
 8000398:	6353      	str	r3, [r2, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800039a:	2c09      	cmp	r4, #9
 800039c:	688b      	ldr	r3, [r1, #8]
 800039e:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 80003a2:	f04f 0107 	mov.w	r1, #7
 80003a6:	d92a      	bls.n	80003fe <HAL_ADC_ConfigChannel+0x9a>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80003a8:	68d6      	ldr	r6, [r2, #12]
 80003aa:	3d1e      	subs	r5, #30
 80003ac:	40a9      	lsls	r1, r5
 80003ae:	ea26 0101 	bic.w	r1, r6, r1
 80003b2:	40ab      	lsls	r3, r5
 80003b4:	430b      	orrs	r3, r1
 80003b6:	60d3      	str	r3, [r2, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80003b8:	f1a4 0310 	sub.w	r3, r4, #16
 80003bc:	2b01      	cmp	r3, #1
 80003be:	d926      	bls.n	800040e <HAL_ADC_ConfigChannel+0xaa>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80003c0:	2300      	movs	r3, #0
  __HAL_UNLOCK(hadc);
 80003c2:	2200      	movs	r2, #0
 80003c4:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
}
 80003c8:	4618      	mov	r0, r3
 80003ca:	b002      	add	sp, #8
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 80003ce:	2d0c      	cmp	r5, #12
 80003d0:	f04f 051f 	mov.w	r5, #31
 80003d4:	d809      	bhi.n	80003ea <HAL_ADC_ConfigChannel+0x86>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80003d6:	6b16      	ldr	r6, [r2, #48]	; 0x30
 80003d8:	3b23      	subs	r3, #35	; 0x23
 80003da:	409d      	lsls	r5, r3
 80003dc:	ea26 0505 	bic.w	r5, r6, r5
 80003e0:	fa04 f303 	lsl.w	r3, r4, r3
 80003e4:	432b      	orrs	r3, r5
 80003e6:	6313      	str	r3, [r2, #48]	; 0x30
 80003e8:	e7d7      	b.n	800039a <HAL_ADC_ConfigChannel+0x36>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80003ea:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 80003ec:	3b41      	subs	r3, #65	; 0x41
 80003ee:	409d      	lsls	r5, r3
 80003f0:	ea26 0505 	bic.w	r5, r6, r5
 80003f4:	fa04 f303 	lsl.w	r3, r4, r3
 80003f8:	432b      	orrs	r3, r5
 80003fa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80003fc:	e7cd      	b.n	800039a <HAL_ADC_ConfigChannel+0x36>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80003fe:	6916      	ldr	r6, [r2, #16]
 8000400:	40a9      	lsls	r1, r5
 8000402:	ea26 0101 	bic.w	r1, r6, r1
 8000406:	40ab      	lsls	r3, r5
 8000408:	430b      	orrs	r3, r1
 800040a:	6113      	str	r3, [r2, #16]
 800040c:	e7d4      	b.n	80003b8 <HAL_ADC_ConfigChannel+0x54>
    if (hadc->Instance == ADC1)
 800040e:	4b11      	ldr	r3, [pc, #68]	; (8000454 <HAL_ADC_ConfigChannel+0xf0>)
 8000410:	429a      	cmp	r2, r3
 8000412:	d116      	bne.n	8000442 <HAL_ADC_ConfigChannel+0xde>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000414:	6893      	ldr	r3, [r2, #8]
 8000416:	021b      	lsls	r3, r3, #8
 8000418:	d4d2      	bmi.n	80003c0 <HAL_ADC_ConfigChannel+0x5c>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800041a:	6893      	ldr	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800041c:	2c10      	cmp	r4, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800041e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000422:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000424:	d1cc      	bne.n	80003c0 <HAL_ADC_ConfigChannel+0x5c>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000426:	4b0c      	ldr	r3, [pc, #48]	; (8000458 <HAL_ADC_ConfigChannel+0xf4>)
 8000428:	4a0c      	ldr	r2, [pc, #48]	; (800045c <HAL_ADC_ConfigChannel+0xf8>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	fbb3 f2f2 	udiv	r2, r3, r2
 8000430:	230a      	movs	r3, #10
 8000432:	4353      	muls	r3, r2
            wait_loop_index--;
 8000434:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8000436:	9b01      	ldr	r3, [sp, #4]
 8000438:	2b00      	cmp	r3, #0
 800043a:	d0c1      	beq.n	80003c0 <HAL_ADC_ConfigChannel+0x5c>
            wait_loop_index--;
 800043c:	9b01      	ldr	r3, [sp, #4]
 800043e:	3b01      	subs	r3, #1
 8000440:	e7f8      	b.n	8000434 <HAL_ADC_ConfigChannel+0xd0>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000442:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000444:	f043 0320 	orr.w	r3, r3, #32
 8000448:	6283      	str	r3, [r0, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 800044a:	2301      	movs	r3, #1
 800044c:	e7b9      	b.n	80003c2 <HAL_ADC_ConfigChannel+0x5e>
  __HAL_LOCK(hadc);
 800044e:	2302      	movs	r3, #2
 8000450:	e7ba      	b.n	80003c8 <HAL_ADC_ConfigChannel+0x64>
 8000452:	bf00      	nop
 8000454:	40012400 	.word	0x40012400
 8000458:	20000008 	.word	0x20000008
 800045c:	000f4240 	.word	0x000f4240

08000460 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0U;
 8000460:	2300      	movs	r3, #0
{
 8000462:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8000464:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000466:	6803      	ldr	r3, [r0, #0]
{
 8000468:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 800046a:	689a      	ldr	r2, [r3, #8]
 800046c:	07d2      	lsls	r2, r2, #31
 800046e:	d502      	bpl.n	8000476 <ADC_Enable+0x16>
  return HAL_OK;
 8000470:	2000      	movs	r0, #0
}
 8000472:	b002      	add	sp, #8
 8000474:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_ADC_ENABLE(hadc);
 8000476:	689a      	ldr	r2, [r3, #8]
 8000478:	f042 0201 	orr.w	r2, r2, #1
 800047c:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800047e:	4b12      	ldr	r3, [pc, #72]	; (80004c8 <ADC_Enable+0x68>)
 8000480:	4a12      	ldr	r2, [pc, #72]	; (80004cc <ADC_Enable+0x6c>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 8000488:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 800048a:	9b01      	ldr	r3, [sp, #4]
 800048c:	b9c3      	cbnz	r3, 80004c0 <ADC_Enable+0x60>
    tickstart = HAL_GetTick();
 800048e:	f7ff fe9f 	bl	80001d0 <HAL_GetTick>
 8000492:	4606      	mov	r6, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000494:	6823      	ldr	r3, [r4, #0]
 8000496:	689d      	ldr	r5, [r3, #8]
 8000498:	f015 0501 	ands.w	r5, r5, #1
 800049c:	d1e8      	bne.n	8000470 <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800049e:	f7ff fe97 	bl	80001d0 <HAL_GetTick>
 80004a2:	1b80      	subs	r0, r0, r6
 80004a4:	2802      	cmp	r0, #2
 80004a6:	d9f5      	bls.n	8000494 <ADC_Enable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80004a8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 80004aa:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80004ae:	f043 0310 	orr.w	r3, r3, #16
 80004b2:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80004b4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        __HAL_UNLOCK(hadc);
 80004b6:	2001      	movs	r0, #1
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80004b8:	f043 0301 	orr.w	r3, r3, #1
 80004bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80004be:	e7d8      	b.n	8000472 <ADC_Enable+0x12>
      wait_loop_index--;
 80004c0:	9b01      	ldr	r3, [sp, #4]
 80004c2:	3b01      	subs	r3, #1
 80004c4:	e7e0      	b.n	8000488 <ADC_Enable+0x28>
 80004c6:	bf00      	nop
 80004c8:	20000008 	.word	0x20000008
 80004cc:	000f4240 	.word	0x000f4240

080004d0 <HAL_ADC_Start_DMA>:
{
 80004d0:	e92d 41d8 	stmdb	sp!, {r3, r4, r6, r7, r8, lr}
 80004d4:	4690      	mov	r8, r2
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80004d6:	4b40      	ldr	r3, [pc, #256]	; (80005d8 <HAL_ADC_Start_DMA+0x108>)
 80004d8:	6802      	ldr	r2, [r0, #0]
{
 80004da:	4604      	mov	r4, r0
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80004dc:	429a      	cmp	r2, r3
{
 80004de:	460f      	mov	r7, r1
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80004e0:	d002      	beq.n	80004e8 <HAL_ADC_Start_DMA+0x18>
 80004e2:	493e      	ldr	r1, [pc, #248]	; (80005dc <HAL_ADC_Start_DMA+0x10c>)
 80004e4:	428a      	cmp	r2, r1
 80004e6:	d103      	bne.n	80004f0 <HAL_ADC_Start_DMA+0x20>
 80004e8:	685b      	ldr	r3, [r3, #4]
 80004ea:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 80004ee:	d16e      	bne.n	80005ce <HAL_ADC_Start_DMA+0xfe>
    __HAL_LOCK(hadc);
 80004f0:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80004f4:	2b01      	cmp	r3, #1
 80004f6:	d06c      	beq.n	80005d2 <HAL_ADC_Start_DMA+0x102>
 80004f8:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
 80004fa:	4620      	mov	r0, r4
    __HAL_LOCK(hadc);
 80004fc:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    tmp_hal_status = ADC_Enable(hadc);
 8000500:	f7ff ffae 	bl	8000460 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8000504:	4606      	mov	r6, r0
 8000506:	2800      	cmp	r0, #0
 8000508:	d15d      	bne.n	80005c6 <HAL_ADC_Start_DMA+0xf6>
      ADC_STATE_CLR_SET(hadc->State,
 800050a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800050c:	6821      	ldr	r1, [r4, #0]
      ADC_STATE_CLR_SET(hadc->State,
 800050e:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000512:	4b32      	ldr	r3, [pc, #200]	; (80005dc <HAL_ADC_Start_DMA+0x10c>)
      ADC_STATE_CLR_SET(hadc->State,
 8000514:	f020 0001 	bic.w	r0, r0, #1
 8000518:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800051c:	4299      	cmp	r1, r3
      ADC_STATE_CLR_SET(hadc->State,
 800051e:	62a0      	str	r0, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000520:	d104      	bne.n	800052c <HAL_ADC_Start_DMA+0x5c>
 8000522:	4a2d      	ldr	r2, [pc, #180]	; (80005d8 <HAL_ADC_Start_DMA+0x108>)
 8000524:	6853      	ldr	r3, [r2, #4]
 8000526:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 800052a:	d13e      	bne.n	80005aa <HAL_ADC_Start_DMA+0xda>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800052c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800052e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000532:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000534:	684b      	ldr	r3, [r1, #4]
 8000536:	055a      	lsls	r2, r3, #21
 8000538:	d505      	bpl.n	8000546 <HAL_ADC_Start_DMA+0x76>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800053a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800053c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000540:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000544:	62a3      	str	r3, [r4, #40]	; 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000546:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000548:	6a20      	ldr	r0, [r4, #32]
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800054a:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800054e:	bf18      	it	ne
 8000550:	6ae3      	ldrne	r3, [r4, #44]	; 0x2c
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000552:	463a      	mov	r2, r7
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000554:	bf18      	it	ne
 8000556:	f023 0306 	bicne.w	r3, r3, #6
        ADC_CLEAR_ERRORCODE(hadc);
 800055a:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_UNLOCK(hadc);
 800055c:	2300      	movs	r3, #0
 800055e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000562:	4b1f      	ldr	r3, [pc, #124]	; (80005e0 <HAL_ADC_Start_DMA+0x110>)
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000564:	314c      	adds	r1, #76	; 0x4c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000566:	6283      	str	r3, [r0, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000568:	4b1e      	ldr	r3, [pc, #120]	; (80005e4 <HAL_ADC_Start_DMA+0x114>)
 800056a:	62c3      	str	r3, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800056c:	4b1e      	ldr	r3, [pc, #120]	; (80005e8 <HAL_ADC_Start_DMA+0x118>)
 800056e:	6303      	str	r3, [r0, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000570:	f06f 0302 	mvn.w	r3, #2
 8000574:	f841 3c4c 	str.w	r3, [r1, #-76]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000578:	f851 3c44 	ldr.w	r3, [r1, #-68]
 800057c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000580:	f841 3c44 	str.w	r3, [r1, #-68]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000584:	4643      	mov	r3, r8
 8000586:	f000 fc59 	bl	8000e3c <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800058a:	6823      	ldr	r3, [r4, #0]
 800058c:	689a      	ldr	r2, [r3, #8]
 800058e:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8000592:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000596:	689a      	ldr	r2, [r3, #8]
 8000598:	bf0c      	ite	eq
 800059a:	f442 02a0 	orreq.w	r2, r2, #5242880	; 0x500000
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800059e:	f442 1280 	orrne.w	r2, r2, #1048576	; 0x100000
 80005a2:	609a      	str	r2, [r3, #8]
}
 80005a4:	4630      	mov	r0, r6
 80005a6:	e8bd 81d8 	ldmia.w	sp!, {r3, r4, r6, r7, r8, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80005aa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80005ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005b0:	62a3      	str	r3, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80005b2:	6853      	ldr	r3, [r2, #4]
 80005b4:	055b      	lsls	r3, r3, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80005b6:	bf41      	itttt	mi
 80005b8:	6aa0      	ldrmi	r0, [r4, #40]	; 0x28
 80005ba:	f420 5040 	bicmi.w	r0, r0, #12288	; 0x3000
 80005be:	f440 5080 	orrmi.w	r0, r0, #4096	; 0x1000
 80005c2:	62a0      	strmi	r0, [r4, #40]	; 0x28
 80005c4:	e7bf      	b.n	8000546 <HAL_ADC_Start_DMA+0x76>
      __HAL_UNLOCK(hadc);
 80005c6:	2300      	movs	r3, #0
 80005c8:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 80005cc:	e7ea      	b.n	80005a4 <HAL_ADC_Start_DMA+0xd4>
    tmp_hal_status = HAL_ERROR;
 80005ce:	2601      	movs	r6, #1
 80005d0:	e7e8      	b.n	80005a4 <HAL_ADC_Start_DMA+0xd4>
    __HAL_LOCK(hadc);
 80005d2:	2602      	movs	r6, #2
 80005d4:	e7e6      	b.n	80005a4 <HAL_ADC_Start_DMA+0xd4>
 80005d6:	bf00      	nop
 80005d8:	40012400 	.word	0x40012400
 80005dc:	40012800 	.word	0x40012800
 80005e0:	08000201 	.word	0x08000201
 80005e4:	08000251 	.word	0x08000251
 80005e8:	0800034b 	.word	0x0800034b

080005ec <ADC_ConversionStop_Disable>:
{
 80005ec:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 80005ee:	6803      	ldr	r3, [r0, #0]
{
 80005f0:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 80005f2:	689a      	ldr	r2, [r3, #8]
 80005f4:	07d2      	lsls	r2, r2, #31
 80005f6:	d401      	bmi.n	80005fc <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 80005f8:	2000      	movs	r0, #0
}
 80005fa:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 80005fc:	689a      	ldr	r2, [r3, #8]
 80005fe:	f022 0201 	bic.w	r2, r2, #1
 8000602:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8000604:	f7ff fde4 	bl	80001d0 <HAL_GetTick>
 8000608:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 800060a:	6823      	ldr	r3, [r4, #0]
 800060c:	689b      	ldr	r3, [r3, #8]
 800060e:	07db      	lsls	r3, r3, #31
 8000610:	d5f2      	bpl.n	80005f8 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000612:	f7ff fddd 	bl	80001d0 <HAL_GetTick>
 8000616:	1b40      	subs	r0, r0, r5
 8000618:	2802      	cmp	r0, #2
 800061a:	d9f6      	bls.n	800060a <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800061c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800061e:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000620:	f043 0310 	orr.w	r3, r3, #16
 8000624:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000626:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000628:	f043 0301 	orr.w	r3, r3, #1
 800062c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800062e:	e7e4      	b.n	80005fa <ADC_ConversionStop_Disable+0xe>

08000630 <HAL_ADC_Init>:
{
 8000630:	b570      	push	{r4, r5, r6, lr}
  if(hadc == NULL)
 8000632:	4604      	mov	r4, r0
 8000634:	2800      	cmp	r0, #0
 8000636:	d070      	beq.n	800071a <HAL_ADC_Init+0xea>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000638:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800063a:	b923      	cbnz	r3, 8000646 <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 800063c:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 800063e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8000642:	f001 fd0d 	bl	8002060 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000646:	4620      	mov	r0, r4
 8000648:	f7ff ffd0 	bl	80005ec <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800064c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800064e:	f013 0f10 	tst.w	r3, #16
    ADC_STATE_CLR_SET(hadc->State,
 8000652:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000654:	d163      	bne.n	800071e <HAL_ADC_Init+0xee>
 8000656:	2800      	cmp	r0, #0
 8000658:	d161      	bne.n	800071e <HAL_ADC_Init+0xee>
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 800065a:	69e1      	ldr	r1, [r4, #28]
    ADC_STATE_CLR_SET(hadc->State,
 800065c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8000660:	6862      	ldr	r2, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 8000662:	f023 0302 	bic.w	r3, r3, #2
 8000666:	f043 0302 	orr.w	r3, r3, #2
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 800066a:	430a      	orrs	r2, r1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800066c:	68a1      	ldr	r1, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 800066e:	62a3      	str	r3, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 8000670:	68e3      	ldr	r3, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000672:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 8000676:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800067a:	d037      	beq.n	80006ec <HAL_ADC_Init+0xbc>
 800067c:	2901      	cmp	r1, #1
 800067e:	bf14      	ite	ne
 8000680:	4606      	movne	r6, r0
 8000682:	f44f 7680 	moveq.w	r6, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000686:	6965      	ldr	r5, [r4, #20]
 8000688:	2d01      	cmp	r5, #1
 800068a:	d106      	bne.n	800069a <HAL_ADC_Init+0x6a>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800068c:	bb83      	cbnz	r3, 80006f0 <HAL_ADC_Init+0xc0>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800068e:	69a3      	ldr	r3, [r4, #24]
 8000690:	3b01      	subs	r3, #1
 8000692:	ea46 3543 	orr.w	r5, r6, r3, lsl #13
 8000696:	f445 6600 	orr.w	r6, r5, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 800069a:	6823      	ldr	r3, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800069c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 80006a0:	685d      	ldr	r5, [r3, #4]
 80006a2:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 80006a6:	ea45 0506 	orr.w	r5, r5, r6
 80006aa:	605d      	str	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 80006ac:	689e      	ldr	r6, [r3, #8]
 80006ae:	4d1e      	ldr	r5, [pc, #120]	; (8000728 <HAL_ADC_Init+0xf8>)
 80006b0:	ea05 0506 	and.w	r5, r5, r6
 80006b4:	ea45 0502 	orr.w	r5, r5, r2
 80006b8:	609d      	str	r5, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80006ba:	d001      	beq.n	80006c0 <HAL_ADC_Init+0x90>
 80006bc:	2901      	cmp	r1, #1
 80006be:	d120      	bne.n	8000702 <HAL_ADC_Init+0xd2>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80006c0:	6921      	ldr	r1, [r4, #16]
 80006c2:	3901      	subs	r1, #1
 80006c4:	0509      	lsls	r1, r1, #20
    MODIFY_REG(hadc->Instance->SQR1,
 80006c6:	6add      	ldr	r5, [r3, #44]	; 0x2c
 80006c8:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 80006cc:	4329      	orrs	r1, r5
 80006ce:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80006d0:	6899      	ldr	r1, [r3, #8]
 80006d2:	4b16      	ldr	r3, [pc, #88]	; (800072c <HAL_ADC_Init+0xfc>)
 80006d4:	400b      	ands	r3, r1
 80006d6:	429a      	cmp	r2, r3
 80006d8:	d115      	bne.n	8000706 <HAL_ADC_Init+0xd6>
      ADC_CLEAR_ERRORCODE(hadc);
 80006da:	2300      	movs	r3, #0
 80006dc:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 80006de:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80006e0:	f023 0303 	bic.w	r3, r3, #3
 80006e4:	f043 0301 	orr.w	r3, r3, #1
 80006e8:	62a3      	str	r3, [r4, #40]	; 0x28
}
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80006ec:	460e      	mov	r6, r1
 80006ee:	e7ca      	b.n	8000686 <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80006f0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80006f2:	f043 0320 	orr.w	r3, r3, #32
 80006f6:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80006f8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80006fa:	f043 0301 	orr.w	r3, r3, #1
 80006fe:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000700:	e7cb      	b.n	800069a <HAL_ADC_Init+0x6a>
  uint32_t tmp_sqr1 = 0U;
 8000702:	2100      	movs	r1, #0
 8000704:	e7df      	b.n	80006c6 <HAL_ADC_Init+0x96>
      ADC_STATE_CLR_SET(hadc->State,
 8000706:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000708:	f023 0312 	bic.w	r3, r3, #18
 800070c:	f043 0310 	orr.w	r3, r3, #16
 8000710:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000712:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000714:	f043 0301 	orr.w	r3, r3, #1
 8000718:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 800071a:	2001      	movs	r0, #1
 800071c:	e7e5      	b.n	80006ea <HAL_ADC_Init+0xba>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800071e:	f043 0310 	orr.w	r3, r3, #16
 8000722:	62a3      	str	r3, [r4, #40]	; 0x28
 8000724:	e7f9      	b.n	800071a <HAL_ADC_Init+0xea>
 8000726:	bf00      	nop
 8000728:	ffe1f7fd 	.word	0xffe1f7fd
 800072c:	ff1f0efe 	.word	0xff1f0efe

08000730 <HAL_ADCEx_Calibration_Start>:
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8000730:	2300      	movs	r3, #0
{
 8000732:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8000734:	9301      	str	r3, [sp, #4]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000736:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 800073a:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 800073c:	2b01      	cmp	r3, #1
 800073e:	d05a      	beq.n	80007f6 <HAL_ADCEx_Calibration_Start+0xc6>
 8000740:	2301      	movs	r3, #1
 8000742:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000746:	f7ff ff51 	bl	80005ec <ADC_ConversionStop_Disable>
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800074a:	4605      	mov	r5, r0
 800074c:	2800      	cmp	r0, #0
 800074e:	d132      	bne.n	80007b6 <HAL_ADCEx_Calibration_Start+0x86>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000750:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000752:	2002      	movs	r0, #2
    ADC_STATE_CLR_SET(hadc->State,
 8000754:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000758:	f023 0302 	bic.w	r3, r3, #2
 800075c:	f043 0302 	orr.w	r3, r3, #2
 8000760:	62a3      	str	r3, [r4, #40]	; 0x28
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000762:	4b26      	ldr	r3, [pc, #152]	; (80007fc <HAL_ADCEx_Calibration_Start+0xcc>)
 8000764:	681e      	ldr	r6, [r3, #0]
 8000766:	f001 f823 	bl	80017b0 <HAL_RCCEx_GetPeriphCLKFreq>
 800076a:	fbb6 f0f0 	udiv	r0, r6, r0
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 800076e:	0040      	lsls	r0, r0, #1
    wait_loop_index = ((SystemCoreClock
 8000770:	9001      	str	r0, [sp, #4]

    while(wait_loop_index != 0U)
 8000772:	9b01      	ldr	r3, [sp, #4]
 8000774:	bb1b      	cbnz	r3, 80007be <HAL_ADCEx_Calibration_Start+0x8e>
    {
      wait_loop_index--;
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8000776:	4620      	mov	r0, r4
 8000778:	f7ff fe72 	bl	8000460 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 800077c:	6822      	ldr	r2, [r4, #0]
 800077e:	6893      	ldr	r3, [r2, #8]
 8000780:	f043 0308 	orr.w	r3, r3, #8
 8000784:	6093      	str	r3, [r2, #8]
    
    tickstart = HAL_GetTick();  
 8000786:	f7ff fd23 	bl	80001d0 <HAL_GetTick>
 800078a:	4606      	mov	r6, r0

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800078c:	6823      	ldr	r3, [r4, #0]
 800078e:	689a      	ldr	r2, [r3, #8]
 8000790:	0712      	lsls	r2, r2, #28
 8000792:	d418      	bmi.n	80007c6 <HAL_ADCEx_Calibration_Start+0x96>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8000794:	689a      	ldr	r2, [r3, #8]
 8000796:	f042 0204 	orr.w	r2, r2, #4
 800079a:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800079c:	f7ff fd18 	bl	80001d0 <HAL_GetTick>
 80007a0:	4606      	mov	r6, r0

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80007a2:	6823      	ldr	r3, [r4, #0]
 80007a4:	689b      	ldr	r3, [r3, #8]
 80007a6:	075b      	lsls	r3, r3, #29
 80007a8:	d41f      	bmi.n	80007ea <HAL_ADCEx_Calibration_Start+0xba>
        return HAL_ERROR;
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80007aa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80007ac:	f023 0303 	bic.w	r3, r3, #3
 80007b0:	f043 0301 	orr.w	r3, r3, #1
 80007b4:	62a3      	str	r3, [r4, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80007b6:	2300      	movs	r3, #0
 80007b8:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80007bc:	e012      	b.n	80007e4 <HAL_ADCEx_Calibration_Start+0xb4>
      wait_loop_index--;
 80007be:	9b01      	ldr	r3, [sp, #4]
 80007c0:	3b01      	subs	r3, #1
 80007c2:	9301      	str	r3, [sp, #4]
 80007c4:	e7d5      	b.n	8000772 <HAL_ADCEx_Calibration_Start+0x42>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80007c6:	f7ff fd03 	bl	80001d0 <HAL_GetTick>
 80007ca:	1b80      	subs	r0, r0, r6
 80007cc:	280a      	cmp	r0, #10
 80007ce:	d9dd      	bls.n	800078c <HAL_ADCEx_Calibration_Start+0x5c>
        ADC_STATE_CLR_SET(hadc->State,
 80007d0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        return HAL_ERROR;
 80007d2:	2501      	movs	r5, #1
        ADC_STATE_CLR_SET(hadc->State,
 80007d4:	f023 0312 	bic.w	r3, r3, #18
 80007d8:	f043 0310 	orr.w	r3, r3, #16
 80007dc:	62a3      	str	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 80007de:	2300      	movs	r3, #0
 80007e0:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 80007e4:	4628      	mov	r0, r5
 80007e6:	b002      	add	sp, #8
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80007ea:	f7ff fcf1 	bl	80001d0 <HAL_GetTick>
 80007ee:	1b80      	subs	r0, r0, r6
 80007f0:	280a      	cmp	r0, #10
 80007f2:	d9d6      	bls.n	80007a2 <HAL_ADCEx_Calibration_Start+0x72>
 80007f4:	e7ec      	b.n	80007d0 <HAL_ADCEx_Calibration_Start+0xa0>
  __HAL_LOCK(hadc);
 80007f6:	2502      	movs	r5, #2
 80007f8:	e7f4      	b.n	80007e4 <HAL_ADCEx_Calibration_Start+0xb4>
 80007fa:	bf00      	nop
 80007fc:	20000008 	.word	0x20000008

08000800 <HAL_ADCEx_InjectedConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8000800:	4770      	bx	lr

08000802 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000802:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000804:	4604      	mov	r4, r0
 8000806:	2800      	cmp	r0, #0
 8000808:	d06e      	beq.n	80008e8 <HAL_CAN_Init+0xe6>
  assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

  if (hcan->State == HAL_CAN_STATE_RESET)
 800080a:	f890 3020 	ldrb.w	r3, [r0, #32]
 800080e:	b90b      	cbnz	r3, 8000814 <HAL_CAN_Init+0x12>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000810:	f001 fc9c 	bl	800214c <HAL_CAN_MspInit>
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000814:	6822      	ldr	r2, [r4, #0]
 8000816:	6813      	ldr	r3, [r2, #0]
 8000818:	f023 0302 	bic.w	r3, r3, #2
 800081c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800081e:	f7ff fcd7 	bl	80001d0 <HAL_GetTick>
 8000822:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000824:	6823      	ldr	r3, [r4, #0]
 8000826:	685a      	ldr	r2, [r3, #4]
 8000828:	0791      	lsls	r1, r2, #30
 800082a:	d451      	bmi.n	80008d0 <HAL_CAN_Init+0xce>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800082c:	681a      	ldr	r2, [r3, #0]
 800082e:	f042 0201 	orr.w	r2, r2, #1
 8000832:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000834:	f7ff fccc 	bl	80001d0 <HAL_GetTick>
 8000838:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800083a:	6823      	ldr	r3, [r4, #0]
 800083c:	685a      	ldr	r2, [r3, #4]
 800083e:	07d2      	lsls	r2, r2, #31
 8000840:	d554      	bpl.n	80008ec <HAL_CAN_Init+0xea>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000842:	7e22      	ldrb	r2, [r4, #24]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000844:	2000      	movs	r0, #0
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000846:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000848:	681a      	ldr	r2, [r3, #0]
 800084a:	bf0c      	ite	eq
 800084c:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000850:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 8000854:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 8000856:	7e62      	ldrb	r2, [r4, #25]
 8000858:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800085a:	681a      	ldr	r2, [r3, #0]
 800085c:	bf0c      	ite	eq
 800085e:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000862:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 8000866:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000868:	7ea2      	ldrb	r2, [r4, #26]
 800086a:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800086c:	681a      	ldr	r2, [r3, #0]
 800086e:	bf0c      	ite	eq
 8000870:	f042 0220 	orreq.w	r2, r2, #32
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000874:	f022 0220 	bicne.w	r2, r2, #32
 8000878:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 800087a:	7ee2      	ldrb	r2, [r4, #27]
 800087c:	2a01      	cmp	r2, #1
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800087e:	681a      	ldr	r2, [r3, #0]
 8000880:	bf0c      	ite	eq
 8000882:	f022 0210 	biceq.w	r2, r2, #16
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000886:	f042 0210 	orrne.w	r2, r2, #16
 800088a:	601a      	str	r2, [r3, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800088c:	7f22      	ldrb	r2, [r4, #28]
 800088e:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000890:	681a      	ldr	r2, [r3, #0]
 8000892:	bf0c      	ite	eq
 8000894:	f042 0208 	orreq.w	r2, r2, #8
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000898:	f022 0208 	bicne.w	r2, r2, #8
 800089c:	601a      	str	r2, [r3, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800089e:	7f62      	ldrb	r2, [r4, #29]
 80008a0:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80008a2:	681a      	ldr	r2, [r3, #0]
 80008a4:	bf0c      	ite	eq
 80008a6:	f042 0204 	orreq.w	r2, r2, #4
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80008aa:	f022 0204 	bicne.w	r2, r2, #4
 80008ae:	601a      	str	r2, [r3, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80008b0:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 80008b4:	430a      	orrs	r2, r1
 80008b6:	6921      	ldr	r1, [r4, #16]
 80008b8:	430a      	orrs	r2, r1
 80008ba:	6961      	ldr	r1, [r4, #20]
 80008bc:	430a      	orrs	r2, r1
 80008be:	6861      	ldr	r1, [r4, #4]
 80008c0:	3901      	subs	r1, #1
 80008c2:	430a      	orrs	r2, r1
 80008c4:	61da      	str	r2, [r3, #28]

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80008c6:	2301      	movs	r3, #1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80008c8:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 80008ca:	f884 3020 	strb.w	r3, [r4, #32]

  /* Return function status */
  return HAL_OK;
}
 80008ce:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80008d0:	f7ff fc7e 	bl	80001d0 <HAL_GetTick>
 80008d4:	1b40      	subs	r0, r0, r5
 80008d6:	280a      	cmp	r0, #10
 80008d8:	d9a4      	bls.n	8000824 <HAL_CAN_Init+0x22>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80008da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80008dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008e0:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 80008e2:	2305      	movs	r3, #5
 80008e4:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 80008e8:	2001      	movs	r0, #1
 80008ea:	e7f0      	b.n	80008ce <HAL_CAN_Init+0xcc>
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80008ec:	f7ff fc70 	bl	80001d0 <HAL_GetTick>
 80008f0:	1b40      	subs	r0, r0, r5
 80008f2:	280a      	cmp	r0, #10
 80008f4:	d9a1      	bls.n	800083a <HAL_CAN_Init+0x38>
 80008f6:	e7f0      	b.n	80008da <HAL_CAN_Init+0xd8>

080008f8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80008f8:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80008fa:	f890 3020 	ldrb.w	r3, [r0, #32]
{
 80008fe:	4604      	mov	r4, r0
  if (hcan->State == HAL_CAN_STATE_READY)
 8000900:	2b01      	cmp	r3, #1
 8000902:	d11f      	bne.n	8000944 <HAL_CAN_Start+0x4c>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000904:	2302      	movs	r3, #2

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000906:	6802      	ldr	r2, [r0, #0]
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000908:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800090c:	6813      	ldr	r3, [r2, #0]
 800090e:	f023 0301 	bic.w	r3, r3, #1
 8000912:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000914:	f7ff fc5c 	bl	80001d0 <HAL_GetTick>
 8000918:	4605      	mov	r5, r0

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800091a:	6823      	ldr	r3, [r4, #0]
 800091c:	6858      	ldr	r0, [r3, #4]
 800091e:	f010 0001 	ands.w	r0, r0, #1
 8000922:	d101      	bne.n	8000928 <HAL_CAN_Start+0x30>
        return HAL_ERROR;
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000924:	6260      	str	r0, [r4, #36]	; 0x24
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;

    return HAL_ERROR;
  }
}
 8000926:	bd38      	pop	{r3, r4, r5, pc}
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000928:	f7ff fc52 	bl	80001d0 <HAL_GetTick>
 800092c:	1b40      	subs	r0, r0, r5
 800092e:	280a      	cmp	r0, #10
 8000930:	d9f3      	bls.n	800091a <HAL_CAN_Start+0x22>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000932:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000934:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000938:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 800093a:	2305      	movs	r3, #5
 800093c:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 8000940:	2001      	movs	r0, #1
 8000942:	e7f0      	b.n	8000926 <HAL_CAN_Start+0x2e>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000944:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000946:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800094a:	6243      	str	r3, [r0, #36]	; 0x24
 800094c:	e7f8      	b.n	8000940 <HAL_CAN_Start+0x48>

0800094e <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800094e:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000950:	f890 5020 	ldrb.w	r5, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000954:	6806      	ldr	r6, [r0, #0]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000956:	3d01      	subs	r5, #1
 8000958:	2d01      	cmp	r5, #1
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800095a:	68b4      	ldr	r4, [r6, #8]
  if ((state == HAL_CAN_STATE_READY) ||
 800095c:	d840      	bhi.n	80009e0 <HAL_CAN_AddTxMessage+0x92>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800095e:	f014 5fe0 	tst.w	r4, #469762048	; 0x1c000000
 8000962:	d039      	beq.n	80009d8 <HAL_CAN_AddTxMessage+0x8a>
        ((tsr & CAN_TSR_TME1) != 0U) ||
        ((tsr & CAN_TSR_TME2) != 0U))
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000964:	f3c4 6401 	ubfx	r4, r4, #24, #2

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8000968:	2c03      	cmp	r4, #3
 800096a:	f04f 0501 	mov.w	r5, #1
 800096e:	d105      	bne.n	800097c <HAL_CAN_AddTxMessage+0x2e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8000970:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000972:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000976:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8000978:	2001      	movs	r0, #1
 800097a:	e027      	b.n	80009cc <HAL_CAN_AddTxMessage+0x7e>
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800097c:	40a5      	lsls	r5, r4
 800097e:	601d      	str	r5, [r3, #0]
 8000980:	e9d1 0702 	ldrd	r0, r7, [r1, #8]
 8000984:	f104 0318 	add.w	r3, r4, #24
      if (pHeader->IDE == CAN_ID_STD)
 8000988:	bb08      	cbnz	r0, 80009ce <HAL_CAN_AddTxMessage+0x80>
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800098a:	6808      	ldr	r0, [r1, #0]
 800098c:	ea47 5040 	orr.w	r0, r7, r0, lsl #21
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000990:	011b      	lsls	r3, r3, #4
 8000992:	50f0      	str	r0, [r6, r3]
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000994:	6908      	ldr	r0, [r1, #16]
 8000996:	0124      	lsls	r4, r4, #4
 8000998:	1933      	adds	r3, r6, r4
 800099a:	f8c3 0184 	str.w	r0, [r3, #388]	; 0x184
      return HAL_OK;
 800099e:	2000      	movs	r0, #0
      if (pHeader->TransmitGlobalTime == ENABLE)
 80009a0:	7d09      	ldrb	r1, [r1, #20]
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80009a2:	4434      	add	r4, r6
      if (pHeader->TransmitGlobalTime == ENABLE)
 80009a4:	2901      	cmp	r1, #1
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80009a6:	bf02      	ittt	eq
 80009a8:	f8d3 1184 	ldreq.w	r1, [r3, #388]	; 0x184
 80009ac:	f441 7180 	orreq.w	r1, r1, #256	; 0x100
 80009b0:	f8c3 1184 	streq.w	r1, [r3, #388]	; 0x184
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80009b4:	6851      	ldr	r1, [r2, #4]
 80009b6:	f8c4 118c 	str.w	r1, [r4, #396]	; 0x18c
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80009ba:	6812      	ldr	r2, [r2, #0]
 80009bc:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80009c0:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 80009c4:	f042 0201 	orr.w	r2, r2, #1
 80009c8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 80009cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80009ce:	684d      	ldr	r5, [r1, #4]
                                                           pHeader->IDE |
 80009d0:	4338      	orrs	r0, r7
 80009d2:	ea40 00c5 	orr.w	r0, r0, r5, lsl #3
 80009d6:	e7db      	b.n	8000990 <HAL_CAN_AddTxMessage+0x42>
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80009d8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80009da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009de:	e7ca      	b.n	8000976 <HAL_CAN_AddTxMessage+0x28>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80009e0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80009e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009e6:	e7c6      	b.n	8000976 <HAL_CAN_AddTxMessage+0x28>

080009e8 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80009e8:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_CAN_StateTypeDef state = hcan->State;
 80009ea:	f890 4020 	ldrb.w	r4, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80009ee:	3c01      	subs	r4, #1
 80009f0:	2c01      	cmp	r4, #1
 80009f2:	d86b      	bhi.n	8000acc <HAL_CAN_GetRxMessage+0xe4>
 80009f4:	6806      	ldr	r6, [r0, #0]
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80009f6:	b941      	cbnz	r1, 8000a0a <HAL_CAN_GetRxMessage+0x22>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80009f8:	68f4      	ldr	r4, [r6, #12]
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80009fa:	07a4      	lsls	r4, r4, #30
 80009fc:	d107      	bne.n	8000a0e <HAL_CAN_GetRxMessage+0x26>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80009fe:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000a00:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000a04:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8000a06:	2001      	movs	r0, #1
 8000a08:	e055      	b.n	8000ab6 <HAL_CAN_GetRxMessage+0xce>
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000a0a:	6934      	ldr	r4, [r6, #16]
 8000a0c:	e7f5      	b.n	80009fa <HAL_CAN_GetRxMessage+0x12>
 8000a0e:	010c      	lsls	r4, r1, #4
 8000a10:	1935      	adds	r5, r6, r4
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000a12:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 8000a16:	f007 0704 	and.w	r7, r7, #4
 8000a1a:	6097      	str	r7, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000a1c:	2f00      	cmp	r7, #0
 8000a1e:	d14b      	bne.n	8000ab8 <HAL_CAN_GetRxMessage+0xd0>
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000a20:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 8000a24:	0d7f      	lsrs	r7, r7, #21
 8000a26:	6017      	str	r7, [r2, #0]
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 8000a28:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000a2c:	4426      	add	r6, r4
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 8000a2e:	f3c7 0740 	ubfx	r7, r7, #1, #1
 8000a32:	60d7      	str	r7, [r2, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000a34:	f8d5 71b4 	ldr.w	r7, [r5, #436]	; 0x1b4
 8000a38:	f007 070f 	and.w	r7, r7, #15
 8000a3c:	6117      	str	r7, [r2, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000a3e:	f8d5 71b4 	ldr.w	r7, [r5, #436]	; 0x1b4
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000a42:	f8d5 51b4 	ldr.w	r5, [r5, #436]	; 0x1b4
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000a46:	f3c7 2707 	ubfx	r7, r7, #8, #8
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000a4a:	0c2d      	lsrs	r5, r5, #16
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000a4c:	6197      	str	r7, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000a4e:	6155      	str	r5, [r2, #20]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000a50:	f8d6 21b8 	ldr.w	r2, [r6, #440]	; 0x1b8
 8000a54:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000a56:	6802      	ldr	r2, [r0, #0]
 8000a58:	4422      	add	r2, r4
 8000a5a:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8000a5e:	0a12      	lsrs	r2, r2, #8
 8000a60:	705a      	strb	r2, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000a62:	6802      	ldr	r2, [r0, #0]
 8000a64:	4422      	add	r2, r4
 8000a66:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8000a6a:	0c12      	lsrs	r2, r2, #16
 8000a6c:	709a      	strb	r2, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000a6e:	6802      	ldr	r2, [r0, #0]
 8000a70:	4422      	add	r2, r4
 8000a72:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8000a76:	0e12      	lsrs	r2, r2, #24
 8000a78:	70da      	strb	r2, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000a7a:	6802      	ldr	r2, [r0, #0]
 8000a7c:	4422      	add	r2, r4
 8000a7e:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8000a82:	711a      	strb	r2, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8000a84:	6802      	ldr	r2, [r0, #0]
 8000a86:	4422      	add	r2, r4
 8000a88:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8000a8c:	0a12      	lsrs	r2, r2, #8
 8000a8e:	715a      	strb	r2, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8000a90:	6802      	ldr	r2, [r0, #0]
 8000a92:	4422      	add	r2, r4
 8000a94:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8000a98:	0c12      	lsrs	r2, r2, #16
 8000a9a:	719a      	strb	r2, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8000a9c:	6802      	ldr	r2, [r0, #0]
 8000a9e:	4414      	add	r4, r2
 8000aa0:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
 8000aa4:	0e12      	lsrs	r2, r2, #24
 8000aa6:	71da      	strb	r2, [r3, #7]
 8000aa8:	6803      	ldr	r3, [r0, #0]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000aaa:	b951      	cbnz	r1, 8000ac2 <HAL_CAN_GetRxMessage+0xda>
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8000aac:	68da      	ldr	r2, [r3, #12]
 8000aae:	f042 0220 	orr.w	r2, r2, #32
 8000ab2:	60da      	str	r2, [r3, #12]
    return HAL_OK;
 8000ab4:	2000      	movs	r0, #0
  }
}
 8000ab6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000ab8:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 8000abc:	08ff      	lsrs	r7, r7, #3
 8000abe:	6057      	str	r7, [r2, #4]
 8000ac0:	e7b2      	b.n	8000a28 <HAL_CAN_GetRxMessage+0x40>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8000ac2:	691a      	ldr	r2, [r3, #16]
 8000ac4:	f042 0220 	orr.w	r2, r2, #32
 8000ac8:	611a      	str	r2, [r3, #16]
 8000aca:	e7f3      	b.n	8000ab4 <HAL_CAN_GetRxMessage+0xcc>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000acc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000ace:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ad2:	e797      	b.n	8000a04 <HAL_CAN_GetRxMessage+0x1c>

08000ad4 <HAL_CAN_ActivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 8000ad4:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8000ad8:	3b01      	subs	r3, #1
 8000ada:	2b01      	cmp	r3, #1
 8000adc:	d805      	bhi.n	8000aea <HAL_CAN_ActivateNotification+0x16>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8000ade:	6802      	ldr	r2, [r0, #0]

    /* Return function status */
    return HAL_OK;
 8000ae0:	2000      	movs	r0, #0
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8000ae2:	6953      	ldr	r3, [r2, #20]
 8000ae4:	4319      	orrs	r1, r3
 8000ae6:	6151      	str	r1, [r2, #20]
    return HAL_OK;
 8000ae8:	4770      	bx	lr
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000aea:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000aec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000af0:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8000af2:	2001      	movs	r0, #1
  }
}
 8000af4:	4770      	bx	lr

08000af6 <HAL_CAN_TxMailbox0CompleteCallback>:
 8000af6:	4770      	bx	lr

08000af8 <HAL_CAN_TxMailbox1CompleteCallback>:
 8000af8:	4770      	bx	lr

08000afa <HAL_CAN_TxMailbox2CompleteCallback>:
 8000afa:	4770      	bx	lr

08000afc <HAL_CAN_TxMailbox0AbortCallback>:
 8000afc:	4770      	bx	lr

08000afe <HAL_CAN_TxMailbox1AbortCallback>:
 8000afe:	4770      	bx	lr

08000b00 <HAL_CAN_TxMailbox2AbortCallback>:
 8000b00:	4770      	bx	lr

08000b02 <HAL_CAN_RxFifo0FullCallback>:
 8000b02:	4770      	bx	lr

08000b04 <HAL_CAN_RxFifo1MsgPendingCallback>:
 8000b04:	4770      	bx	lr

08000b06 <HAL_CAN_RxFifo1FullCallback>:
 8000b06:	4770      	bx	lr

08000b08 <HAL_CAN_SleepCallback>:
 8000b08:	4770      	bx	lr

08000b0a <HAL_CAN_WakeUpFromRxMsgCallback>:
 8000b0a:	4770      	bx	lr

08000b0c <HAL_CAN_ErrorCallback>:
 8000b0c:	4770      	bx	lr

08000b0e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8000b0e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000b12:	6803      	ldr	r3, [r0, #0]
{
 8000b14:	4605      	mov	r5, r0
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000b16:	695e      	ldr	r6, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000b18:	f8d3 9004 	ldr.w	r9, [r3, #4]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000b1c:	f016 0401 	ands.w	r4, r6, #1
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000b20:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000b22:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000b26:	f8d3 a010 	ldr.w	sl, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000b2a:	f8d3 8018 	ldr.w	r8, [r3, #24]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000b2e:	d022      	beq.n	8000b76 <HAL_CAN_IRQHandler+0x68>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000b30:	f017 0401 	ands.w	r4, r7, #1
 8000b34:	d007      	beq.n	8000b46 <HAL_CAN_IRQHandler+0x38>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000b36:	2201      	movs	r2, #1

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000b38:	07b9      	lsls	r1, r7, #30
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000b3a:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000b3c:	f140 80a3 	bpl.w	8000c86 <HAL_CAN_IRQHandler+0x178>
      {
        /* Transmission Mailbox 0 complete callback */
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000b40:	f7ff ffd9 	bl	8000af6 <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000b44:	2400      	movs	r4, #0
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8000b46:	05fb      	lsls	r3, r7, #23
 8000b48:	d509      	bpl.n	8000b5e <HAL_CAN_IRQHandler+0x50>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000b4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b4e:	682b      	ldr	r3, [r5, #0]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000b50:	05b8      	lsls	r0, r7, #22
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000b52:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000b54:	f140 80a5 	bpl.w	8000ca2 <HAL_CAN_IRQHandler+0x194>
      {
        /* Transmission Mailbox 1 complete callback */
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8000b58:	4628      	mov	r0, r5
 8000b5a:	f7ff ffcd 	bl	8000af8 <HAL_CAN_TxMailbox1CompleteCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8000b5e:	03fb      	lsls	r3, r7, #15
 8000b60:	d509      	bpl.n	8000b76 <HAL_CAN_IRQHandler+0x68>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000b62:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000b66:	682b      	ldr	r3, [r5, #0]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000b68:	03b8      	lsls	r0, r7, #14
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000b6a:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000b6c:	f140 80a7 	bpl.w	8000cbe <HAL_CAN_IRQHandler+0x1b0>
      {
        /* Transmission Mailbox 2 complete callback */
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8000b70:	4628      	mov	r0, r5
 8000b72:	f7ff ffc2 	bl	8000afa <HAL_CAN_TxMailbox2CompleteCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8000b76:	0733      	lsls	r3, r6, #28
 8000b78:	d507      	bpl.n	8000b8a <HAL_CAN_IRQHandler+0x7c>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8000b7a:	f01b 0f10 	tst.w	fp, #16
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000b7e:	bf1f      	itttt	ne
 8000b80:	2210      	movne	r2, #16
 8000b82:	682b      	ldrne	r3, [r5, #0]
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8000b84:	f444 7400 	orrne.w	r4, r4, #512	; 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000b88:	60da      	strne	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8000b8a:	0777      	lsls	r7, r6, #29
 8000b8c:	d508      	bpl.n	8000ba0 <HAL_CAN_IRQHandler+0x92>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8000b8e:	f01b 0f08 	tst.w	fp, #8
 8000b92:	d005      	beq.n	8000ba0 <HAL_CAN_IRQHandler+0x92>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8000b94:	2208      	movs	r2, #8
 8000b96:	682b      	ldr	r3, [r5, #0]

      /* Receive FIFO 0 full Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8000b98:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8000b9a:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 8000b9c:	f7ff ffb1 	bl	8000b02 <HAL_CAN_RxFifo0FullCallback>
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8000ba0:	07b0      	lsls	r0, r6, #30
 8000ba2:	d506      	bpl.n	8000bb2 <HAL_CAN_IRQHandler+0xa4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8000ba4:	682b      	ldr	r3, [r5, #0]
 8000ba6:	68db      	ldr	r3, [r3, #12]
 8000ba8:	0799      	lsls	r1, r3, #30
 8000baa:	d002      	beq.n	8000bb2 <HAL_CAN_IRQHandler+0xa4>
    {
      /* Receive FIFO 0 mesage pending Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8000bac:	4628      	mov	r0, r5
 8000bae:	f001 fa07 	bl	8001fc0 <HAL_CAN_RxFifo0MsgPendingCallback>
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8000bb2:	0672      	lsls	r2, r6, #25
 8000bb4:	d507      	bpl.n	8000bc6 <HAL_CAN_IRQHandler+0xb8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8000bb6:	f01a 0f10 	tst.w	sl, #16
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000bba:	bf1f      	itttt	ne
 8000bbc:	2210      	movne	r2, #16
 8000bbe:	682b      	ldrne	r3, [r5, #0]
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8000bc0:	f444 6480 	orrne.w	r4, r4, #1024	; 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000bc4:	611a      	strne	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8000bc6:	06b3      	lsls	r3, r6, #26
 8000bc8:	d508      	bpl.n	8000bdc <HAL_CAN_IRQHandler+0xce>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8000bca:	f01a 0f08 	tst.w	sl, #8
 8000bce:	d005      	beq.n	8000bdc <HAL_CAN_IRQHandler+0xce>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8000bd0:	2208      	movs	r2, #8
 8000bd2:	682b      	ldr	r3, [r5, #0]

      /* Receive FIFO 1 full Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8000bd4:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8000bd6:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 8000bd8:	f7ff ff95 	bl	8000b06 <HAL_CAN_RxFifo1FullCallback>
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8000bdc:	06f7      	lsls	r7, r6, #27
 8000bde:	d506      	bpl.n	8000bee <HAL_CAN_IRQHandler+0xe0>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8000be0:	682b      	ldr	r3, [r5, #0]
 8000be2:	691b      	ldr	r3, [r3, #16]
 8000be4:	0798      	lsls	r0, r3, #30
 8000be6:	d002      	beq.n	8000bee <HAL_CAN_IRQHandler+0xe0>
    {
      /* Receive FIFO 1 mesage pending Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8000be8:	4628      	mov	r0, r5
 8000bea:	f7ff ff8b 	bl	8000b04 <HAL_CAN_RxFifo1MsgPendingCallback>
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8000bee:	03b1      	lsls	r1, r6, #14
 8000bf0:	d508      	bpl.n	8000c04 <HAL_CAN_IRQHandler+0xf6>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8000bf2:	f019 0f10 	tst.w	r9, #16
 8000bf6:	d005      	beq.n	8000c04 <HAL_CAN_IRQHandler+0xf6>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8000bf8:	2210      	movs	r2, #16
 8000bfa:	682b      	ldr	r3, [r5, #0]

      /* Sleep Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8000bfc:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8000bfe:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 8000c00:	f7ff ff82 	bl	8000b08 <HAL_CAN_SleepCallback>
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8000c04:	03f2      	lsls	r2, r6, #15
 8000c06:	d508      	bpl.n	8000c1a <HAL_CAN_IRQHandler+0x10c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8000c08:	f019 0f08 	tst.w	r9, #8
 8000c0c:	d005      	beq.n	8000c1a <HAL_CAN_IRQHandler+0x10c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8000c0e:	2208      	movs	r2, #8
 8000c10:	682b      	ldr	r3, [r5, #0]

      /* WakeUp Callback */
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8000c12:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8000c14:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8000c16:	f7ff ff78 	bl	8000b0a <HAL_CAN_WakeUpFromRxMsgCallback>
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8000c1a:	0433      	lsls	r3, r6, #16
 8000c1c:	d52a      	bpl.n	8000c74 <HAL_CAN_IRQHandler+0x166>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8000c1e:	f019 0f04 	tst.w	r9, #4
 8000c22:	682a      	ldr	r2, [r5, #0]
 8000c24:	d024      	beq.n	8000c70 <HAL_CAN_IRQHandler+0x162>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000c26:	05f7      	lsls	r7, r6, #23
 8000c28:	d504      	bpl.n	8000c34 <HAL_CAN_IRQHandler+0x126>
 8000c2a:	f018 0f01 	tst.w	r8, #1
          ((esrflags & CAN_ESR_EWGF) != 0U))
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8000c2e:	bf18      	it	ne
 8000c30:	f044 0401 	orrne.w	r4, r4, #1

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000c34:	05b0      	lsls	r0, r6, #22
 8000c36:	d504      	bpl.n	8000c42 <HAL_CAN_IRQHandler+0x134>
 8000c38:	f018 0f02 	tst.w	r8, #2
          ((esrflags & CAN_ESR_EPVF) != 0U))
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8000c3c:	bf18      	it	ne
 8000c3e:	f044 0402 	orrne.w	r4, r4, #2

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000c42:	0571      	lsls	r1, r6, #21
 8000c44:	d504      	bpl.n	8000c50 <HAL_CAN_IRQHandler+0x142>
 8000c46:	f018 0f04 	tst.w	r8, #4
          ((esrflags & CAN_ESR_BOFF) != 0U))
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8000c4a:	bf18      	it	ne
 8000c4c:	f044 0404 	orrne.w	r4, r4, #4

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000c50:	0533      	lsls	r3, r6, #20
 8000c52:	d50d      	bpl.n	8000c70 <HAL_CAN_IRQHandler+0x162>
 8000c54:	f018 0370 	ands.w	r3, r8, #112	; 0x70
 8000c58:	d00a      	beq.n	8000c70 <HAL_CAN_IRQHandler+0x162>
          ((esrflags & CAN_ESR_LEC) != 0U))
      {
        switch (esrflags & CAN_ESR_LEC)
 8000c5a:	2b30      	cmp	r3, #48	; 0x30
 8000c5c:	d04c      	beq.n	8000cf8 <HAL_CAN_IRQHandler+0x1ea>
 8000c5e:	d83c      	bhi.n	8000cda <HAL_CAN_IRQHandler+0x1cc>
 8000c60:	2b10      	cmp	r3, #16
 8000c62:	d043      	beq.n	8000cec <HAL_CAN_IRQHandler+0x1de>
 8000c64:	2b20      	cmp	r3, #32
 8000c66:	d044      	beq.n	8000cf2 <HAL_CAN_IRQHandler+0x1e4>
          default:
            break;
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8000c68:	6993      	ldr	r3, [r2, #24]
 8000c6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000c6e:	6193      	str	r3, [r2, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8000c70:	2304      	movs	r3, #4
 8000c72:	6053      	str	r3, [r2, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8000c74:	b12c      	cbz	r4, 8000c82 <HAL_CAN_IRQHandler+0x174>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8000c76:	6a6b      	ldr	r3, [r5, #36]	; 0x24

    /* Call Error callback function */
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8000c78:	4628      	mov	r0, r5
    hcan->ErrorCode |= errorcode;
 8000c7a:	431c      	orrs	r4, r3
 8000c7c:	626c      	str	r4, [r5, #36]	; 0x24
    HAL_CAN_ErrorCallback(hcan);
 8000c7e:	f7ff ff45 	bl	8000b0c <HAL_CAN_ErrorCallback>
  }
}
 8000c82:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8000c86:	077a      	lsls	r2, r7, #29
 8000c88:	d405      	bmi.n	8000c96 <HAL_CAN_IRQHandler+0x188>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8000c8a:	f017 0408 	ands.w	r4, r7, #8
 8000c8e:	d105      	bne.n	8000c9c <HAL_CAN_IRQHandler+0x18e>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8000c90:	f7ff ff34 	bl	8000afc <HAL_CAN_TxMailbox0AbortCallback>
 8000c94:	e757      	b.n	8000b46 <HAL_CAN_IRQHandler+0x38>
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000c96:	f44f 6400 	mov.w	r4, #2048	; 0x800
 8000c9a:	e754      	b.n	8000b46 <HAL_CAN_IRQHandler+0x38>
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000c9c:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 8000ca0:	e751      	b.n	8000b46 <HAL_CAN_IRQHandler+0x38>
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8000ca2:	0579      	lsls	r1, r7, #21
 8000ca4:	d502      	bpl.n	8000cac <HAL_CAN_IRQHandler+0x19e>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8000ca6:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 8000caa:	e758      	b.n	8000b5e <HAL_CAN_IRQHandler+0x50>
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8000cac:	053a      	lsls	r2, r7, #20
 8000cae:	d502      	bpl.n	8000cb6 <HAL_CAN_IRQHandler+0x1a8>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8000cb0:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8000cb4:	e753      	b.n	8000b5e <HAL_CAN_IRQHandler+0x50>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8000cb6:	4628      	mov	r0, r5
 8000cb8:	f7ff ff21 	bl	8000afe <HAL_CAN_TxMailbox1AbortCallback>
 8000cbc:	e74f      	b.n	8000b5e <HAL_CAN_IRQHandler+0x50>
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8000cbe:	0379      	lsls	r1, r7, #13
 8000cc0:	d502      	bpl.n	8000cc8 <HAL_CAN_IRQHandler+0x1ba>
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8000cc2:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 8000cc6:	e756      	b.n	8000b76 <HAL_CAN_IRQHandler+0x68>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8000cc8:	033a      	lsls	r2, r7, #12
 8000cca:	d502      	bpl.n	8000cd2 <HAL_CAN_IRQHandler+0x1c4>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8000ccc:	f444 3480 	orr.w	r4, r4, #65536	; 0x10000
 8000cd0:	e751      	b.n	8000b76 <HAL_CAN_IRQHandler+0x68>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8000cd2:	4628      	mov	r0, r5
 8000cd4:	f7ff ff14 	bl	8000b00 <HAL_CAN_TxMailbox2AbortCallback>
 8000cd8:	e74d      	b.n	8000b76 <HAL_CAN_IRQHandler+0x68>
        switch (esrflags & CAN_ESR_LEC)
 8000cda:	2b50      	cmp	r3, #80	; 0x50
 8000cdc:	d00f      	beq.n	8000cfe <HAL_CAN_IRQHandler+0x1f0>
 8000cde:	2b60      	cmp	r3, #96	; 0x60
 8000ce0:	d010      	beq.n	8000d04 <HAL_CAN_IRQHandler+0x1f6>
 8000ce2:	2b40      	cmp	r3, #64	; 0x40
 8000ce4:	d1c0      	bne.n	8000c68 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_BR;
 8000ce6:	f044 0440 	orr.w	r4, r4, #64	; 0x40
            break;
 8000cea:	e7bd      	b.n	8000c68 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_STF;
 8000cec:	f044 0408 	orr.w	r4, r4, #8
            break;
 8000cf0:	e7ba      	b.n	8000c68 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8000cf2:	f044 0410 	orr.w	r4, r4, #16
            break;
 8000cf6:	e7b7      	b.n	8000c68 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8000cf8:	f044 0420 	orr.w	r4, r4, #32
            break;
 8000cfc:	e7b4      	b.n	8000c68 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_BD;
 8000cfe:	f044 0480 	orr.w	r4, r4, #128	; 0x80
            break;
 8000d02:	e7b1      	b.n	8000c68 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8000d04:	f444 7480 	orr.w	r4, r4, #256	; 0x100
            break;
 8000d08:	e7ae      	b.n	8000c68 <HAL_CAN_IRQHandler+0x15a>
	...

08000d0c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d0c:	4a07      	ldr	r2, [pc, #28]	; (8000d2c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000d0e:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d10:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000d12:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d16:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000d1a:	041b      	lsls	r3, r3, #16
 8000d1c:	0c1b      	lsrs	r3, r3, #16
 8000d1e:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000d26:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000d28:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000d2a:	4770      	bx	lr
 8000d2c:	e000ed00 	.word	0xe000ed00

08000d30 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d30:	4b17      	ldr	r3, [pc, #92]	; (8000d90 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d32:	b570      	push	{r4, r5, r6, lr}
 8000d34:	68dc      	ldr	r4, [r3, #12]

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d36:	f04f 36ff 	mov.w	r6, #4294967295
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d3a:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d3e:	f1c4 0507 	rsb	r5, r4, #7
 8000d42:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d44:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d48:	bf28      	it	cs
 8000d4a:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d4c:	2b06      	cmp	r3, #6
 8000d4e:	bf98      	it	ls
 8000d50:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d52:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d56:	bf88      	it	hi
 8000d58:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d5a:	ea21 0303 	bic.w	r3, r1, r3
 8000d5e:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d60:	fa06 f404 	lsl.w	r4, r6, r4
 8000d64:	ea22 0404 	bic.w	r4, r2, r4
  if ((int32_t)(IRQn) < 0)
 8000d68:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d6a:	ea43 0304 	orr.w	r3, r3, r4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d6e:	bfa8      	it	ge
 8000d70:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 8000d74:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d78:	bfb8      	it	lt
 8000d7a:	4a06      	ldrlt	r2, [pc, #24]	; (8000d94 <HAL_NVIC_SetPriority+0x64>)
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	bfb5      	itete	lt
 8000d80:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d84:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d88:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d8a:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000d8e:	bd70      	pop	{r4, r5, r6, pc}
 8000d90:	e000ed00 	.word	0xe000ed00
 8000d94:	e000ed14 	.word	0xe000ed14

08000d98 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000d98:	2301      	movs	r3, #1
 8000d9a:	0942      	lsrs	r2, r0, #5
 8000d9c:	f000 001f 	and.w	r0, r0, #31
 8000da0:	fa03 f000 	lsl.w	r0, r3, r0
 8000da4:	4b01      	ldr	r3, [pc, #4]	; (8000dac <HAL_NVIC_EnableIRQ+0x14>)
 8000da6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000daa:	4770      	bx	lr
 8000dac:	e000e100 	.word	0xe000e100

08000db0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000db0:	3801      	subs	r0, #1
 8000db2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000db6:	d20a      	bcs.n	8000dce <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000db8:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dba:	4b06      	ldr	r3, [pc, #24]	; (8000dd4 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dbc:	4a06      	ldr	r2, [pc, #24]	; (8000dd8 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dbe:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dc4:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dc6:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dc8:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000dce:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	e000e010 	.word	0xe000e010
 8000dd8:	e000ed00 	.word	0xe000ed00

08000ddc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000ddc:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000dde:	b330      	cbz	r0, 8000e2e <HAL_DMA_Init+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000de0:	2214      	movs	r2, #20
 8000de2:	6801      	ldr	r1, [r0, #0]
 8000de4:	4b13      	ldr	r3, [pc, #76]	; (8000e34 <HAL_DMA_Init+0x58>)
 8000de6:	440b      	add	r3, r1
 8000de8:	fbb3 f3f2 	udiv	r3, r3, r2
 8000dec:	009b      	lsls	r3, r3, #2
 8000dee:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000df0:	4b11      	ldr	r3, [pc, #68]	; (8000e38 <HAL_DMA_Init+0x5c>)

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000df2:	680a      	ldr	r2, [r1, #0]
  hdma->DmaBaseAddress = DMA1;
 8000df4:	63c3      	str	r3, [r0, #60]	; 0x3c
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000df6:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8000dfa:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000dfc:	68c4      	ldr	r4, [r0, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000dfe:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e02:	4323      	orrs	r3, r4
 8000e04:	6904      	ldr	r4, [r0, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000e06:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e0a:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e0c:	6944      	ldr	r4, [r0, #20]
 8000e0e:	4323      	orrs	r3, r4
 8000e10:	6984      	ldr	r4, [r0, #24]
 8000e12:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e14:	69c4      	ldr	r4, [r0, #28]
 8000e16:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8000e18:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000e1a:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000e1c:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e1e:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 8000e20:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e24:	6383      	str	r3, [r0, #56]	; 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000e26:	f880 3020 	strb.w	r3, [r0, #32]

  return HAL_OK;
 8000e2a:	4618      	mov	r0, r3
}
 8000e2c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000e2e:	2001      	movs	r0, #1
 8000e30:	e7fc      	b.n	8000e2c <HAL_DMA_Init+0x50>
 8000e32:	bf00      	nop
 8000e34:	bffdfff8 	.word	0xbffdfff8
 8000e38:	40020000 	.word	0x40020000

08000e3c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000e3c:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000e3e:	f890 4020 	ldrb.w	r4, [r0, #32]
 8000e42:	2c01      	cmp	r4, #1
 8000e44:	d035      	beq.n	8000eb2 <HAL_DMA_Start_IT+0x76>
 8000e46:	2401      	movs	r4, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000e48:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8000e4c:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8000e50:	42a5      	cmp	r5, r4
 8000e52:	f04f 0600 	mov.w	r6, #0
 8000e56:	f04f 0402 	mov.w	r4, #2
 8000e5a:	d128      	bne.n	8000eae <HAL_DMA_Start_IT+0x72>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000e5c:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000e60:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e62:	6386      	str	r6, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8000e64:	6826      	ldr	r6, [r4, #0]
 8000e66:	f026 0601 	bic.w	r6, r6, #1
 8000e6a:	6026      	str	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000e6c:	e9d0 670f 	ldrd	r6, r7, [r0, #60]	; 0x3c
 8000e70:	40bd      	lsls	r5, r7
 8000e72:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000e74:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000e76:	6843      	ldr	r3, [r0, #4]
 8000e78:	6805      	ldr	r5, [r0, #0]
 8000e7a:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 8000e7c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000e7e:	bf0b      	itete	eq
 8000e80:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8000e82:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8000e84:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8000e86:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 8000e88:	b14b      	cbz	r3, 8000e9e <HAL_DMA_Start_IT+0x62>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e8a:	6823      	ldr	r3, [r4, #0]
 8000e8c:	f043 030e 	orr.w	r3, r3, #14
  HAL_StatusTypeDef status = HAL_OK;
 8000e90:	2000      	movs	r0, #0
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000e92:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8000e94:	682b      	ldr	r3, [r5, #0]
 8000e96:	f043 0301 	orr.w	r3, r3, #1
 8000e9a:	602b      	str	r3, [r5, #0]
}
 8000e9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000e9e:	6823      	ldr	r3, [r4, #0]
 8000ea0:	f023 0304 	bic.w	r3, r3, #4
 8000ea4:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000ea6:	6823      	ldr	r3, [r4, #0]
 8000ea8:	f043 030a 	orr.w	r3, r3, #10
 8000eac:	e7f0      	b.n	8000e90 <HAL_DMA_Start_IT+0x54>
    __HAL_UNLOCK(hdma); 
 8000eae:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 8000eb2:	2002      	movs	r0, #2
 8000eb4:	e7f2      	b.n	8000e9c <HAL_DMA_Start_IT+0x60>
	...

08000eb8 <HAL_DMA_IRQHandler>:
{
 8000eb8:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000eba:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000ebc:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000ebe:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000ec0:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8000ec2:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000ec4:	4095      	lsls	r5, r2
 8000ec6:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 8000ec8:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000eca:	d032      	beq.n	8000f32 <HAL_DMA_IRQHandler+0x7a>
 8000ecc:	074d      	lsls	r5, r1, #29
 8000ece:	d530      	bpl.n	8000f32 <HAL_DMA_IRQHandler+0x7a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000ed4:	bf5e      	ittt	pl
 8000ed6:	681a      	ldrpl	r2, [r3, #0]
 8000ed8:	f022 0204 	bicpl.w	r2, r2, #4
 8000edc:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000ede:	4a3e      	ldr	r2, [pc, #248]	; (8000fd8 <HAL_DMA_IRQHandler+0x120>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d019      	beq.n	8000f18 <HAL_DMA_IRQHandler+0x60>
 8000ee4:	3214      	adds	r2, #20
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d018      	beq.n	8000f1c <HAL_DMA_IRQHandler+0x64>
 8000eea:	3214      	adds	r2, #20
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d017      	beq.n	8000f20 <HAL_DMA_IRQHandler+0x68>
 8000ef0:	3214      	adds	r2, #20
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d017      	beq.n	8000f26 <HAL_DMA_IRQHandler+0x6e>
 8000ef6:	3214      	adds	r2, #20
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d017      	beq.n	8000f2c <HAL_DMA_IRQHandler+0x74>
 8000efc:	3214      	adds	r2, #20
 8000efe:	4293      	cmp	r3, r2
 8000f00:	bf0c      	ite	eq
 8000f02:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 8000f06:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 8000f0a:	4a34      	ldr	r2, [pc, #208]	; (8000fdc <HAL_DMA_IRQHandler+0x124>)
 8000f0c:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8000f0e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d05e      	beq.n	8000fd2 <HAL_DMA_IRQHandler+0x11a>
}
 8000f14:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8000f16:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000f18:	2304      	movs	r3, #4
 8000f1a:	e7f6      	b.n	8000f0a <HAL_DMA_IRQHandler+0x52>
 8000f1c:	2340      	movs	r3, #64	; 0x40
 8000f1e:	e7f4      	b.n	8000f0a <HAL_DMA_IRQHandler+0x52>
 8000f20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f24:	e7f1      	b.n	8000f0a <HAL_DMA_IRQHandler+0x52>
 8000f26:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f2a:	e7ee      	b.n	8000f0a <HAL_DMA_IRQHandler+0x52>
 8000f2c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000f30:	e7eb      	b.n	8000f0a <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000f32:	2502      	movs	r5, #2
 8000f34:	4095      	lsls	r5, r2
 8000f36:	4225      	tst	r5, r4
 8000f38:	d035      	beq.n	8000fa6 <HAL_DMA_IRQHandler+0xee>
 8000f3a:	078d      	lsls	r5, r1, #30
 8000f3c:	d533      	bpl.n	8000fa6 <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	0694      	lsls	r4, r2, #26
 8000f42:	d406      	bmi.n	8000f52 <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	f022 020a 	bic.w	r2, r2, #10
 8000f4a:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000f52:	4a21      	ldr	r2, [pc, #132]	; (8000fd8 <HAL_DMA_IRQHandler+0x120>)
 8000f54:	4293      	cmp	r3, r2
 8000f56:	d019      	beq.n	8000f8c <HAL_DMA_IRQHandler+0xd4>
 8000f58:	3214      	adds	r2, #20
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d018      	beq.n	8000f90 <HAL_DMA_IRQHandler+0xd8>
 8000f5e:	3214      	adds	r2, #20
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d017      	beq.n	8000f94 <HAL_DMA_IRQHandler+0xdc>
 8000f64:	3214      	adds	r2, #20
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d017      	beq.n	8000f9a <HAL_DMA_IRQHandler+0xe2>
 8000f6a:	3214      	adds	r2, #20
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	d017      	beq.n	8000fa0 <HAL_DMA_IRQHandler+0xe8>
 8000f70:	3214      	adds	r2, #20
 8000f72:	4293      	cmp	r3, r2
 8000f74:	bf0c      	ite	eq
 8000f76:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8000f7a:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 8000f7e:	4a17      	ldr	r2, [pc, #92]	; (8000fdc <HAL_DMA_IRQHandler+0x124>)
 8000f80:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8000f82:	2300      	movs	r3, #0
 8000f84:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8000f88:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000f8a:	e7c1      	b.n	8000f10 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	e7f6      	b.n	8000f7e <HAL_DMA_IRQHandler+0xc6>
 8000f90:	2320      	movs	r3, #32
 8000f92:	e7f4      	b.n	8000f7e <HAL_DMA_IRQHandler+0xc6>
 8000f94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f98:	e7f1      	b.n	8000f7e <HAL_DMA_IRQHandler+0xc6>
 8000f9a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f9e:	e7ee      	b.n	8000f7e <HAL_DMA_IRQHandler+0xc6>
 8000fa0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fa4:	e7eb      	b.n	8000f7e <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000fa6:	2508      	movs	r5, #8
 8000fa8:	4095      	lsls	r5, r2
 8000faa:	4225      	tst	r5, r4
 8000fac:	d011      	beq.n	8000fd2 <HAL_DMA_IRQHandler+0x11a>
 8000fae:	0709      	lsls	r1, r1, #28
 8000fb0:	d50f      	bpl.n	8000fd2 <HAL_DMA_IRQHandler+0x11a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fb2:	6819      	ldr	r1, [r3, #0]
 8000fb4:	f021 010e 	bic.w	r1, r1, #14
 8000fb8:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000fba:	2301      	movs	r3, #1
 8000fbc:	fa03 f202 	lsl.w	r2, r3, r2
 8000fc0:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000fc2:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8000fc4:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8000fc8:	2300      	movs	r3, #0
 8000fca:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8000fce:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8000fd0:	e79e      	b.n	8000f10 <HAL_DMA_IRQHandler+0x58>
}
 8000fd2:	bc70      	pop	{r4, r5, r6}
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	40020008 	.word	0x40020008
 8000fdc:	40020000 	.word	0x40020000

08000fe0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fe0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 8000fe4:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000fe6:	4616      	mov	r6, r2
 8000fe8:	4b65      	ldr	r3, [pc, #404]	; (8001180 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000fea:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8001190 <HAL_GPIO_Init+0x1b0>
 8000fee:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8001194 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 8000ff2:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ff6:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 8000ff8:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ffc:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 8001000:	45a0      	cmp	r8, r4
 8001002:	d17e      	bne.n	8001102 <HAL_GPIO_Init+0x122>
      switch (GPIO_Init->Mode)
 8001004:	684d      	ldr	r5, [r1, #4]
 8001006:	2d12      	cmp	r5, #18
 8001008:	f000 80ae 	beq.w	8001168 <HAL_GPIO_Init+0x188>
 800100c:	f200 8087 	bhi.w	800111e <HAL_GPIO_Init+0x13e>
 8001010:	2d02      	cmp	r5, #2
 8001012:	f000 80a6 	beq.w	8001162 <HAL_GPIO_Init+0x182>
 8001016:	d87b      	bhi.n	8001110 <HAL_GPIO_Init+0x130>
 8001018:	2d00      	cmp	r5, #0
 800101a:	f000 808d 	beq.w	8001138 <HAL_GPIO_Init+0x158>
 800101e:	2d01      	cmp	r5, #1
 8001020:	f000 809d 	beq.w	800115e <HAL_GPIO_Init+0x17e>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001024:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001028:	2cff      	cmp	r4, #255	; 0xff
 800102a:	bf93      	iteet	ls
 800102c:	4682      	movls	sl, r0
 800102e:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8001032:	3d08      	subhi	r5, #8
 8001034:	f8d0 b000 	ldrls.w	fp, [r0]
 8001038:	bf92      	itee	ls
 800103a:	00b5      	lslls	r5, r6, #2
 800103c:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8001040:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001042:	fa09 f805 	lsl.w	r8, r9, r5
 8001046:	ea2b 0808 	bic.w	r8, fp, r8
 800104a:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800104e:	bf88      	it	hi
 8001050:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001054:	ea48 0505 	orr.w	r5, r8, r5
 8001058:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800105c:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8001060:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8001064:	d04d      	beq.n	8001102 <HAL_GPIO_Init+0x122>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001066:	4f47      	ldr	r7, [pc, #284]	; (8001184 <HAL_GPIO_Init+0x1a4>)
 8001068:	f026 0803 	bic.w	r8, r6, #3
 800106c:	69bd      	ldr	r5, [r7, #24]
 800106e:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8001072:	f045 0501 	orr.w	r5, r5, #1
 8001076:	61bd      	str	r5, [r7, #24]
 8001078:	69bd      	ldr	r5, [r7, #24]
 800107a:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 800107e:	f005 0501 	and.w	r5, r5, #1
 8001082:	9501      	str	r5, [sp, #4]
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001084:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001088:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800108a:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 800108e:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001092:	fa09 f90b 	lsl.w	r9, r9, fp
 8001096:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800109a:	4d3b      	ldr	r5, [pc, #236]	; (8001188 <HAL_GPIO_Init+0x1a8>)
 800109c:	42a8      	cmp	r0, r5
 800109e:	d068      	beq.n	8001172 <HAL_GPIO_Init+0x192>
 80010a0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80010a4:	42a8      	cmp	r0, r5
 80010a6:	d066      	beq.n	8001176 <HAL_GPIO_Init+0x196>
 80010a8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80010ac:	42a8      	cmp	r0, r5
 80010ae:	d064      	beq.n	800117a <HAL_GPIO_Init+0x19a>
 80010b0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80010b4:	42a8      	cmp	r0, r5
 80010b6:	bf0c      	ite	eq
 80010b8:	2503      	moveq	r5, #3
 80010ba:	2504      	movne	r5, #4
 80010bc:	fa05 f50b 	lsl.w	r5, r5, fp
 80010c0:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 80010c4:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80010c8:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010ca:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80010ce:	bf14      	ite	ne
 80010d0:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80010d2:	43a5      	biceq	r5, r4
 80010d4:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80010d6:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010d8:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80010dc:	bf14      	ite	ne
 80010de:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80010e0:	43a5      	biceq	r5, r4
 80010e2:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80010e4:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010e6:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80010ea:	bf14      	ite	ne
 80010ec:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80010ee:	43a5      	biceq	r5, r4
 80010f0:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80010f2:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010f4:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80010f8:	bf14      	ite	ne
 80010fa:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80010fc:	ea25 0404 	biceq.w	r4, r5, r4
 8001100:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8001102:	3601      	adds	r6, #1
 8001104:	2e10      	cmp	r6, #16
 8001106:	f47f af74 	bne.w	8000ff2 <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 800110a:	b003      	add	sp, #12
 800110c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8001110:	2d03      	cmp	r5, #3
 8001112:	d022      	beq.n	800115a <HAL_GPIO_Init+0x17a>
 8001114:	2d11      	cmp	r5, #17
 8001116:	d185      	bne.n	8001024 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001118:	68ca      	ldr	r2, [r1, #12]
 800111a:	3204      	adds	r2, #4
          break;
 800111c:	e782      	b.n	8001024 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 800111e:	4f1b      	ldr	r7, [pc, #108]	; (800118c <HAL_GPIO_Init+0x1ac>)
 8001120:	42bd      	cmp	r5, r7
 8001122:	d009      	beq.n	8001138 <HAL_GPIO_Init+0x158>
 8001124:	d812      	bhi.n	800114c <HAL_GPIO_Init+0x16c>
 8001126:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8001198 <HAL_GPIO_Init+0x1b8>
 800112a:	454d      	cmp	r5, r9
 800112c:	d004      	beq.n	8001138 <HAL_GPIO_Init+0x158>
 800112e:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8001132:	454d      	cmp	r5, r9
 8001134:	f47f af76 	bne.w	8001024 <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001138:	688a      	ldr	r2, [r1, #8]
 800113a:	b1c2      	cbz	r2, 800116e <HAL_GPIO_Init+0x18e>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800113c:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 800113e:	bf0c      	ite	eq
 8001140:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8001144:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001148:	2208      	movs	r2, #8
 800114a:	e76b      	b.n	8001024 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 800114c:	4565      	cmp	r5, ip
 800114e:	d0f3      	beq.n	8001138 <HAL_GPIO_Init+0x158>
 8001150:	4575      	cmp	r5, lr
 8001152:	d0f1      	beq.n	8001138 <HAL_GPIO_Init+0x158>
 8001154:	f8df 9044 	ldr.w	r9, [pc, #68]	; 800119c <HAL_GPIO_Init+0x1bc>
 8001158:	e7eb      	b.n	8001132 <HAL_GPIO_Init+0x152>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800115a:	2200      	movs	r2, #0
 800115c:	e762      	b.n	8001024 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800115e:	68ca      	ldr	r2, [r1, #12]
          break;
 8001160:	e760      	b.n	8001024 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001162:	68ca      	ldr	r2, [r1, #12]
 8001164:	3208      	adds	r2, #8
          break;
 8001166:	e75d      	b.n	8001024 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001168:	68ca      	ldr	r2, [r1, #12]
 800116a:	320c      	adds	r2, #12
          break;
 800116c:	e75a      	b.n	8001024 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800116e:	2204      	movs	r2, #4
 8001170:	e758      	b.n	8001024 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001172:	2500      	movs	r5, #0
 8001174:	e7a2      	b.n	80010bc <HAL_GPIO_Init+0xdc>
 8001176:	2501      	movs	r5, #1
 8001178:	e7a0      	b.n	80010bc <HAL_GPIO_Init+0xdc>
 800117a:	2502      	movs	r5, #2
 800117c:	e79e      	b.n	80010bc <HAL_GPIO_Init+0xdc>
 800117e:	bf00      	nop
 8001180:	40010400 	.word	0x40010400
 8001184:	40021000 	.word	0x40021000
 8001188:	40010800 	.word	0x40010800
 800118c:	10210000 	.word	0x10210000
 8001190:	10310000 	.word	0x10310000
 8001194:	10320000 	.word	0x10320000
 8001198:	10110000 	.word	0x10110000
 800119c:	10220000 	.word	0x10220000

080011a0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011a0:	b10a      	cbz	r2, 80011a6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011a2:	6101      	str	r1, [r0, #16]
  }
}
 80011a4:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011a6:	0409      	lsls	r1, r1, #16
 80011a8:	e7fb      	b.n	80011a2 <HAL_GPIO_WritePin+0x2>

080011aa <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80011aa:	68c3      	ldr	r3, [r0, #12]
 80011ac:	4059      	eors	r1, r3
 80011ae:	60c1      	str	r1, [r0, #12]
}
 80011b0:	4770      	bx	lr
	...

080011b4 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011b4:	6803      	ldr	r3, [r0, #0]
{
 80011b6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011ba:	07db      	lsls	r3, r3, #31
{
 80011bc:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011be:	d410      	bmi.n	80011e2 <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011c0:	682b      	ldr	r3, [r5, #0]
 80011c2:	079f      	lsls	r7, r3, #30
 80011c4:	d45e      	bmi.n	8001284 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011c6:	682b      	ldr	r3, [r5, #0]
 80011c8:	0719      	lsls	r1, r3, #28
 80011ca:	f100 8095 	bmi.w	80012f8 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011ce:	682b      	ldr	r3, [r5, #0]
 80011d0:	075a      	lsls	r2, r3, #29
 80011d2:	f100 80bf 	bmi.w	8001354 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80011d6:	69ea      	ldr	r2, [r5, #28]
 80011d8:	2a00      	cmp	r2, #0
 80011da:	f040 812d 	bne.w	8001438 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80011de:	2000      	movs	r0, #0
 80011e0:	e014      	b.n	800120c <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80011e2:	4c90      	ldr	r4, [pc, #576]	; (8001424 <HAL_RCC_OscConfig+0x270>)
 80011e4:	6863      	ldr	r3, [r4, #4]
 80011e6:	f003 030c 	and.w	r3, r3, #12
 80011ea:	2b04      	cmp	r3, #4
 80011ec:	d007      	beq.n	80011fe <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80011ee:	6863      	ldr	r3, [r4, #4]
 80011f0:	f003 030c 	and.w	r3, r3, #12
 80011f4:	2b08      	cmp	r3, #8
 80011f6:	d10c      	bne.n	8001212 <HAL_RCC_OscConfig+0x5e>
 80011f8:	6863      	ldr	r3, [r4, #4]
 80011fa:	03de      	lsls	r6, r3, #15
 80011fc:	d509      	bpl.n	8001212 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011fe:	6823      	ldr	r3, [r4, #0]
 8001200:	039c      	lsls	r4, r3, #14
 8001202:	d5dd      	bpl.n	80011c0 <HAL_RCC_OscConfig+0xc>
 8001204:	686b      	ldr	r3, [r5, #4]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d1da      	bne.n	80011c0 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 800120a:	2001      	movs	r0, #1
}
 800120c:	b002      	add	sp, #8
 800120e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001212:	686b      	ldr	r3, [r5, #4]
 8001214:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001218:	d110      	bne.n	800123c <HAL_RCC_OscConfig+0x88>
 800121a:	6823      	ldr	r3, [r4, #0]
 800121c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001220:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001222:	f7fe ffd5 	bl	80001d0 <HAL_GetTick>
 8001226:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001228:	6823      	ldr	r3, [r4, #0]
 800122a:	0398      	lsls	r0, r3, #14
 800122c:	d4c8      	bmi.n	80011c0 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800122e:	f7fe ffcf 	bl	80001d0 <HAL_GetTick>
 8001232:	1b80      	subs	r0, r0, r6
 8001234:	2864      	cmp	r0, #100	; 0x64
 8001236:	d9f7      	bls.n	8001228 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8001238:	2003      	movs	r0, #3
 800123a:	e7e7      	b.n	800120c <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800123c:	b99b      	cbnz	r3, 8001266 <HAL_RCC_OscConfig+0xb2>
 800123e:	6823      	ldr	r3, [r4, #0]
 8001240:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001244:	6023      	str	r3, [r4, #0]
 8001246:	6823      	ldr	r3, [r4, #0]
 8001248:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800124c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800124e:	f7fe ffbf 	bl	80001d0 <HAL_GetTick>
 8001252:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001254:	6823      	ldr	r3, [r4, #0]
 8001256:	0399      	lsls	r1, r3, #14
 8001258:	d5b2      	bpl.n	80011c0 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800125a:	f7fe ffb9 	bl	80001d0 <HAL_GetTick>
 800125e:	1b80      	subs	r0, r0, r6
 8001260:	2864      	cmp	r0, #100	; 0x64
 8001262:	d9f7      	bls.n	8001254 <HAL_RCC_OscConfig+0xa0>
 8001264:	e7e8      	b.n	8001238 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001266:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800126a:	6823      	ldr	r3, [r4, #0]
 800126c:	d103      	bne.n	8001276 <HAL_RCC_OscConfig+0xc2>
 800126e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001272:	6023      	str	r3, [r4, #0]
 8001274:	e7d1      	b.n	800121a <HAL_RCC_OscConfig+0x66>
 8001276:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800127a:	6023      	str	r3, [r4, #0]
 800127c:	6823      	ldr	r3, [r4, #0]
 800127e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001282:	e7cd      	b.n	8001220 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001284:	4c67      	ldr	r4, [pc, #412]	; (8001424 <HAL_RCC_OscConfig+0x270>)
 8001286:	6863      	ldr	r3, [r4, #4]
 8001288:	f013 0f0c 	tst.w	r3, #12
 800128c:	d007      	beq.n	800129e <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800128e:	6863      	ldr	r3, [r4, #4]
 8001290:	f003 030c 	and.w	r3, r3, #12
 8001294:	2b08      	cmp	r3, #8
 8001296:	d110      	bne.n	80012ba <HAL_RCC_OscConfig+0x106>
 8001298:	6863      	ldr	r3, [r4, #4]
 800129a:	03da      	lsls	r2, r3, #15
 800129c:	d40d      	bmi.n	80012ba <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800129e:	6823      	ldr	r3, [r4, #0]
 80012a0:	079b      	lsls	r3, r3, #30
 80012a2:	d502      	bpl.n	80012aa <HAL_RCC_OscConfig+0xf6>
 80012a4:	692b      	ldr	r3, [r5, #16]
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d1af      	bne.n	800120a <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012aa:	6823      	ldr	r3, [r4, #0]
 80012ac:	696a      	ldr	r2, [r5, #20]
 80012ae:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80012b2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80012b6:	6023      	str	r3, [r4, #0]
 80012b8:	e785      	b.n	80011c6 <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012ba:	692a      	ldr	r2, [r5, #16]
 80012bc:	4b5a      	ldr	r3, [pc, #360]	; (8001428 <HAL_RCC_OscConfig+0x274>)
 80012be:	b16a      	cbz	r2, 80012dc <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 80012c0:	2201      	movs	r2, #1
 80012c2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80012c4:	f7fe ff84 	bl	80001d0 <HAL_GetTick>
 80012c8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012ca:	6823      	ldr	r3, [r4, #0]
 80012cc:	079f      	lsls	r7, r3, #30
 80012ce:	d4ec      	bmi.n	80012aa <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012d0:	f7fe ff7e 	bl	80001d0 <HAL_GetTick>
 80012d4:	1b80      	subs	r0, r0, r6
 80012d6:	2802      	cmp	r0, #2
 80012d8:	d9f7      	bls.n	80012ca <HAL_RCC_OscConfig+0x116>
 80012da:	e7ad      	b.n	8001238 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 80012dc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80012de:	f7fe ff77 	bl	80001d0 <HAL_GetTick>
 80012e2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012e4:	6823      	ldr	r3, [r4, #0]
 80012e6:	0798      	lsls	r0, r3, #30
 80012e8:	f57f af6d 	bpl.w	80011c6 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012ec:	f7fe ff70 	bl	80001d0 <HAL_GetTick>
 80012f0:	1b80      	subs	r0, r0, r6
 80012f2:	2802      	cmp	r0, #2
 80012f4:	d9f6      	bls.n	80012e4 <HAL_RCC_OscConfig+0x130>
 80012f6:	e79f      	b.n	8001238 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012f8:	69aa      	ldr	r2, [r5, #24]
 80012fa:	4c4a      	ldr	r4, [pc, #296]	; (8001424 <HAL_RCC_OscConfig+0x270>)
 80012fc:	4b4b      	ldr	r3, [pc, #300]	; (800142c <HAL_RCC_OscConfig+0x278>)
 80012fe:	b1da      	cbz	r2, 8001338 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8001300:	2201      	movs	r2, #1
 8001302:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001304:	f7fe ff64 	bl	80001d0 <HAL_GetTick>
 8001308:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800130a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800130c:	079b      	lsls	r3, r3, #30
 800130e:	d50d      	bpl.n	800132c <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001310:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001314:	4b46      	ldr	r3, [pc, #280]	; (8001430 <HAL_RCC_OscConfig+0x27c>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	fbb3 f3f2 	udiv	r3, r3, r2
 800131c:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 800131e:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8001320:	9b01      	ldr	r3, [sp, #4]
 8001322:	1e5a      	subs	r2, r3, #1
 8001324:	9201      	str	r2, [sp, #4]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d1f9      	bne.n	800131e <HAL_RCC_OscConfig+0x16a>
 800132a:	e750      	b.n	80011ce <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800132c:	f7fe ff50 	bl	80001d0 <HAL_GetTick>
 8001330:	1b80      	subs	r0, r0, r6
 8001332:	2802      	cmp	r0, #2
 8001334:	d9e9      	bls.n	800130a <HAL_RCC_OscConfig+0x156>
 8001336:	e77f      	b.n	8001238 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8001338:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800133a:	f7fe ff49 	bl	80001d0 <HAL_GetTick>
 800133e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001340:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001342:	079f      	lsls	r7, r3, #30
 8001344:	f57f af43 	bpl.w	80011ce <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001348:	f7fe ff42 	bl	80001d0 <HAL_GetTick>
 800134c:	1b80      	subs	r0, r0, r6
 800134e:	2802      	cmp	r0, #2
 8001350:	d9f6      	bls.n	8001340 <HAL_RCC_OscConfig+0x18c>
 8001352:	e771      	b.n	8001238 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001354:	4c33      	ldr	r4, [pc, #204]	; (8001424 <HAL_RCC_OscConfig+0x270>)
 8001356:	69e3      	ldr	r3, [r4, #28]
 8001358:	00d8      	lsls	r0, r3, #3
 800135a:	d424      	bmi.n	80013a6 <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 800135c:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800135e:	69e3      	ldr	r3, [r4, #28]
 8001360:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001364:	61e3      	str	r3, [r4, #28]
 8001366:	69e3      	ldr	r3, [r4, #28]
 8001368:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800136c:	9300      	str	r3, [sp, #0]
 800136e:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001370:	4e30      	ldr	r6, [pc, #192]	; (8001434 <HAL_RCC_OscConfig+0x280>)
 8001372:	6833      	ldr	r3, [r6, #0]
 8001374:	05d9      	lsls	r1, r3, #23
 8001376:	d518      	bpl.n	80013aa <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001378:	68eb      	ldr	r3, [r5, #12]
 800137a:	2b01      	cmp	r3, #1
 800137c:	d126      	bne.n	80013cc <HAL_RCC_OscConfig+0x218>
 800137e:	6a23      	ldr	r3, [r4, #32]
 8001380:	f043 0301 	orr.w	r3, r3, #1
 8001384:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001386:	f7fe ff23 	bl	80001d0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800138a:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800138e:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001390:	6a23      	ldr	r3, [r4, #32]
 8001392:	079b      	lsls	r3, r3, #30
 8001394:	d53f      	bpl.n	8001416 <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8001396:	2f00      	cmp	r7, #0
 8001398:	f43f af1d 	beq.w	80011d6 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 800139c:	69e3      	ldr	r3, [r4, #28]
 800139e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013a2:	61e3      	str	r3, [r4, #28]
 80013a4:	e717      	b.n	80011d6 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 80013a6:	2700      	movs	r7, #0
 80013a8:	e7e2      	b.n	8001370 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013aa:	6833      	ldr	r3, [r6, #0]
 80013ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013b0:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80013b2:	f7fe ff0d 	bl	80001d0 <HAL_GetTick>
 80013b6:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013b8:	6833      	ldr	r3, [r6, #0]
 80013ba:	05da      	lsls	r2, r3, #23
 80013bc:	d4dc      	bmi.n	8001378 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013be:	f7fe ff07 	bl	80001d0 <HAL_GetTick>
 80013c2:	eba0 0008 	sub.w	r0, r0, r8
 80013c6:	2864      	cmp	r0, #100	; 0x64
 80013c8:	d9f6      	bls.n	80013b8 <HAL_RCC_OscConfig+0x204>
 80013ca:	e735      	b.n	8001238 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013cc:	b9ab      	cbnz	r3, 80013fa <HAL_RCC_OscConfig+0x246>
 80013ce:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013d0:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013d4:	f023 0301 	bic.w	r3, r3, #1
 80013d8:	6223      	str	r3, [r4, #32]
 80013da:	6a23      	ldr	r3, [r4, #32]
 80013dc:	f023 0304 	bic.w	r3, r3, #4
 80013e0:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80013e2:	f7fe fef5 	bl	80001d0 <HAL_GetTick>
 80013e6:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013e8:	6a23      	ldr	r3, [r4, #32]
 80013ea:	0798      	lsls	r0, r3, #30
 80013ec:	d5d3      	bpl.n	8001396 <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013ee:	f7fe feef 	bl	80001d0 <HAL_GetTick>
 80013f2:	1b80      	subs	r0, r0, r6
 80013f4:	4540      	cmp	r0, r8
 80013f6:	d9f7      	bls.n	80013e8 <HAL_RCC_OscConfig+0x234>
 80013f8:	e71e      	b.n	8001238 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013fa:	2b05      	cmp	r3, #5
 80013fc:	6a23      	ldr	r3, [r4, #32]
 80013fe:	d103      	bne.n	8001408 <HAL_RCC_OscConfig+0x254>
 8001400:	f043 0304 	orr.w	r3, r3, #4
 8001404:	6223      	str	r3, [r4, #32]
 8001406:	e7ba      	b.n	800137e <HAL_RCC_OscConfig+0x1ca>
 8001408:	f023 0301 	bic.w	r3, r3, #1
 800140c:	6223      	str	r3, [r4, #32]
 800140e:	6a23      	ldr	r3, [r4, #32]
 8001410:	f023 0304 	bic.w	r3, r3, #4
 8001414:	e7b6      	b.n	8001384 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001416:	f7fe fedb 	bl	80001d0 <HAL_GetTick>
 800141a:	eba0 0008 	sub.w	r0, r0, r8
 800141e:	42b0      	cmp	r0, r6
 8001420:	d9b6      	bls.n	8001390 <HAL_RCC_OscConfig+0x1dc>
 8001422:	e709      	b.n	8001238 <HAL_RCC_OscConfig+0x84>
 8001424:	40021000 	.word	0x40021000
 8001428:	42420000 	.word	0x42420000
 800142c:	42420480 	.word	0x42420480
 8001430:	20000008 	.word	0x20000008
 8001434:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001438:	4c22      	ldr	r4, [pc, #136]	; (80014c4 <HAL_RCC_OscConfig+0x310>)
 800143a:	6863      	ldr	r3, [r4, #4]
 800143c:	f003 030c 	and.w	r3, r3, #12
 8001440:	2b08      	cmp	r3, #8
 8001442:	f43f aee2 	beq.w	800120a <HAL_RCC_OscConfig+0x56>
 8001446:	2300      	movs	r3, #0
 8001448:	4e1f      	ldr	r6, [pc, #124]	; (80014c8 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800144a:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 800144c:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800144e:	d12b      	bne.n	80014a8 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8001450:	f7fe febe 	bl	80001d0 <HAL_GetTick>
 8001454:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001456:	6823      	ldr	r3, [r4, #0]
 8001458:	0199      	lsls	r1, r3, #6
 800145a:	d41f      	bmi.n	800149c <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800145c:	6a2b      	ldr	r3, [r5, #32]
 800145e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001462:	d105      	bne.n	8001470 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001464:	6862      	ldr	r2, [r4, #4]
 8001466:	68a9      	ldr	r1, [r5, #8]
 8001468:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800146c:	430a      	orrs	r2, r1
 800146e:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001470:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8001472:	6862      	ldr	r2, [r4, #4]
 8001474:	430b      	orrs	r3, r1
 8001476:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 800147a:	4313      	orrs	r3, r2
 800147c:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800147e:	2301      	movs	r3, #1
 8001480:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001482:	f7fe fea5 	bl	80001d0 <HAL_GetTick>
 8001486:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001488:	6823      	ldr	r3, [r4, #0]
 800148a:	019a      	lsls	r2, r3, #6
 800148c:	f53f aea7 	bmi.w	80011de <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001490:	f7fe fe9e 	bl	80001d0 <HAL_GetTick>
 8001494:	1b40      	subs	r0, r0, r5
 8001496:	2802      	cmp	r0, #2
 8001498:	d9f6      	bls.n	8001488 <HAL_RCC_OscConfig+0x2d4>
 800149a:	e6cd      	b.n	8001238 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800149c:	f7fe fe98 	bl	80001d0 <HAL_GetTick>
 80014a0:	1bc0      	subs	r0, r0, r7
 80014a2:	2802      	cmp	r0, #2
 80014a4:	d9d7      	bls.n	8001456 <HAL_RCC_OscConfig+0x2a2>
 80014a6:	e6c7      	b.n	8001238 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 80014a8:	f7fe fe92 	bl	80001d0 <HAL_GetTick>
 80014ac:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014ae:	6823      	ldr	r3, [r4, #0]
 80014b0:	019b      	lsls	r3, r3, #6
 80014b2:	f57f ae94 	bpl.w	80011de <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014b6:	f7fe fe8b 	bl	80001d0 <HAL_GetTick>
 80014ba:	1b40      	subs	r0, r0, r5
 80014bc:	2802      	cmp	r0, #2
 80014be:	d9f6      	bls.n	80014ae <HAL_RCC_OscConfig+0x2fa>
 80014c0:	e6ba      	b.n	8001238 <HAL_RCC_OscConfig+0x84>
 80014c2:	bf00      	nop
 80014c4:	40021000 	.word	0x40021000
 80014c8:	42420060 	.word	0x42420060

080014cc <HAL_RCC_GetSysClockFreq>:
{
 80014cc:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80014ce:	4b18      	ldr	r3, [pc, #96]	; (8001530 <HAL_RCC_GetSysClockFreq+0x64>)
{
 80014d0:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80014d2:	ac02      	add	r4, sp, #8
 80014d4:	f103 0510 	add.w	r5, r3, #16
 80014d8:	4622      	mov	r2, r4
 80014da:	6818      	ldr	r0, [r3, #0]
 80014dc:	6859      	ldr	r1, [r3, #4]
 80014de:	3308      	adds	r3, #8
 80014e0:	c203      	stmia	r2!, {r0, r1}
 80014e2:	42ab      	cmp	r3, r5
 80014e4:	4614      	mov	r4, r2
 80014e6:	d1f7      	bne.n	80014d8 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80014e8:	f240 2301 	movw	r3, #513	; 0x201
  tmpreg = RCC->CFGR;
 80014ec:	4911      	ldr	r1, [pc, #68]	; (8001534 <HAL_RCC_GetSysClockFreq+0x68>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80014ee:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 80014f2:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80014f4:	f003 020c 	and.w	r2, r3, #12
 80014f8:	2a08      	cmp	r2, #8
 80014fa:	d117      	bne.n	800152c <HAL_RCC_GetSysClockFreq+0x60>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80014fc:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001500:	a806      	add	r0, sp, #24
 8001502:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001504:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001506:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800150a:	d50c      	bpl.n	8001526 <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800150c:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800150e:	480a      	ldr	r0, [pc, #40]	; (8001538 <HAL_RCC_GetSysClockFreq+0x6c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001510:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001514:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001516:	aa06      	add	r2, sp, #24
 8001518:	4413      	add	r3, r2
 800151a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800151e:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8001522:	b007      	add	sp, #28
 8001524:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001526:	4805      	ldr	r0, [pc, #20]	; (800153c <HAL_RCC_GetSysClockFreq+0x70>)
 8001528:	4350      	muls	r0, r2
 800152a:	e7fa      	b.n	8001522 <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
 800152c:	4802      	ldr	r0, [pc, #8]	; (8001538 <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 800152e:	e7f8      	b.n	8001522 <HAL_RCC_GetSysClockFreq+0x56>
 8001530:	08002310 	.word	0x08002310
 8001534:	40021000 	.word	0x40021000
 8001538:	007a1200 	.word	0x007a1200
 800153c:	003d0900 	.word	0x003d0900

08001540 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001540:	4a53      	ldr	r2, [pc, #332]	; (8001690 <HAL_RCC_ClockConfig+0x150>)
{
 8001542:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001546:	6813      	ldr	r3, [r2, #0]
{
 8001548:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800154a:	f003 0307 	and.w	r3, r3, #7
 800154e:	428b      	cmp	r3, r1
{
 8001550:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001552:	d328      	bcc.n	80015a6 <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001554:	6829      	ldr	r1, [r5, #0]
 8001556:	078c      	lsls	r4, r1, #30
 8001558:	d432      	bmi.n	80015c0 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800155a:	07ca      	lsls	r2, r1, #31
 800155c:	d445      	bmi.n	80015ea <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800155e:	4a4c      	ldr	r2, [pc, #304]	; (8001690 <HAL_RCC_ClockConfig+0x150>)
 8001560:	6813      	ldr	r3, [r2, #0]
 8001562:	f003 0307 	and.w	r3, r3, #7
 8001566:	42b3      	cmp	r3, r6
 8001568:	d87f      	bhi.n	800166a <HAL_RCC_ClockConfig+0x12a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800156a:	682a      	ldr	r2, [r5, #0]
 800156c:	4c49      	ldr	r4, [pc, #292]	; (8001694 <HAL_RCC_ClockConfig+0x154>)
 800156e:	f012 0f04 	tst.w	r2, #4
 8001572:	f040 8085 	bne.w	8001680 <HAL_RCC_ClockConfig+0x140>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001576:	0713      	lsls	r3, r2, #28
 8001578:	d506      	bpl.n	8001588 <HAL_RCC_ClockConfig+0x48>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800157a:	6863      	ldr	r3, [r4, #4]
 800157c:	692a      	ldr	r2, [r5, #16]
 800157e:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001582:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001586:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001588:	f7ff ffa0 	bl	80014cc <HAL_RCC_GetSysClockFreq>
 800158c:	6863      	ldr	r3, [r4, #4]
 800158e:	4a42      	ldr	r2, [pc, #264]	; (8001698 <HAL_RCC_ClockConfig+0x158>)
 8001590:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001594:	5cd3      	ldrb	r3, [r2, r3]
 8001596:	40d8      	lsrs	r0, r3
 8001598:	4b40      	ldr	r3, [pc, #256]	; (800169c <HAL_RCC_ClockConfig+0x15c>)
 800159a:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800159c:	2000      	movs	r0, #0
 800159e:	f7fe fdd5 	bl	800014c <HAL_InitTick>
  return HAL_OK;
 80015a2:	2000      	movs	r0, #0
 80015a4:	e00a      	b.n	80015bc <HAL_RCC_ClockConfig+0x7c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015a6:	6813      	ldr	r3, [r2, #0]
 80015a8:	f023 0307 	bic.w	r3, r3, #7
 80015ac:	430b      	orrs	r3, r1
 80015ae:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80015b0:	6813      	ldr	r3, [r2, #0]
 80015b2:	f003 0307 	and.w	r3, r3, #7
 80015b6:	428b      	cmp	r3, r1
 80015b8:	d0cc      	beq.n	8001554 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 80015ba:	2001      	movs	r0, #1
}
 80015bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80015c0:	4b34      	ldr	r3, [pc, #208]	; (8001694 <HAL_RCC_ClockConfig+0x154>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015c2:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015c6:	bf1e      	ittt	ne
 80015c8:	685a      	ldrne	r2, [r3, #4]
 80015ca:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 80015ce:	605a      	strne	r2, [r3, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015d0:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015d2:	bf42      	ittt	mi
 80015d4:	685a      	ldrmi	r2, [r3, #4]
 80015d6:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 80015da:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015dc:	685a      	ldr	r2, [r3, #4]
 80015de:	68a8      	ldr	r0, [r5, #8]
 80015e0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80015e4:	4302      	orrs	r2, r0
 80015e6:	605a      	str	r2, [r3, #4]
 80015e8:	e7b7      	b.n	800155a <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015ea:	686a      	ldr	r2, [r5, #4]
 80015ec:	4c29      	ldr	r4, [pc, #164]	; (8001694 <HAL_RCC_ClockConfig+0x154>)
 80015ee:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015f0:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015f2:	d11b      	bne.n	800162c <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015f4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015f8:	d0df      	beq.n	80015ba <HAL_RCC_ClockConfig+0x7a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015fa:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015fc:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001600:	f023 0303 	bic.w	r3, r3, #3
 8001604:	4313      	orrs	r3, r2
 8001606:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8001608:	f7fe fde2 	bl	80001d0 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800160c:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 800160e:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001610:	2b01      	cmp	r3, #1
 8001612:	d113      	bne.n	800163c <HAL_RCC_ClockConfig+0xfc>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001614:	6863      	ldr	r3, [r4, #4]
 8001616:	f003 030c 	and.w	r3, r3, #12
 800161a:	2b04      	cmp	r3, #4
 800161c:	d09f      	beq.n	800155e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800161e:	f7fe fdd7 	bl	80001d0 <HAL_GetTick>
 8001622:	1bc0      	subs	r0, r0, r7
 8001624:	4540      	cmp	r0, r8
 8001626:	d9f5      	bls.n	8001614 <HAL_RCC_ClockConfig+0xd4>
          return HAL_TIMEOUT;
 8001628:	2003      	movs	r0, #3
 800162a:	e7c7      	b.n	80015bc <HAL_RCC_ClockConfig+0x7c>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800162c:	2a02      	cmp	r2, #2
 800162e:	d102      	bne.n	8001636 <HAL_RCC_ClockConfig+0xf6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001630:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001634:	e7e0      	b.n	80015f8 <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001636:	f013 0f02 	tst.w	r3, #2
 800163a:	e7dd      	b.n	80015f8 <HAL_RCC_ClockConfig+0xb8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800163c:	2b02      	cmp	r3, #2
 800163e:	d10f      	bne.n	8001660 <HAL_RCC_ClockConfig+0x120>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001640:	6863      	ldr	r3, [r4, #4]
 8001642:	f003 030c 	and.w	r3, r3, #12
 8001646:	2b08      	cmp	r3, #8
 8001648:	d089      	beq.n	800155e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800164a:	f7fe fdc1 	bl	80001d0 <HAL_GetTick>
 800164e:	1bc0      	subs	r0, r0, r7
 8001650:	4540      	cmp	r0, r8
 8001652:	d9f5      	bls.n	8001640 <HAL_RCC_ClockConfig+0x100>
 8001654:	e7e8      	b.n	8001628 <HAL_RCC_ClockConfig+0xe8>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001656:	f7fe fdbb 	bl	80001d0 <HAL_GetTick>
 800165a:	1bc0      	subs	r0, r0, r7
 800165c:	4540      	cmp	r0, r8
 800165e:	d8e3      	bhi.n	8001628 <HAL_RCC_ClockConfig+0xe8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001660:	6863      	ldr	r3, [r4, #4]
 8001662:	f013 0f0c 	tst.w	r3, #12
 8001666:	d1f6      	bne.n	8001656 <HAL_RCC_ClockConfig+0x116>
 8001668:	e779      	b.n	800155e <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800166a:	6813      	ldr	r3, [r2, #0]
 800166c:	f023 0307 	bic.w	r3, r3, #7
 8001670:	4333      	orrs	r3, r6
 8001672:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001674:	6813      	ldr	r3, [r2, #0]
 8001676:	f003 0307 	and.w	r3, r3, #7
 800167a:	42b3      	cmp	r3, r6
 800167c:	d19d      	bne.n	80015ba <HAL_RCC_ClockConfig+0x7a>
 800167e:	e774      	b.n	800156a <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001680:	6863      	ldr	r3, [r4, #4]
 8001682:	68e9      	ldr	r1, [r5, #12]
 8001684:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001688:	430b      	orrs	r3, r1
 800168a:	6063      	str	r3, [r4, #4]
 800168c:	e773      	b.n	8001576 <HAL_RCC_ClockConfig+0x36>
 800168e:	bf00      	nop
 8001690:	40022000 	.word	0x40022000
 8001694:	40021000 	.word	0x40021000
 8001698:	08002330 	.word	0x08002330
 800169c:	20000008 	.word	0x20000008

080016a0 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80016a0:	4b04      	ldr	r3, [pc, #16]	; (80016b4 <HAL_RCC_GetPCLK2Freq+0x14>)
 80016a2:	4a05      	ldr	r2, [pc, #20]	; (80016b8 <HAL_RCC_GetPCLK2Freq+0x18>)
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80016aa:	5cd3      	ldrb	r3, [r2, r3]
 80016ac:	4a03      	ldr	r2, [pc, #12]	; (80016bc <HAL_RCC_GetPCLK2Freq+0x1c>)
 80016ae:	6810      	ldr	r0, [r2, #0]
} 
 80016b0:	40d8      	lsrs	r0, r3
 80016b2:	4770      	bx	lr
 80016b4:	40021000 	.word	0x40021000
 80016b8:	08002340 	.word	0x08002340
 80016bc:	20000008 	.word	0x20000008

080016c0 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80016c0:	6803      	ldr	r3, [r0, #0]
{
 80016c2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80016c6:	07d9      	lsls	r1, r3, #31
{
 80016c8:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80016ca:	d520      	bpl.n	800170e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016cc:	4c35      	ldr	r4, [pc, #212]	; (80017a4 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80016ce:	69e3      	ldr	r3, [r4, #28]
 80016d0:	00da      	lsls	r2, r3, #3
 80016d2:	d432      	bmi.n	800173a <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 80016d4:	2701      	movs	r7, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 80016d6:	69e3      	ldr	r3, [r4, #28]
 80016d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016dc:	61e3      	str	r3, [r4, #28]
 80016de:	69e3      	ldr	r3, [r4, #28]
 80016e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016e4:	9301      	str	r3, [sp, #4]
 80016e6:	9b01      	ldr	r3, [sp, #4]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016e8:	4e2f      	ldr	r6, [pc, #188]	; (80017a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80016ea:	6833      	ldr	r3, [r6, #0]
 80016ec:	05db      	lsls	r3, r3, #23
 80016ee:	d526      	bpl.n	800173e <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80016f0:	6a23      	ldr	r3, [r4, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80016f2:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80016f6:	d136      	bne.n	8001766 <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80016f8:	6a23      	ldr	r3, [r4, #32]
 80016fa:	686a      	ldr	r2, [r5, #4]
 80016fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001700:	4313      	orrs	r3, r2
 8001702:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001704:	b11f      	cbz	r7, 800170e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001706:	69e3      	ldr	r3, [r4, #28]
 8001708:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800170c:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800170e:	6828      	ldr	r0, [r5, #0]
 8001710:	0783      	lsls	r3, r0, #30
 8001712:	d506      	bpl.n	8001722 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001714:	4a23      	ldr	r2, [pc, #140]	; (80017a4 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001716:	68a9      	ldr	r1, [r5, #8]
 8001718:	6853      	ldr	r3, [r2, #4]
 800171a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800171e:	430b      	orrs	r3, r1
 8001720:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001722:	f010 0010 	ands.w	r0, r0, #16
 8001726:	d01b      	beq.n	8001760 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001728:	4a1e      	ldr	r2, [pc, #120]	; (80017a4 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 800172a:	68e9      	ldr	r1, [r5, #12]
 800172c:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800172e:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001730:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001734:	430b      	orrs	r3, r1
 8001736:	6053      	str	r3, [r2, #4]
 8001738:	e012      	b.n	8001760 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 800173a:	2700      	movs	r7, #0
 800173c:	e7d4      	b.n	80016e8 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800173e:	6833      	ldr	r3, [r6, #0]
 8001740:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001744:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001746:	f7fe fd43 	bl	80001d0 <HAL_GetTick>
 800174a:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800174c:	6833      	ldr	r3, [r6, #0]
 800174e:	05d8      	lsls	r0, r3, #23
 8001750:	d4ce      	bmi.n	80016f0 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001752:	f7fe fd3d 	bl	80001d0 <HAL_GetTick>
 8001756:	eba0 0008 	sub.w	r0, r0, r8
 800175a:	2864      	cmp	r0, #100	; 0x64
 800175c:	d9f6      	bls.n	800174c <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 800175e:	2003      	movs	r0, #3
}
 8001760:	b002      	add	sp, #8
 8001762:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001766:	686a      	ldr	r2, [r5, #4]
 8001768:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800176c:	429a      	cmp	r2, r3
 800176e:	d0c3      	beq.n	80016f8 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8001770:	2001      	movs	r0, #1
 8001772:	4a0e      	ldr	r2, [pc, #56]	; (80017ac <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001774:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8001776:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001778:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800177a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 800177e:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8001780:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001782:	07d9      	lsls	r1, r3, #31
 8001784:	d5b8      	bpl.n	80016f8 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8001786:	f7fe fd23 	bl	80001d0 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800178a:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800178e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001790:	6a23      	ldr	r3, [r4, #32]
 8001792:	079a      	lsls	r2, r3, #30
 8001794:	d4b0      	bmi.n	80016f8 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001796:	f7fe fd1b 	bl	80001d0 <HAL_GetTick>
 800179a:	1b80      	subs	r0, r0, r6
 800179c:	4540      	cmp	r0, r8
 800179e:	d9f7      	bls.n	8001790 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 80017a0:	e7dd      	b.n	800175e <HAL_RCCEx_PeriphCLKConfig+0x9e>
 80017a2:	bf00      	nop
 80017a4:	40021000 	.word	0x40021000
 80017a8:	40007000 	.word	0x40007000
 80017ac:	42420440 	.word	0x42420440

080017b0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80017b0:	b570      	push	{r4, r5, r6, lr}
 80017b2:	4604      	mov	r4, r0
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80017b4:	4b34      	ldr	r3, [pc, #208]	; (8001888 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>)
{
 80017b6:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80017b8:	ad02      	add	r5, sp, #8
 80017ba:	f103 0610 	add.w	r6, r3, #16
 80017be:	462a      	mov	r2, r5
 80017c0:	6818      	ldr	r0, [r3, #0]
 80017c2:	6859      	ldr	r1, [r3, #4]
 80017c4:	3308      	adds	r3, #8
 80017c6:	c203      	stmia	r2!, {r0, r1}
 80017c8:	42b3      	cmp	r3, r6
 80017ca:	4615      	mov	r5, r2
 80017cc:	d1f7      	bne.n	80017be <HAL_RCCEx_GetPeriphCLKFreq+0xe>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80017ce:	f240 2301 	movw	r3, #513	; 0x201
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  switch (PeriphClk)
 80017d2:	2c02      	cmp	r4, #2
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80017d4:	f8ad 3004 	strh.w	r3, [sp, #4]
  switch (PeriphClk)
 80017d8:	d047      	beq.n	800186a <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 80017da:	2c10      	cmp	r4, #16
 80017dc:	d017      	beq.n	800180e <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
 80017de:	2c01      	cmp	r4, #1
 80017e0:	d14f      	bne.n	8001882 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80017e2:	f240 3102 	movw	r1, #770	; 0x302
      temp_reg = RCC->BDCR;
 80017e6:	4a29      	ldr	r2, [pc, #164]	; (800188c <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
 80017e8:	6a13      	ldr	r3, [r2, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80017ea:	4019      	ands	r1, r3
 80017ec:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
 80017f0:	d044      	beq.n	800187c <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
      {
        frequency = LSE_VALUE;
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80017f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80017f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017fa:	d12d      	bne.n	8001858 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
      {
        frequency = LSI_VALUE;
 80017fc:	f649 4040 	movw	r0, #40000	; 0x9c40
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8001800:	6a53      	ldr	r3, [r2, #36]	; 0x24
        frequency = LSI_VALUE;
 8001802:	f013 0f02 	tst.w	r3, #2
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
      {
        frequency = HSE_VALUE / 128U;
 8001806:	bf08      	it	eq
 8001808:	2000      	moveq	r0, #0
    {
      break;
    }
  }
  return(frequency);
}
 800180a:	b006      	add	sp, #24
 800180c:	bd70      	pop	{r4, r5, r6, pc}
      temp_reg = RCC->CFGR;
 800180e:	4b1f      	ldr	r3, [pc, #124]	; (800188c <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
 8001810:	6859      	ldr	r1, [r3, #4]
      if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLLON))
 8001812:	6818      	ldr	r0, [r3, #0]
 8001814:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 8001818:	d0f7      	beq.n	800180a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800181a:	f3c1 4283 	ubfx	r2, r1, #18, #4
 800181e:	a806      	add	r0, sp, #24
 8001820:	4402      	add	r2, r0
 8001822:	f812 0c10 	ldrb.w	r0, [r2, #-16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001826:	03ca      	lsls	r2, r1, #15
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001828:	bf41      	itttt	mi
 800182a:	685a      	ldrmi	r2, [r3, #4]
 800182c:	a906      	addmi	r1, sp, #24
 800182e:	f3c2 4240 	ubfxmi	r2, r2, #17, #1
 8001832:	1852      	addmi	r2, r2, r1
 8001834:	bf44      	itt	mi
 8001836:	f812 1c14 	ldrbmi.w	r1, [r2, #-20]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800183a:	4a15      	ldrmi	r2, [pc, #84]	; (8001890 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800183c:	685b      	ldr	r3, [r3, #4]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800183e:	bf4c      	ite	mi
 8001840:	fbb2 f2f1 	udivmi	r2, r2, r1
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001844:	4a13      	ldrpl	r2, [pc, #76]	; (8001894 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8001846:	025b      	lsls	r3, r3, #9
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001848:	fb02 f000 	mul.w	r0, r2, r0
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800184c:	d4dd      	bmi.n	800180a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          frequency = (pllclk * 2) / 3;
 800184e:	2303      	movs	r3, #3
 8001850:	0040      	lsls	r0, r0, #1
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8001852:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8001856:	e7d8      	b.n	800180a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8001858:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800185c:	d111      	bne.n	8001882 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 800185e:	6813      	ldr	r3, [r2, #0]
        frequency = HSE_VALUE / 128U;
 8001860:	f24f 4024 	movw	r0, #62500	; 0xf424
 8001864:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001868:	e7cd      	b.n	8001806 <HAL_RCCEx_GetPeriphCLKFreq+0x56>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800186a:	f7ff ff19 	bl	80016a0 <HAL_RCC_GetPCLK2Freq>
 800186e:	4b07      	ldr	r3, [pc, #28]	; (800188c <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	f3c3 3381 	ubfx	r3, r3, #14, #2
 8001876:	3301      	adds	r3, #1
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	e7ea      	b.n	8001852 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
        frequency = LSE_VALUE;
 800187c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001880:	e7c3      	b.n	800180a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        frequency = 0U;
 8001882:	2000      	movs	r0, #0
 8001884:	e7c1      	b.n	800180a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8001886:	bf00      	nop
 8001888:	08002320 	.word	0x08002320
 800188c:	40021000 	.word	0x40021000
 8001890:	007a1200 	.word	0x007a1200
 8001894:	003d0900 	.word	0x003d0900

08001898 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001898:	6803      	ldr	r3, [r0, #0]
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);

  /* Return function status */
  return HAL_OK;
}
 800189a:	2000      	movs	r0, #0
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800189c:	68da      	ldr	r2, [r3, #12]
 800189e:	f042 0201 	orr.w	r2, r2, #1
 80018a2:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	f042 0201 	orr.w	r2, r2, #1
 80018aa:	601a      	str	r2, [r3, #0]
}
 80018ac:	4770      	bx	lr

080018ae <HAL_TIM_ConfigClockSource>:
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
  uint32_t tmpsmcr = 0U;

  /* Process Locked */
  __HAL_LOCK(htim);
 80018ae:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80018b2:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	f04f 0302 	mov.w	r3, #2
 80018ba:	d01c      	beq.n	80018f6 <HAL_TIM_ConfigClockSource+0x48>
 80018bc:	2201      	movs	r2, #1

  htim->State = HAL_TIM_STATE_BUSY;
 80018be:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80018c2:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 80018c4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 80018c8:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80018ca:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80018ce:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80018d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80018d4:	680a      	ldr	r2, [r1, #0]
 80018d6:	2a40      	cmp	r2, #64	; 0x40
 80018d8:	d079      	beq.n	80019ce <HAL_TIM_ConfigClockSource+0x120>
 80018da:	d819      	bhi.n	8001910 <HAL_TIM_ConfigClockSource+0x62>
 80018dc:	2a10      	cmp	r2, #16
 80018de:	f000 8093 	beq.w	8001a08 <HAL_TIM_ConfigClockSource+0x15a>
 80018e2:	d80a      	bhi.n	80018fa <HAL_TIM_ConfigClockSource+0x4c>
 80018e4:	2a00      	cmp	r2, #0
 80018e6:	f000 8089 	beq.w	80019fc <HAL_TIM_ConfigClockSource+0x14e>
    break;

  default:
    break;
  }
  htim->State = HAL_TIM_STATE_READY;
 80018ea:	2301      	movs	r3, #1
 80018ec:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80018f0:	2300      	movs	r3, #0
 80018f2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 80018f6:	4618      	mov	r0, r3

  return HAL_OK;
}
 80018f8:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 80018fa:	2a20      	cmp	r2, #32
 80018fc:	f000 808a 	beq.w	8001a14 <HAL_TIM_ConfigClockSource+0x166>
 8001900:	2a30      	cmp	r2, #48	; 0x30
 8001902:	d1f2      	bne.n	80018ea <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8001904:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8001906:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800190a:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 800190e:	e036      	b.n	800197e <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8001910:	2a70      	cmp	r2, #112	; 0x70
 8001912:	d036      	beq.n	8001982 <HAL_TIM_ConfigClockSource+0xd4>
 8001914:	d81b      	bhi.n	800194e <HAL_TIM_ConfigClockSource+0xa0>
 8001916:	2a50      	cmp	r2, #80	; 0x50
 8001918:	d042      	beq.n	80019a0 <HAL_TIM_ConfigClockSource+0xf2>
 800191a:	2a60      	cmp	r2, #96	; 0x60
 800191c:	d1e5      	bne.n	80018ea <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800191e:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001920:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001922:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001926:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001928:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800192a:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 800192c:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800192e:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001932:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8001936:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800193a:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 800193e:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8001940:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8001942:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001944:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001948:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 800194c:	e017      	b.n	800197e <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 800194e:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001952:	d011      	beq.n	8001978 <HAL_TIM_ConfigClockSource+0xca>
 8001954:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001958:	d1c7      	bne.n	80018ea <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800195a:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800195e:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001960:	68c9      	ldr	r1, [r1, #12]
 8001962:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001964:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001968:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800196c:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800196e:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001970:	689a      	ldr	r2, [r3, #8]
 8001972:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001976:	e002      	b.n	800197e <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001978:	689a      	ldr	r2, [r3, #8]
 800197a:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 800197e:	609a      	str	r2, [r3, #8]
 8001980:	e7b3      	b.n	80018ea <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr = TIMx->SMCR;
 8001982:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001984:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
 8001988:	68c9      	ldr	r1, [r1, #12]
 800198a:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800198c:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001990:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001994:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8001996:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8001998:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800199a:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 800199e:	e7ee      	b.n	800197e <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80019a0:	684c      	ldr	r4, [r1, #4]
 80019a2:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80019a4:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80019a6:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80019a8:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80019ac:	f025 0501 	bic.w	r5, r5, #1
 80019b0:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80019b2:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 80019b4:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80019b6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80019ba:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80019be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80019c0:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 80019c2:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80019c4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80019c8:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 80019cc:	e7d7      	b.n	800197e <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80019ce:	684c      	ldr	r4, [r1, #4]
 80019d0:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80019d2:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80019d4:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80019d6:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80019da:	f025 0501 	bic.w	r5, r5, #1
 80019de:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80019e0:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 80019e2:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80019e4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80019e8:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80019ec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80019ee:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 80019f0:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80019f2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80019f6:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 80019fa:	e7c0      	b.n	800197e <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 80019fc:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80019fe:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001a02:	f042 0207 	orr.w	r2, r2, #7
 8001a06:	e7ba      	b.n	800197e <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8001a08:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001a0a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001a0e:	f042 0217 	orr.w	r2, r2, #23
 8001a12:	e7b4      	b.n	800197e <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8001a14:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001a16:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001a1a:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 8001a1e:	e7ae      	b.n	800197e <HAL_TIM_ConfigClockSource+0xd0>

08001a20 <HAL_TIM_OC_DelayElapsedCallback>:
 8001a20:	4770      	bx	lr

08001a22 <HAL_TIM_IC_CaptureCallback>:
 8001a22:	4770      	bx	lr

08001a24 <HAL_TIM_PWM_PulseFinishedCallback>:
 8001a24:	4770      	bx	lr

08001a26 <HAL_TIM_TriggerCallback>:
 8001a26:	4770      	bx	lr

08001a28 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001a28:	6803      	ldr	r3, [r0, #0]
{
 8001a2a:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001a2c:	691a      	ldr	r2, [r3, #16]
{
 8001a2e:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001a30:	0791      	lsls	r1, r2, #30
 8001a32:	d50e      	bpl.n	8001a52 <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8001a34:	68da      	ldr	r2, [r3, #12]
 8001a36:	0792      	lsls	r2, r2, #30
 8001a38:	d50b      	bpl.n	8001a52 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001a3a:	f06f 0202 	mvn.w	r2, #2
 8001a3e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001a40:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001a42:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001a44:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001a46:	079b      	lsls	r3, r3, #30
 8001a48:	d077      	beq.n	8001b3a <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8001a4a:	f7ff ffea 	bl	8001a22 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001a52:	6823      	ldr	r3, [r4, #0]
 8001a54:	691a      	ldr	r2, [r3, #16]
 8001a56:	0750      	lsls	r0, r2, #29
 8001a58:	d510      	bpl.n	8001a7c <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001a5a:	68da      	ldr	r2, [r3, #12]
 8001a5c:	0751      	lsls	r1, r2, #29
 8001a5e:	d50d      	bpl.n	8001a7c <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001a60:	f06f 0204 	mvn.w	r2, #4
 8001a64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001a66:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001a68:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001a6a:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001a6c:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8001a70:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001a72:	d068      	beq.n	8001b46 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8001a74:	f7ff ffd5 	bl	8001a22 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001a7c:	6823      	ldr	r3, [r4, #0]
 8001a7e:	691a      	ldr	r2, [r3, #16]
 8001a80:	0712      	lsls	r2, r2, #28
 8001a82:	d50f      	bpl.n	8001aa4 <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001a84:	68da      	ldr	r2, [r3, #12]
 8001a86:	0710      	lsls	r0, r2, #28
 8001a88:	d50c      	bpl.n	8001aa4 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001a8a:	f06f 0208 	mvn.w	r2, #8
 8001a8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001a90:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001a92:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001a94:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001a96:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8001a98:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001a9a:	d05a      	beq.n	8001b52 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001a9c:	f7ff ffc1 	bl	8001a22 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001aa4:	6823      	ldr	r3, [r4, #0]
 8001aa6:	691a      	ldr	r2, [r3, #16]
 8001aa8:	06d2      	lsls	r2, r2, #27
 8001aaa:	d510      	bpl.n	8001ace <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001aac:	68da      	ldr	r2, [r3, #12]
 8001aae:	06d0      	lsls	r0, r2, #27
 8001ab0:	d50d      	bpl.n	8001ace <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001ab2:	f06f 0210 	mvn.w	r2, #16
 8001ab6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ab8:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001aba:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001abc:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001abe:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8001ac2:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ac4:	d04b      	beq.n	8001b5e <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8001ac6:	f7ff ffac 	bl	8001a22 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001aca:	2300      	movs	r3, #0
 8001acc:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001ace:	6823      	ldr	r3, [r4, #0]
 8001ad0:	691a      	ldr	r2, [r3, #16]
 8001ad2:	07d1      	lsls	r1, r2, #31
 8001ad4:	d508      	bpl.n	8001ae8 <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001ad6:	68da      	ldr	r2, [r3, #12]
 8001ad8:	07d2      	lsls	r2, r2, #31
 8001ada:	d505      	bpl.n	8001ae8 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001adc:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ae0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ae2:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ae4:	f000 fa3e 	bl	8001f64 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001ae8:	6823      	ldr	r3, [r4, #0]
 8001aea:	691a      	ldr	r2, [r3, #16]
 8001aec:	0610      	lsls	r0, r2, #24
 8001aee:	d508      	bpl.n	8001b02 <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001af0:	68da      	ldr	r2, [r3, #12]
 8001af2:	0611      	lsls	r1, r2, #24
 8001af4:	d505      	bpl.n	8001b02 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001af6:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8001afa:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001afc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001afe:	f000 f8aa 	bl	8001c56 <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001b02:	6823      	ldr	r3, [r4, #0]
 8001b04:	691a      	ldr	r2, [r3, #16]
 8001b06:	0652      	lsls	r2, r2, #25
 8001b08:	d508      	bpl.n	8001b1c <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8001b0a:	68da      	ldr	r2, [r3, #12]
 8001b0c:	0650      	lsls	r0, r2, #25
 8001b0e:	d505      	bpl.n	8001b1c <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001b10:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8001b14:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001b16:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001b18:	f7ff ff85 	bl	8001a26 <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001b1c:	6823      	ldr	r3, [r4, #0]
 8001b1e:	691a      	ldr	r2, [r3, #16]
 8001b20:	0691      	lsls	r1, r2, #26
 8001b22:	d522      	bpl.n	8001b6a <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8001b24:	68da      	ldr	r2, [r3, #12]
 8001b26:	0692      	lsls	r2, r2, #26
 8001b28:	d51f      	bpl.n	8001b6a <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001b2a:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8001b2e:	4620      	mov	r0, r4
}
 8001b30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001b34:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8001b36:	f000 b88d 	b.w	8001c54 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b3a:	f7ff ff71 	bl	8001a20 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b3e:	4620      	mov	r0, r4
 8001b40:	f7ff ff70 	bl	8001a24 <HAL_TIM_PWM_PulseFinishedCallback>
 8001b44:	e783      	b.n	8001a4e <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b46:	f7ff ff6b 	bl	8001a20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b4a:	4620      	mov	r0, r4
 8001b4c:	f7ff ff6a 	bl	8001a24 <HAL_TIM_PWM_PulseFinishedCallback>
 8001b50:	e792      	b.n	8001a78 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b52:	f7ff ff65 	bl	8001a20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b56:	4620      	mov	r0, r4
 8001b58:	f7ff ff64 	bl	8001a24 <HAL_TIM_PWM_PulseFinishedCallback>
 8001b5c:	e7a0      	b.n	8001aa0 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b5e:	f7ff ff5f 	bl	8001a20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b62:	4620      	mov	r0, r4
 8001b64:	f7ff ff5e 	bl	8001a24 <HAL_TIM_PWM_PulseFinishedCallback>
 8001b68:	e7af      	b.n	8001aca <HAL_TIM_IRQHandler+0xa2>
}
 8001b6a:	bd10      	pop	{r4, pc}

08001b6c <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001b6c:	4a1a      	ldr	r2, [pc, #104]	; (8001bd8 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8001b6e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001b70:	4290      	cmp	r0, r2
 8001b72:	d00a      	beq.n	8001b8a <TIM_Base_SetConfig+0x1e>
 8001b74:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001b78:	d007      	beq.n	8001b8a <TIM_Base_SetConfig+0x1e>
 8001b7a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001b7e:	4290      	cmp	r0, r2
 8001b80:	d003      	beq.n	8001b8a <TIM_Base_SetConfig+0x1e>
 8001b82:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001b86:	4290      	cmp	r0, r2
 8001b88:	d115      	bne.n	8001bb6 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 8001b8a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001b8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001b90:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001b92:	4a11      	ldr	r2, [pc, #68]	; (8001bd8 <TIM_Base_SetConfig+0x6c>)
 8001b94:	4290      	cmp	r0, r2
 8001b96:	d00a      	beq.n	8001bae <TIM_Base_SetConfig+0x42>
 8001b98:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001b9c:	d007      	beq.n	8001bae <TIM_Base_SetConfig+0x42>
 8001b9e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001ba2:	4290      	cmp	r0, r2
 8001ba4:	d003      	beq.n	8001bae <TIM_Base_SetConfig+0x42>
 8001ba6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001baa:	4290      	cmp	r0, r2
 8001bac:	d103      	bne.n	8001bb6 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001bae:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001bb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001bb4:	4313      	orrs	r3, r2
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8001bb6:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 8001bb8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8001bbc:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8001bbe:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001bc0:	688b      	ldr	r3, [r1, #8]
 8001bc2:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001bc4:	680b      	ldr	r3, [r1, #0]
 8001bc6:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001bc8:	4b03      	ldr	r3, [pc, #12]	; (8001bd8 <TIM_Base_SetConfig+0x6c>)
 8001bca:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8001bcc:	bf04      	itt	eq
 8001bce:	690b      	ldreq	r3, [r1, #16]
 8001bd0:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	6143      	str	r3, [r0, #20]
}
 8001bd6:	4770      	bx	lr
 8001bd8:	40012c00 	.word	0x40012c00

08001bdc <HAL_TIM_Base_Init>:
{
 8001bdc:	b510      	push	{r4, lr}
  if(htim == NULL)
 8001bde:	4604      	mov	r4, r0
 8001be0:	b1a0      	cbz	r0, 8001c0c <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001be2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001be6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001bea:	b91b      	cbnz	r3, 8001bf4 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001bec:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001bf0:	f000 fa88 	bl	8002104 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8001bf4:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bf6:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8001bf8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bfc:	1d21      	adds	r1, r4, #4
 8001bfe:	f7ff ffb5 	bl	8001b6c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001c02:	2301      	movs	r3, #1
  return HAL_OK;
 8001c04:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8001c06:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8001c0a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001c0c:	2001      	movs	r0, #1
 8001c0e:	e7fc      	b.n	8001c0a <HAL_TIM_Base_Init+0x2e>

08001c10 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8001c10:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8001c14:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	f04f 0302 	mov.w	r3, #2
 8001c1c:	d018      	beq.n	8001c50 <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 8001c1e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001c22:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8001c24:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001c26:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001c28:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001c2a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001c2e:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8001c30:	685a      	ldr	r2, [r3, #4]
 8001c32:	4322      	orrs	r2, r4
 8001c34:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8001c36:	689a      	ldr	r2, [r3, #8]
 8001c38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c3c:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001c3e:	689a      	ldr	r2, [r3, #8]
 8001c40:	430a      	orrs	r2, r1
 8001c42:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8001c44:	2301      	movs	r3, #1
 8001c46:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8001c50:	4618      	mov	r0, r3

  return HAL_OK;
}
 8001c52:	bd10      	pop	{r4, pc}

08001c54 <HAL_TIMEx_CommutationCallback>:
 8001c54:	4770      	bx	lr

08001c56 <HAL_TIMEx_BreakCallback>:
 8001c56:	4770      	bx	lr

08001c58 <Error_Handler>:
}



void Error_Handler(void)
{
 8001c58:	b508      	push	{r3, lr}
	while(1)
	{
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001c5a:	4c05      	ldr	r4, [pc, #20]	; (8001c70 <Error_Handler+0x18>)
 8001c5c:	4620      	mov	r0, r4
 8001c5e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c62:	f7ff faa2 	bl	80011aa <HAL_GPIO_TogglePin>
		HAL_Delay(33);
 8001c66:	2021      	movs	r0, #33	; 0x21
 8001c68:	f7fe fab8 	bl	80001dc <HAL_Delay>
 8001c6c:	e7f6      	b.n	8001c5c <Error_Handler+0x4>
 8001c6e:	bf00      	nop
 8001c70:	40011000 	.word	0x40011000

08001c74 <SystemClock_Config>:
{
 8001c74:	b530      	push	{r4, r5, lr}
 8001c76:	b095      	sub	sp, #84	; 0x54
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c78:	2220      	movs	r2, #32
 8001c7a:	2100      	movs	r1, #0
 8001c7c:	a80b      	add	r0, sp, #44	; 0x2c
 8001c7e:	f000 fb33 	bl	80022e8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c82:	2214      	movs	r2, #20
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c84:	2510      	movs	r5, #16
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c86:	2100      	movs	r1, #0
 8001c88:	eb0d 0002 	add.w	r0, sp, r2
 8001c8c:	f000 fb2c 	bl	80022e8 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c90:	462a      	mov	r2, r5
 8001c92:	2100      	movs	r1, #0
 8001c94:	a801      	add	r0, sp, #4
 8001c96:	f000 fb27 	bl	80022e8 <memset>
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c9a:	2301      	movs	r3, #1
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c9c:	2402      	movs	r4, #2
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c9e:	e9cd 350e 	strd	r3, r5, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001ca2:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
	if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ca6:	a80a      	add	r0, sp, #40	; 0x28
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ca8:	940a      	str	r4, [sp, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001caa:	9411      	str	r4, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001cac:	9313      	str	r3, [sp, #76]	; 0x4c
	if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cae:	f7ff fa81 	bl	80011b4 <HAL_RCC_OscConfig>
 8001cb2:	b108      	cbz	r0, 8001cb8 <SystemClock_Config+0x44>
		Error_Handler();
 8001cb4:	f7ff ffd0 	bl	8001c58 <Error_Handler>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 8001cb8:	230f      	movs	r3, #15
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cba:	e9cd 3405 	strd	r3, r4, [sp, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001cbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cc2:	9007      	str	r0, [sp, #28]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cc4:	e9cd 3008 	strd	r3, r0, [sp, #32]
	if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001cc8:	4621      	mov	r1, r4
 8001cca:	a805      	add	r0, sp, #20
 8001ccc:	f7ff fc38 	bl	8001540 <HAL_RCC_ClockConfig>
 8001cd0:	2800      	cmp	r0, #0
 8001cd2:	d1ef      	bne.n	8001cb4 <SystemClock_Config+0x40>
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8001cd4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
	if(HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cd8:	a801      	add	r0, sp, #4
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001cda:	9401      	str	r4, [sp, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8001cdc:	9303      	str	r3, [sp, #12]
	if(HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cde:	f7ff fcef 	bl	80016c0 <HAL_RCCEx_PeriphCLKConfig>
 8001ce2:	2800      	cmp	r0, #0
 8001ce4:	d1e6      	bne.n	8001cb4 <SystemClock_Config+0x40>
}
 8001ce6:	b015      	add	sp, #84	; 0x54
 8001ce8:	bd30      	pop	{r4, r5, pc}
	...

08001cec <main>:
{
 8001cec:	b580      	push	{r7, lr}
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001cee:	4c86      	ldr	r4, [pc, #536]	; (8001f08 <main+0x21c>)
{
 8001cf0:	b08e      	sub	sp, #56	; 0x38
	HAL_Init();
 8001cf2:	f7fe fa4f 	bl	8000194 <HAL_Init>
	SystemClock_Config();
 8001cf6:	f7ff ffbd 	bl	8001c74 <SystemClock_Config>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cfa:	2210      	movs	r2, #16
 8001cfc:	2100      	movs	r1, #0
 8001cfe:	a80a      	add	r0, sp, #40	; 0x28
 8001d00:	f000 faf2 	bl	80022e8 <memset>
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001d04:	69a3      	ldr	r3, [r4, #24]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8001d06:	2200      	movs	r2, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001d08:	f043 0304 	orr.w	r3, r3, #4
 8001d0c:	61a3      	str	r3, [r4, #24]
 8001d0e:	69a3      	ldr	r3, [r4, #24]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8001d10:	f44f 5100 	mov.w	r1, #8192	; 0x2000
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001d14:	f003 0304 	and.w	r3, r3, #4
 8001d18:	9302      	str	r3, [sp, #8]
 8001d1a:	9b02      	ldr	r3, [sp, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001d1c:	69a3      	ldr	r3, [r4, #24]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8001d1e:	487b      	ldr	r0, [pc, #492]	; (8001f0c <main+0x220>)
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001d20:	f043 0308 	orr.w	r3, r3, #8
 8001d24:	61a3      	str	r3, [r4, #24]
 8001d26:	69a3      	ldr	r3, [r4, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d28:	2500      	movs	r5, #0
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001d2a:	f003 0308 	and.w	r3, r3, #8
 8001d2e:	9303      	str	r3, [sp, #12]
 8001d30:	9b03      	ldr	r3, [sp, #12]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001d32:	69a3      	ldr	r3, [r4, #24]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d34:	2601      	movs	r6, #1
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001d36:	f043 0310 	orr.w	r3, r3, #16
 8001d3a:	61a3      	str	r3, [r4, #24]
 8001d3c:	69a3      	ldr	r3, [r4, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d3e:	2703      	movs	r7, #3
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001d40:	f003 0310 	and.w	r3, r3, #16
 8001d44:	9304      	str	r3, [sp, #16]
 8001d46:	9b04      	ldr	r3, [sp, #16]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8001d48:	f7ff fa2a 	bl	80011a0 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d50:	a90a      	add	r1, sp, #40	; 0x28
 8001d52:	486e      	ldr	r0, [pc, #440]	; (8001f0c <main+0x220>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d54:	e9cd 360a 	strd	r3, r6, [sp, #40]	; 0x28
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d58:	e9cd 570c 	strd	r5, r7, [sp, #48]	; 0x30
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d5c:	f7ff f940 	bl	8000fe0 <HAL_GPIO_Init>
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001d60:	6963      	ldr	r3, [r4, #20]
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001d62:	462a      	mov	r2, r5
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001d64:	4333      	orrs	r3, r6
 8001d66:	6163      	str	r3, [r4, #20]
 8001d68:	6963      	ldr	r3, [r4, #20]
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001d6a:	4629      	mov	r1, r5
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001d6c:	4033      	ands	r3, r6
 8001d6e:	9301      	str	r3, [sp, #4]
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001d70:	200b      	movs	r0, #11
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001d72:	9b01      	ldr	r3, [sp, #4]
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001d74:	f7fe ffdc 	bl	8000d30 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001d78:	200b      	movs	r0, #11
 8001d7a:	f7ff f80d 	bl	8000d98 <HAL_NVIC_EnableIRQ>
	hadc1.Instance = ADC1;
 8001d7e:	4c64      	ldr	r4, [pc, #400]	; (8001f10 <main+0x224>)
 8001d80:	4b64      	ldr	r3, [pc, #400]	; (8001f14 <main+0x228>)
	ADC_ChannelConfTypeDef sConfig = {0};
 8001d82:	e9cd 5507 	strd	r5, r5, [sp, #28]
	hadc1.Instance = ADC1;
 8001d86:	6023      	str	r3, [r4, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001d88:	f44f 7380 	mov.w	r3, #256	; 0x100
	ADC_ChannelConfTypeDef sConfig = {0};
 8001d8c:	9509      	str	r5, [sp, #36]	; 0x24
	hadc1.Init.ContinuousConvMode = ENABLE;
 8001d8e:	e9c4 3602 	strd	r3, r6, [r4, #8]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001d92:	6165      	str	r5, [r4, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d94:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d98:	6065      	str	r5, [r4, #4]
	hadc1.Init.NbrOfConversion = ADC_CHANNELS;
 8001d9a:	2506      	movs	r5, #6
	if(HAL_ADC_Init(&hadc1) != HAL_OK)
 8001d9c:	4620      	mov	r0, r4
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d9e:	61e3      	str	r3, [r4, #28]
	hadc1.Init.NbrOfConversion = ADC_CHANNELS;
 8001da0:	6125      	str	r5, [r4, #16]
	if(HAL_ADC_Init(&hadc1) != HAL_OK)
 8001da2:	f7fe fc45 	bl	8000630 <HAL_ADC_Init>
 8001da6:	b108      	cbz	r0, 8001dac <main+0xc0>
		Error_Handler();
 8001da8:	f7ff ff56 	bl	8001c58 <Error_Handler>
	sConfig.SamplingTime = ADC_SAMPLE_RATE;
 8001dac:	f04f 0807 	mov.w	r8, #7
	if(HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001db0:	a907      	add	r1, sp, #28
 8001db2:	4620      	mov	r0, r4
	sConfig.SamplingTime = ADC_SAMPLE_RATE;
 8001db4:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
	sConfig.Rank=ADC_REGULAR_RANK_1;
 8001db8:	e9cd 6607 	strd	r6, r6, [sp, #28]
	if(HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001dbc:	f7fe fad2 	bl	8000364 <HAL_ADC_ConfigChannel>
 8001dc0:	2800      	cmp	r0, #0
 8001dc2:	d1f1      	bne.n	8001da8 <main+0xbc>
	sConfig.Channel=ADC_CHANNEL_2;
 8001dc4:	2302      	movs	r3, #2
	if(HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001dc6:	a907      	add	r1, sp, #28
 8001dc8:	4620      	mov	r0, r4
	sConfig.Rank=ADC_REGULAR_RANK_2;
 8001dca:	e9cd 3307 	strd	r3, r3, [sp, #28]
	if(HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001dce:	f7fe fac9 	bl	8000364 <HAL_ADC_ConfigChannel>
 8001dd2:	2800      	cmp	r0, #0
 8001dd4:	d1e8      	bne.n	8001da8 <main+0xbc>
	sConfig.Channel=ADC_CHANNEL_4;
 8001dd6:	f04f 0904 	mov.w	r9, #4
	if(HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001dda:	a907      	add	r1, sp, #28
 8001ddc:	4620      	mov	r0, r4
	sConfig.Rank=ADC_REGULAR_RANK_3;
 8001dde:	e9cd 9707 	strd	r9, r7, [sp, #28]
	if(HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001de2:	f7fe fabf 	bl	8000364 <HAL_ADC_ConfigChannel>
 8001de6:	2800      	cmp	r0, #0
 8001de8:	d1de      	bne.n	8001da8 <main+0xbc>
	sConfig.Channel=ADC_CHANNEL_5;
 8001dea:	2605      	movs	r6, #5
	if(HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001dec:	a907      	add	r1, sp, #28
 8001dee:	4620      	mov	r0, r4
	sConfig.Rank=ADC_REGULAR_RANK_4;
 8001df0:	e9cd 6907 	strd	r6, r9, [sp, #28]
	if(HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001df4:	f7fe fab6 	bl	8000364 <HAL_ADC_ConfigChannel>
 8001df8:	2800      	cmp	r0, #0
 8001dfa:	d1d5      	bne.n	8001da8 <main+0xbc>
	if(HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001dfc:	a907      	add	r1, sp, #28
 8001dfe:	4620      	mov	r0, r4
	sConfig.Rank=ADC_REGULAR_RANK_5;
 8001e00:	e9cd 5607 	strd	r5, r6, [sp, #28]
	if(HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e04:	f7fe faae 	bl	8000364 <HAL_ADC_ConfigChannel>
 8001e08:	2800      	cmp	r0, #0
 8001e0a:	d1cd      	bne.n	8001da8 <main+0xbc>
	if(HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e0c:	a907      	add	r1, sp, #28
 8001e0e:	4620      	mov	r0, r4
	sConfig.Rank=ADC_REGULAR_RANK_6;
 8001e10:	e9cd 8507 	strd	r8, r5, [sp, #28]
	if(HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e14:	f7fe faa6 	bl	8000364 <HAL_ADC_ConfigChannel>
 8001e18:	4605      	mov	r5, r0
 8001e1a:	2800      	cmp	r0, #0
 8001e1c:	d1c4      	bne.n	8001da8 <main+0xbc>
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e1e:	4601      	mov	r1, r0
 8001e20:	2210      	movs	r2, #16
 8001e22:	a80a      	add	r0, sp, #40	; 0x28
 8001e24:	f000 fa60 	bl	80022e8 <memset>
	htim3.Init.Prescaler = 6399;
 8001e28:	f641 03ff 	movw	r3, #6399	; 0x18ff
	htim3.Instance = TIM3;
 8001e2c:	4c3a      	ldr	r4, [pc, #232]	; (8001f18 <main+0x22c>)
	htim3.Init.Prescaler = 6399;
 8001e2e:	483b      	ldr	r0, [pc, #236]	; (8001f1c <main+0x230>)
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e30:	e9cd 5505 	strd	r5, r5, [sp, #20]
	htim3.Init.Prescaler = 6399;
 8001e34:	e9c4 0300 	strd	r0, r3, [r4]
	htim3.Init.Period = MESSAGE_TIM_PERIOD;
 8001e38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
	if(HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001e3c:	4620      	mov	r0, r4
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e3e:	60a5      	str	r5, [r4, #8]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e40:	e9c4 3503 	strd	r3, r5, [r4, #12]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e44:	61a5      	str	r5, [r4, #24]
	if(HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001e46:	f7ff fec9 	bl	8001bdc <HAL_TIM_Base_Init>
 8001e4a:	2800      	cmp	r0, #0
 8001e4c:	d1ac      	bne.n	8001da8 <main+0xbc>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	if(HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001e52:	a90a      	add	r1, sp, #40	; 0x28
 8001e54:	4620      	mov	r0, r4
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e56:	930a      	str	r3, [sp, #40]	; 0x28
	if(HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001e58:	f7ff fd29 	bl	80018ae <HAL_TIM_ConfigClockSource>
 8001e5c:	2800      	cmp	r0, #0
 8001e5e:	d1a3      	bne.n	8001da8 <main+0xbc>
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e60:	e9cd 0005 	strd	r0, r0, [sp, #20]
	if(HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e64:	a905      	add	r1, sp, #20
 8001e66:	4620      	mov	r0, r4
 8001e68:	f7ff fed2 	bl	8001c10 <HAL_TIMEx_MasterConfigSynchronization>
 8001e6c:	2800      	cmp	r0, #0
 8001e6e:	d19b      	bne.n	8001da8 <main+0xbc>
	hcan1.Init.Prescaler = 2;
 8001e70:	2502      	movs	r5, #2
	hcan1.Instance = CAN1;
 8001e72:	4c2b      	ldr	r4, [pc, #172]	; (8001f20 <main+0x234>)
	hcan1.Init.Prescaler = 2;
 8001e74:	4b2b      	ldr	r3, [pc, #172]	; (8001f24 <main+0x238>)
	hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8001e76:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
	hcan1.Init.Prescaler = 2;
 8001e7a:	e9c4 3500 	strd	r3, r5, [r4]
	hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	e9c4 3203 	strd	r3, r2, [r4, #12]
	hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001e84:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
	if(HAL_CAN_Init(&hcan1) != HAL_OK)
 8001e88:	4620      	mov	r0, r4
	hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001e8a:	6162      	str	r2, [r4, #20]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001e8c:	60a3      	str	r3, [r4, #8]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 8001e8e:	7623      	strb	r3, [r4, #24]
	hcan1.Init.AutoBusOff = DISABLE;
 8001e90:	7663      	strb	r3, [r4, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 8001e92:	76a3      	strb	r3, [r4, #26]
	hcan1.Init.AutoRetransmission = DISABLE;
 8001e94:	76e3      	strb	r3, [r4, #27]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 8001e96:	7763      	strb	r3, [r4, #29]
	if(HAL_CAN_Init(&hcan1) != HAL_OK)
 8001e98:	f7fe fcb3 	bl	8000802 <HAL_CAN_Init>
 8001e9c:	2800      	cmp	r0, #0
 8001e9e:	d183      	bne.n	8001da8 <main+0xbc>
	if(HAL_ADCEx_Calibration_Start(&hadc1) != HAL_OK)
 8001ea0:	481b      	ldr	r0, [pc, #108]	; (8001f10 <main+0x224>)
 8001ea2:	f7fe fc45 	bl	8000730 <HAL_ADCEx_Calibration_Start>
 8001ea6:	2800      	cmp	r0, #0
 8001ea8:	f47f af7e 	bne.w	8001da8 <main+0xbc>
	if(HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc1Buffer, ADC_CHANNELS) != HAL_OK)
 8001eac:	2206      	movs	r2, #6
 8001eae:	491e      	ldr	r1, [pc, #120]	; (8001f28 <main+0x23c>)
 8001eb0:	4817      	ldr	r0, [pc, #92]	; (8001f10 <main+0x224>)
 8001eb2:	f7fe fb0d 	bl	80004d0 <HAL_ADC_Start_DMA>
 8001eb6:	2800      	cmp	r0, #0
 8001eb8:	f47f af76 	bne.w	8001da8 <main+0xbc>
	HAL_TIM_Base_Start_IT(&htim3);
 8001ebc:	4816      	ldr	r0, [pc, #88]	; (8001f18 <main+0x22c>)
 8001ebe:	f7ff fceb 	bl	8001898 <HAL_TIM_Base_Start_IT>
	if(HAL_CAN_Start(&hcan1) != HAL_OK)
 8001ec2:	4620      	mov	r0, r4
 8001ec4:	f7fe fd18 	bl	80008f8 <HAL_CAN_Start>
 8001ec8:	2800      	cmp	r0, #0
 8001eca:	f47f af6d 	bne.w	8001da8 <main+0xbc>
	if(HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8001ece:	4629      	mov	r1, r5
 8001ed0:	4620      	mov	r0, r4
 8001ed2:	f7fe fdff 	bl	8000ad4 <HAL_CAN_ActivateNotification>
 8001ed6:	2800      	cmp	r0, #0
 8001ed8:	f47f af66 	bne.w	8001da8 <main+0xbc>
	txHeader1.ExtId = 0x01;
 8001edc:	2201      	movs	r2, #1
 8001ede:	211a      	movs	r1, #26
	txHeader1.StdId = CAN_ID;
 8001ee0:	4b12      	ldr	r3, [pc, #72]	; (8001f2c <main+0x240>)
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001ee2:	4c0a      	ldr	r4, [pc, #40]	; (8001f0c <main+0x220>)
	txHeader1.ExtId = 0x01;
 8001ee4:	e9c3 1200 	strd	r1, r2, [r3]
	txHeader1.DLC = CAN_DLC;
 8001ee8:	2206      	movs	r2, #6
	txHeader1.IDE = CAN_ID_STD;
 8001eea:	e9c3 0002 	strd	r0, r0, [r3, #8]
	txHeader1.DLC = CAN_DLC;
 8001eee:	611a      	str	r2, [r3, #16]
	txHeader1.TransmitGlobalTime = DISABLE;
 8001ef0:	7518      	strb	r0, [r3, #20]
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001ef2:	4620      	mov	r0, r4
 8001ef4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ef8:	f7ff f957 	bl	80011aa <HAL_GPIO_TogglePin>
		HAL_Delay(MESSAGE_TIM_PERIOD);
 8001efc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f00:	f7fe f96c 	bl	80001dc <HAL_Delay>
 8001f04:	e7f5      	b.n	8001ef2 <main+0x206>
 8001f06:	bf00      	nop
 8001f08:	40021000 	.word	0x40021000
 8001f0c:	40011000 	.word	0x40011000
 8001f10:	200000ac 	.word	0x200000ac
 8001f14:	40012400 	.word	0x40012400
 8001f18:	20000068 	.word	0x20000068
 8001f1c:	40000400 	.word	0x40000400
 8001f20:	20000140 	.word	0x20000140
 8001f24:	40006400 	.word	0x40006400
 8001f28:	20000120 	.word	0x20000120
 8001f2c:	20000168 	.word	0x20000168

08001f30 <HAL_ADC_ConvCpltCallback>:
{
 8001f30:	b508      	push	{r3, lr}
	if(AdcHandle->Instance==hadc1.Instance)
 8001f32:	4b09      	ldr	r3, [pc, #36]	; (8001f58 <HAL_ADC_ConvCpltCallback+0x28>)
 8001f34:	6802      	ldr	r2, [r0, #0]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d10a      	bne.n	8001f52 <HAL_ADC_ConvCpltCallback+0x22>
		for(int i=0; i<ADC_CHANNELS; i++)
 8001f3c:	2300      	movs	r3, #0
			adc1Values[i]=adc1Buffer[i];
 8001f3e:	4a07      	ldr	r2, [pc, #28]	; (8001f5c <HAL_ADC_ConvCpltCallback+0x2c>)
 8001f40:	4807      	ldr	r0, [pc, #28]	; (8001f60 <HAL_ADC_ConvCpltCallback+0x30>)
 8001f42:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8001f46:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(int i=0; i<ADC_CHANNELS; i++)
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	2b06      	cmp	r3, #6
 8001f4e:	d1f8      	bne.n	8001f42 <HAL_ADC_ConvCpltCallback+0x12>
}
 8001f50:	bd08      	pop	{r3, pc}
		Error_Handler();
 8001f52:	f7ff fe81 	bl	8001c58 <Error_Handler>
 8001f56:	bf00      	nop
 8001f58:	200000ac 	.word	0x200000ac
 8001f5c:	2000002c 	.word	0x2000002c
 8001f60:	20000120 	.word	0x20000120

08001f64 <HAL_TIM_PeriodElapsedCallback>:
	if(htim->Instance == htim3.Instance)
 8001f64:	4b10      	ldr	r3, [pc, #64]	; (8001fa8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001f66:	6802      	ldr	r2, [r0, #0]
 8001f68:	681b      	ldr	r3, [r3, #0]
{
 8001f6a:	b570      	push	{r4, r5, r6, lr}
	if(htim->Instance == htim3.Instance)
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d119      	bne.n	8001fa4 <HAL_TIM_PeriodElapsedCallback+0x40>
		txData1[0]=INFKL800(adc1Values[0])&0xFF; //left brake temperature
 8001f70:	4d0e      	ldr	r5, [pc, #56]	; (8001fac <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001f72:	4c0f      	ldr	r4, [pc, #60]	; (8001fb0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001f74:	6828      	ldr	r0, [r5, #0]
 8001f76:	f000 f839 	bl	8001fec <INFKL800>
 8001f7a:	7020      	strb	r0, [r4, #0]
		txData1[1]=INFKL800(adc1Values[1])&0xFF; //right brake temperature
 8001f7c:	6868      	ldr	r0, [r5, #4]
 8001f7e:	f000 f835 	bl	8001fec <INFKL800>
 8001f82:	7060      	strb	r0, [r4, #1]
		txData1[2]=adc1Values[2]; //rear suspension
 8001f84:	68a8      	ldr	r0, [r5, #8]
 8001f86:	70a0      	strb	r0, [r4, #2]
		txData1[3]=linearPot750mm12V(adc1Values[2]);
 8001f88:	f000 f83c 	bl	8002004 <linearPot750mm12V>
		txData1[4]=adc1Values[4]; //front suspension
 8001f8c:	7c2b      	ldrb	r3, [r5, #16]
		txData1[3]=linearPot750mm12V(adc1Values[2]);
 8001f8e:	70e0      	strb	r0, [r4, #3]
		txData1[4]=adc1Values[4]; //front suspension
 8001f90:	7123      	strb	r3, [r4, #4]
		txData1[5]=adc1Values[4];
 8001f92:	7163      	strb	r3, [r4, #5]
		HAL_CAN_AddTxMessage(&hcan1, &txHeader1, txData1, &txMailbox1);
 8001f94:	4622      	mov	r2, r4
}
 8001f96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		HAL_CAN_AddTxMessage(&hcan1, &txHeader1, txData1, &txMailbox1);
 8001f9a:	4b06      	ldr	r3, [pc, #24]	; (8001fb4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001f9c:	4906      	ldr	r1, [pc, #24]	; (8001fb8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001f9e:	4807      	ldr	r0, [pc, #28]	; (8001fbc <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001fa0:	f7fe bcd5 	b.w	800094e <HAL_CAN_AddTxMessage>
		Error_Handler();
 8001fa4:	f7ff fe58 	bl	8001c58 <Error_Handler>
 8001fa8:	20000068 	.word	0x20000068
 8001fac:	2000002c 	.word	0x2000002c
 8001fb0:	20000060 	.word	0x20000060
 8001fb4:	200000a8 	.word	0x200000a8
 8001fb8:	20000168 	.word	0x20000168
 8001fbc:	20000140 	.word	0x20000140

08001fc0 <HAL_CAN_RxFifo0MsgPendingCallback>:
{
 8001fc0:	b510      	push	{r4, lr}
	if(HAL_CAN_GetRxMessage(CanHandle, CAN_RX_FIFO0, &rxHeader1, rxData1) != HAL_OK)
 8001fc2:	4b07      	ldr	r3, [pc, #28]	; (8001fe0 <HAL_CAN_RxFifo0MsgPendingCallback+0x20>)
 8001fc4:	4a07      	ldr	r2, [pc, #28]	; (8001fe4 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 8001fc6:	2100      	movs	r1, #0
{
 8001fc8:	4604      	mov	r4, r0
	if(HAL_CAN_GetRxMessage(CanHandle, CAN_RX_FIFO0, &rxHeader1, rxData1) != HAL_OK)
 8001fca:	f7fe fd0d 	bl	80009e8 <HAL_CAN_GetRxMessage>
 8001fce:	b108      	cbz	r0, 8001fd4 <HAL_CAN_RxFifo0MsgPendingCallback+0x14>
		Error_Handler();
 8001fd0:	f7ff fe42 	bl	8001c58 <Error_Handler>
	if(CanHandle->Instance==hcan1.Instance)
 8001fd4:	4b04      	ldr	r3, [pc, #16]	; (8001fe8 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 8001fd6:	6822      	ldr	r2, [r4, #0]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d1f8      	bne.n	8001fd0 <HAL_CAN_RxFifo0MsgPendingCallback+0x10>
}
 8001fde:	bd10      	pop	{r4, pc}
 8001fe0:	20000138 	.word	0x20000138
 8001fe4:	20000044 	.word	0x20000044
 8001fe8:	20000140 	.word	0x20000140

08001fec <INFKL800>:



int INFKL800(int adc_value)
{
	return ((adc_value*fiveVoltMultiplier)/50)-100;
 8001fec:	4b03      	ldr	r3, [pc, #12]	; (8001ffc <INFKL800+0x10>)
 8001fee:	4358      	muls	r0, r3
 8001ff0:	4b03      	ldr	r3, [pc, #12]	; (8002000 <INFKL800+0x14>)
 8001ff2:	fb90 f0f3 	sdiv	r0, r0, r3
}
 8001ff6:	3864      	subs	r0, #100	; 0x64
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	001eb748 	.word	0x001eb748
 8002000:	0079e000 	.word	0x0079e000

08002004 <linearPot750mm12V>:

int linearPot750mm12V(int adc_value)
{
	return (adc_value*fiveVoltMultiplier)*(750/12);
 8002004:	4b04      	ldr	r3, [pc, #16]	; (8002018 <linearPot750mm12V+0x14>)
 8002006:	4358      	muls	r0, r3
 8002008:	f44f 331c 	mov.w	r3, #159744	; 0x27000
 800200c:	fb90 f0f3 	sdiv	r0, r0, r3
}
 8002010:	233e      	movs	r3, #62	; 0x3e
 8002012:	4358      	muls	r0, r3
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	001eb748 	.word	0x001eb748

0800201c <HAL_MspInit>:
extern TIM_HandleTypeDef htim3;
extern CAN_HandleTypeDef hcan1;

void HAL_MspInit(void)
{
  __HAL_RCC_AFIO_CLK_ENABLE();
 800201c:	4b0e      	ldr	r3, [pc, #56]	; (8002058 <HAL_MspInit+0x3c>)
{
 800201e:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002020:	699a      	ldr	r2, [r3, #24]
 8002022:	f042 0201 	orr.w	r2, r2, #1
 8002026:	619a      	str	r2, [r3, #24]
 8002028:	699a      	ldr	r2, [r3, #24]
 800202a:	f002 0201 	and.w	r2, r2, #1
 800202e:	9200      	str	r2, [sp, #0]
 8002030:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002032:	69da      	ldr	r2, [r3, #28]
 8002034:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002038:	61da      	str	r2, [r3, #28]
 800203a:	69db      	ldr	r3, [r3, #28]

  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800203c:	4a07      	ldr	r2, [pc, #28]	; (800205c <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800203e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002042:	9301      	str	r3, [sp, #4]
 8002044:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002046:	6853      	ldr	r3, [r2, #4]
 8002048:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800204c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002050:	6053      	str	r3, [r2, #4]
}
 8002052:	b002      	add	sp, #8
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	40021000 	.word	0x40021000
 800205c:	40010000 	.word	0x40010000

08002060 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002060:	b530      	push	{r4, r5, lr}
 8002062:	4605      	mov	r5, r0
 8002064:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002066:	2210      	movs	r2, #16
 8002068:	2100      	movs	r1, #0
 800206a:	a802      	add	r0, sp, #8
 800206c:	f000 f93c 	bl	80022e8 <memset>
	if(hadc->Instance==hadc1.Instance)
 8002070:	4b1f      	ldr	r3, [pc, #124]	; (80020f0 <HAL_ADC_MspInit+0x90>)
 8002072:	682a      	ldr	r2, [r5, #0]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	429a      	cmp	r2, r3
 8002078:	d136      	bne.n	80020e8 <HAL_ADC_MspInit+0x88>
	{
		__HAL_RCC_ADC1_CLK_ENABLE();
 800207a:	4b1e      	ldr	r3, [pc, #120]	; (80020f4 <HAL_ADC_MspInit+0x94>)
		//__HAL_RCC_GPIOA_CLK_ENABLE();

		GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800207c:	a902      	add	r1, sp, #8
		__HAL_RCC_ADC1_CLK_ENABLE();
 800207e:	699a      	ldr	r2, [r3, #24]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002080:	481d      	ldr	r0, [pc, #116]	; (80020f8 <HAL_ADC_MspInit+0x98>)
		__HAL_RCC_ADC1_CLK_ENABLE();
 8002082:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002086:	619a      	str	r2, [r3, #24]
 8002088:	699b      	ldr	r3, [r3, #24]
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800208a:	22f6      	movs	r2, #246	; 0xf6
		__HAL_RCC_ADC1_CLK_ENABLE();
 800208c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002090:	9301      	str	r3, [sp, #4]
 8002092:	9b01      	ldr	r3, [sp, #4]
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002094:	2303      	movs	r3, #3
 8002096:	e9cd 2302 	strd	r2, r3, [sp, #8]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800209a:	f7fe ffa1 	bl	8000fe0 <HAL_GPIO_Init>

		hdma_adc1.Instance = DMA1_Channel1;
		hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800209e:	2300      	movs	r3, #0
		hdma_adc1.Instance = DMA1_Channel1;
 80020a0:	4c16      	ldr	r4, [pc, #88]	; (80020fc <HAL_ADC_MspInit+0x9c>)
		hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80020a2:	4917      	ldr	r1, [pc, #92]	; (8002100 <HAL_ADC_MspInit+0xa0>)
		hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
		hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
		hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80020a4:	2080      	movs	r0, #128	; 0x80
		hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80020a6:	e9c4 1300 	strd	r1, r3, [r4]
		hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80020aa:	60a3      	str	r3, [r4, #8]
		hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80020ac:	f44f 7300 	mov.w	r3, #512	; 0x200
		hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
		hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80020b0:	f44f 6c00 	mov.w	ip, #2048	; 0x800
		hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80020b4:	e9c4 0303 	strd	r0, r3, [r4, #12]
		hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80020b8:	2320      	movs	r3, #32
 80020ba:	e9c4 c305 	strd	ip, r3, [r4, #20]
		hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80020be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
		if(HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80020c2:	4620      	mov	r0, r4
		hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80020c4:	61e3      	str	r3, [r4, #28]
		if(HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80020c6:	f7fe fe89 	bl	8000ddc <HAL_DMA_Init>
 80020ca:	b108      	cbz	r0, 80020d0 <HAL_ADC_MspInit+0x70>
		{
			Error_Handler();
 80020cc:	f7ff fdc4 	bl	8001c58 <Error_Handler>
		}

		__HAL_LINKDMA(hadc, DMA_Handle, hdma_adc1);
		HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80020d0:	2200      	movs	r2, #0
		__HAL_LINKDMA(hadc, DMA_Handle, hdma_adc1);
 80020d2:	622c      	str	r4, [r5, #32]
		HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80020d4:	2012      	movs	r0, #18
 80020d6:	4611      	mov	r1, r2
		__HAL_LINKDMA(hadc, DMA_Handle, hdma_adc1);
 80020d8:	6265      	str	r5, [r4, #36]	; 0x24
		HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80020da:	f7fe fe29 	bl	8000d30 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80020de:	2012      	movs	r0, #18
 80020e0:	f7fe fe5a 	bl	8000d98 <HAL_NVIC_EnableIRQ>
	}
	else
	{
		Error_Handler();
	}
}
 80020e4:	b007      	add	sp, #28
 80020e6:	bd30      	pop	{r4, r5, pc}
		Error_Handler();
 80020e8:	f7ff fdb6 	bl	8001c58 <Error_Handler>
}
 80020ec:	e7fa      	b.n	80020e4 <HAL_ADC_MspInit+0x84>
 80020ee:	bf00      	nop
 80020f0:	200000ac 	.word	0x200000ac
 80020f4:	40021000 	.word	0x40021000
 80020f8:	40010800 	.word	0x40010800
 80020fc:	200000dc 	.word	0x200000dc
 8002100:	40020008 	.word	0x40020008

08002104 <HAL_TIM_Base_MspInit>:
	}
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
	if(htim_base->Instance==htim3.Instance)
 8002104:	4b0f      	ldr	r3, [pc, #60]	; (8002144 <HAL_TIM_Base_MspInit+0x40>)
{
 8002106:	b507      	push	{r0, r1, r2, lr}
	if(htim_base->Instance==htim3.Instance)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	6802      	ldr	r2, [r0, #0]
 800210c:	429a      	cmp	r2, r3
 800210e:	d114      	bne.n	800213a <HAL_TIM_Base_MspInit+0x36>
	{
		__HAL_RCC_TIM3_CLK_ENABLE();
 8002110:	4b0d      	ldr	r3, [pc, #52]	; (8002148 <HAL_TIM_Base_MspInit+0x44>)

		HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002112:	201d      	movs	r0, #29
		__HAL_RCC_TIM3_CLK_ENABLE();
 8002114:	69da      	ldr	r2, [r3, #28]
 8002116:	f042 0202 	orr.w	r2, r2, #2
 800211a:	61da      	str	r2, [r3, #28]
		HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800211c:	2200      	movs	r2, #0
		__HAL_RCC_TIM3_CLK_ENABLE();
 800211e:	69db      	ldr	r3, [r3, #28]
		HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002120:	4611      	mov	r1, r2
		__HAL_RCC_TIM3_CLK_ENABLE();
 8002122:	f003 0302 	and.w	r3, r3, #2
 8002126:	9301      	str	r3, [sp, #4]
 8002128:	9b01      	ldr	r3, [sp, #4]
		HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800212a:	f7fe fe01 	bl	8000d30 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800212e:	201d      	movs	r0, #29
	}
	else
	{
		Error_Handler();
	}
}
 8002130:	b003      	add	sp, #12
 8002132:	f85d eb04 	ldr.w	lr, [sp], #4
		HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002136:	f7fe be2f 	b.w	8000d98 <HAL_NVIC_EnableIRQ>
}
 800213a:	b003      	add	sp, #12
 800213c:	f85d eb04 	ldr.w	lr, [sp], #4
		Error_Handler();
 8002140:	f7ff bd8a 	b.w	8001c58 <Error_Handler>
 8002144:	20000068 	.word	0x20000068
 8002148:	40021000 	.word	0x40021000

0800214c <HAL_CAN_MspInit>:
		Error_Handler();
	}
}

void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800214c:	b510      	push	{r4, lr}
 800214e:	4604      	mov	r4, r0
 8002150:	b086      	sub	sp, #24
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002152:	2210      	movs	r2, #16
 8002154:	2100      	movs	r1, #0
 8002156:	a802      	add	r0, sp, #8
 8002158:	f000 f8c6 	bl	80022e8 <memset>

	if(hcan->Instance==hcan1.Instance)
 800215c:	4b16      	ldr	r3, [pc, #88]	; (80021b8 <HAL_CAN_MspInit+0x6c>)
 800215e:	6822      	ldr	r2, [r4, #0]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	429a      	cmp	r2, r3
 8002164:	d125      	bne.n	80021b2 <HAL_CAN_MspInit+0x66>
	{
		__HAL_RCC_CAN1_CLK_ENABLE();
 8002166:	4b15      	ldr	r3, [pc, #84]	; (80021bc <HAL_CAN_MspInit+0x70>)
		//__HAL_RCC_GPIOA_CLK_ENABLE();

		GPIO_InitStruct.Pin = GPIO_PIN_11;
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
		GPIO_InitStruct.Pull = GPIO_NOPULL;
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002168:	a902      	add	r1, sp, #8
		__HAL_RCC_CAN1_CLK_ENABLE();
 800216a:	69da      	ldr	r2, [r3, #28]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800216c:	4814      	ldr	r0, [pc, #80]	; (80021c0 <HAL_CAN_MspInit+0x74>)
		__HAL_RCC_CAN1_CLK_ENABLE();
 800216e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8002172:	61da      	str	r2, [r3, #28]
 8002174:	69db      	ldr	r3, [r3, #28]
 8002176:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800217a:	9301      	str	r3, [sp, #4]
 800217c:	9b01      	ldr	r3, [sp, #4]
		GPIO_InitStruct.Pin = GPIO_PIN_11;
 800217e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002182:	9302      	str	r3, [sp, #8]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002184:	f7fe ff2c 	bl	8000fe0 <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = GPIO_PIN_12;
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002188:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800218c:	2302      	movs	r3, #2
 800218e:	e9cd 2302 	strd	r2, r3, [sp, #8]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002192:	2303      	movs	r3, #3
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002194:	a902      	add	r1, sp, #8
 8002196:	480a      	ldr	r0, [pc, #40]	; (80021c0 <HAL_CAN_MspInit+0x74>)
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002198:	9305      	str	r3, [sp, #20]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800219a:	f7fe ff21 	bl	8000fe0 <HAL_GPIO_Init>

		HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800219e:	2200      	movs	r2, #0
 80021a0:	2014      	movs	r0, #20
 80021a2:	4611      	mov	r1, r2
 80021a4:	f7fe fdc4 	bl	8000d30 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80021a8:	2014      	movs	r0, #20
 80021aa:	f7fe fdf5 	bl	8000d98 <HAL_NVIC_EnableIRQ>
	}
	else
	{
		Error_Handler();
	}
}
 80021ae:	b006      	add	sp, #24
 80021b0:	bd10      	pop	{r4, pc}
		Error_Handler();
 80021b2:	f7ff fd51 	bl	8001c58 <Error_Handler>
}
 80021b6:	e7fa      	b.n	80021ae <HAL_CAN_MspInit+0x62>
 80021b8:	20000140 	.word	0x20000140
 80021bc:	40021000 	.word	0x40021000
 80021c0:	40010800 	.word	0x40010800

080021c4 <NMI_Handler>:


void NMI_Handler(void)
{

}
 80021c4:	4770      	bx	lr

080021c6 <HardFault_Handler>:

void HardFault_Handler(void)
{
 80021c6:	e7fe      	b.n	80021c6 <HardFault_Handler>

080021c8 <MemManage_Handler>:

  }
}

void MemManage_Handler(void)
{
 80021c8:	e7fe      	b.n	80021c8 <MemManage_Handler>

080021ca <BusFault_Handler>:

  }
}

void BusFault_Handler(void)
{
 80021ca:	e7fe      	b.n	80021ca <BusFault_Handler>

080021cc <UsageFault_Handler>:

  }
}

void UsageFault_Handler(void)
{
 80021cc:	e7fe      	b.n	80021cc <UsageFault_Handler>

080021ce <SVC_Handler>:
 80021ce:	4770      	bx	lr

080021d0 <DebugMon_Handler>:
 80021d0:	4770      	bx	lr

080021d2 <PendSV_Handler>:
 80021d2:	4770      	bx	lr

080021d4 <SysTick_Handler>:

}

void SysTick_Handler(void)
{
	HAL_IncTick();
 80021d4:	f7fd bff0 	b.w	80001b8 <HAL_IncTick>

080021d8 <DMA1_Channel1_IRQHandler>:



void DMA1_Channel1_IRQHandler(void)
{
	HAL_DMA_IRQHandler(&hdma_adc1);
 80021d8:	4801      	ldr	r0, [pc, #4]	; (80021e0 <DMA1_Channel1_IRQHandler+0x8>)
 80021da:	f7fe be6d 	b.w	8000eb8 <HAL_DMA_IRQHandler>
 80021de:	bf00      	nop
 80021e0:	200000dc 	.word	0x200000dc

080021e4 <ADC1_2_IRQHandler>:
}

void ADC1_2_IRQHandler(void)
{
	HAL_ADC_IRQHandler(&hadc1);
 80021e4:	4801      	ldr	r0, [pc, #4]	; (80021ec <ADC1_2_IRQHandler+0x8>)
 80021e6:	f7fe b839 	b.w	800025c <HAL_ADC_IRQHandler>
 80021ea:	bf00      	nop
 80021ec:	200000ac 	.word	0x200000ac

080021f0 <TIM3_IRQHandler>:
}

void TIM3_IRQHandler(void)
{
	HAL_TIM_IRQHandler(&htim3);
 80021f0:	4801      	ldr	r0, [pc, #4]	; (80021f8 <TIM3_IRQHandler+0x8>)
 80021f2:	f7ff bc19 	b.w	8001a28 <HAL_TIM_IRQHandler>
 80021f6:	bf00      	nop
 80021f8:	20000068 	.word	0x20000068

080021fc <USB_LP_CAN1_RX0_IRQHandler>:
}

void USB_LP_CAN1_RX0_IRQHandler(void)
{
	HAL_CAN_IRQHandler(&hcan1);
 80021fc:	4801      	ldr	r0, [pc, #4]	; (8002204 <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 80021fe:	f7fe bc86 	b.w	8000b0e <HAL_CAN_IRQHandler>
 8002202:	bf00      	nop
 8002204:	20000140 	.word	0x20000140

08002208 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002208:	4b0f      	ldr	r3, [pc, #60]	; (8002248 <SystemInit+0x40>)
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	f042 0201 	orr.w	r2, r2, #1
 8002210:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002212:	6859      	ldr	r1, [r3, #4]
 8002214:	4a0d      	ldr	r2, [pc, #52]	; (800224c <SystemInit+0x44>)
 8002216:	400a      	ands	r2, r1
 8002218:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002220:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002224:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800222c:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800222e:	685a      	ldr	r2, [r3, #4]
 8002230:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8002234:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002236:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800223a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800223c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002240:	4b03      	ldr	r3, [pc, #12]	; (8002250 <SystemInit+0x48>)
 8002242:	609a      	str	r2, [r3, #8]
#endif 
}
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	40021000 	.word	0x40021000
 800224c:	f8ff0000 	.word	0xf8ff0000
 8002250:	e000ed00 	.word	0xe000ed00

08002254 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002254:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002256:	e003      	b.n	8002260 <LoopCopyDataInit>

08002258 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002258:	4b0b      	ldr	r3, [pc, #44]	; (8002288 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800225a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800225c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800225e:	3104      	adds	r1, #4

08002260 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002260:	480a      	ldr	r0, [pc, #40]	; (800228c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002262:	4b0b      	ldr	r3, [pc, #44]	; (8002290 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002264:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002266:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002268:	d3f6      	bcc.n	8002258 <CopyDataInit>
  ldr r2, =_sbss
 800226a:	4a0a      	ldr	r2, [pc, #40]	; (8002294 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800226c:	e002      	b.n	8002274 <LoopFillZerobss>

0800226e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800226e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002270:	f842 3b04 	str.w	r3, [r2], #4

08002274 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002274:	4b08      	ldr	r3, [pc, #32]	; (8002298 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002276:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002278:	d3f9      	bcc.n	800226e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800227a:	f7ff ffc5 	bl	8002208 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800227e:	f000 f80f 	bl	80022a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002282:	f7ff fd33 	bl	8001cec <main>
  bx lr
 8002286:	4770      	bx	lr
  ldr r3, =_sidata
 8002288:	08002350 	.word	0x08002350
  ldr r0, =_sdata
 800228c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002290:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8002294:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8002298:	20000180 	.word	0x20000180

0800229c <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800229c:	e7fe      	b.n	800229c <CAN1_RX1_IRQHandler>
	...

080022a0 <__libc_init_array>:
 80022a0:	b570      	push	{r4, r5, r6, lr}
 80022a2:	2500      	movs	r5, #0
 80022a4:	4e0c      	ldr	r6, [pc, #48]	; (80022d8 <__libc_init_array+0x38>)
 80022a6:	4c0d      	ldr	r4, [pc, #52]	; (80022dc <__libc_init_array+0x3c>)
 80022a8:	1ba4      	subs	r4, r4, r6
 80022aa:	10a4      	asrs	r4, r4, #2
 80022ac:	42a5      	cmp	r5, r4
 80022ae:	d109      	bne.n	80022c4 <__libc_init_array+0x24>
 80022b0:	f000 f822 	bl	80022f8 <_init>
 80022b4:	2500      	movs	r5, #0
 80022b6:	4e0a      	ldr	r6, [pc, #40]	; (80022e0 <__libc_init_array+0x40>)
 80022b8:	4c0a      	ldr	r4, [pc, #40]	; (80022e4 <__libc_init_array+0x44>)
 80022ba:	1ba4      	subs	r4, r4, r6
 80022bc:	10a4      	asrs	r4, r4, #2
 80022be:	42a5      	cmp	r5, r4
 80022c0:	d105      	bne.n	80022ce <__libc_init_array+0x2e>
 80022c2:	bd70      	pop	{r4, r5, r6, pc}
 80022c4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80022c8:	4798      	blx	r3
 80022ca:	3501      	adds	r5, #1
 80022cc:	e7ee      	b.n	80022ac <__libc_init_array+0xc>
 80022ce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80022d2:	4798      	blx	r3
 80022d4:	3501      	adds	r5, #1
 80022d6:	e7f2      	b.n	80022be <__libc_init_array+0x1e>
 80022d8:	08002348 	.word	0x08002348
 80022dc:	08002348 	.word	0x08002348
 80022e0:	08002348 	.word	0x08002348
 80022e4:	0800234c 	.word	0x0800234c

080022e8 <memset>:
 80022e8:	4603      	mov	r3, r0
 80022ea:	4402      	add	r2, r0
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d100      	bne.n	80022f2 <memset+0xa>
 80022f0:	4770      	bx	lr
 80022f2:	f803 1b01 	strb.w	r1, [r3], #1
 80022f6:	e7f9      	b.n	80022ec <memset+0x4>

080022f8 <_init>:
 80022f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022fa:	bf00      	nop
 80022fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022fe:	bc08      	pop	{r3}
 8002300:	469e      	mov	lr, r3
 8002302:	4770      	bx	lr

08002304 <_fini>:
 8002304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002306:	bf00      	nop
 8002308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800230a:	bc08      	pop	{r3}
 800230c:	469e      	mov	lr, r3
 800230e:	4770      	bx	lr
